//	LICENSE
//	This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
//	distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
//	END LICENSE

declare namespace slime.external.github.rest.components {
    namespace Parameters {
        export type AccountId = number;
        export type Actor = string;
        export type AlertNumber = /* The security alert number. */ Schemas.AlertNumber;
        export type All = boolean;
        export type AppSlug = string;
        export type ArtifactId = number;
        export type AssetId = number;
        export type AttemptNumber = number;
        export type AuditLogAfter = string;
        export type AuditLogBefore = string;
        export type AuditLogInclude = "web" | "git" | "all";
        export type AuditLogOrder = "desc" | "asc";
        export type AuditLogPhrase = string;
        export type AuthorizationId = number;
        export type AutolinkId = number;
        export type Before = string; // date-time
        export type Branch = string;
        export type CardId = number;
        export type CheckName = string;
        export type CheckRunId = number;
        export type CheckSuiteId = number;
        export type ClientId = string;
        export type CodespaceName = string;
        export type ColumnId = number;
        export type CommentId = number;
        export type CommentNumber = number;
        export type CommitSha = string;
        export type Count = number;
        export type Created = string; // date-time
        export type Cursor = string;
        export type DeliveryId = number;
        export type DeploymentId = number;
        export type Direction = "asc" | "desc";
        export type DiscussionNumber = number;
        export type Enterprise = string;
        export type EnvironmentName = string;
        export type Event = string;
        export type ExcludePullRequests = boolean;
        export type ExportId = string;
        export type GistId = string;
        export type GitRef = /**
         * The full Git reference, formatted as `refs/heads/<branch name>`,
         * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
         */
        Schemas.CodeScanningRef;
        export type GpgKeyId = number;
        export type GrantId = number;
        export type GroupId = number;
        export type HookId = number;
        export type InstallationId = number;
        export type InvitationId = number;
        export type IssueNumber = number;
        export type JobId = number;
        export type KeyId = number;
        export type Labels = string;
        export type ManifestPath = string;
        export type MigrationId = number;
        export type MilestoneNumber = number;
        export type Order = "desc" | "asc";
        export type Org = string;
        export type OrgId = number;
        export type Owner = string;
        export type PackageName = string;
        export type PackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        export type PackageVersionId = number;
        export type PackageVisibility = "public" | "private" | "internal";
        export type Page = number;
        export type PaginationAfter = string;
        export type PaginationBefore = string;
        export type Participating = boolean;
        export type Per = "" | "day" | "week";
        export type PerPage = number;
        export type PlanId = number;
        export type ProjectId = number;
        export type PullNumber = number;
        export type ReactionId = number;
        export type ReleaseId = number;
        export type Repo = string;
        export type RepoName = string;
        export type RepositoryId = number;
        export type RepositoryIdInQuery = number;
        export type ReviewId = number;
        export type RunId = number;
        export type RunnerGroupId = number;
        export type RunnerId = number;
        export type RunnerLabelName = string;
        export type ScimGroupId = string;
        export type ScimUserId = string;
        export type SecretName = string;
        export type SecretScanningAlertResolution = string;
        export type SecretScanningAlertSecretType = string;
        export type SecretScanningAlertState = "open" | "resolved";
        export type Since = string; // date-time
        export type SinceOrg = number;
        export type SinceRepo = number;
        export type SinceUser = number;
        export type Sort = "created" | "updated";
        export type StartIndex = number;
        export type Status = "queued" | "in_progress" | "completed";
        export type TagProtectionId = number;
        export type TeamId = number;
        export type TeamSlug = string;
        export type ThreadId = number;
        export type ToolGuid = /* The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */ Schemas.CodeScanningAnalysisToolGuid;
        export type ToolName = /* The name of the tool used to generate the code scanning analysis. */ Schemas.CodeScanningAnalysisToolName;
        export type Username = string;
        export type VisibleToOrganization = string;
        export type VisibleToRepository = string;
        export type WorkflowId = number | string;
        export type WorkflowRunBranch = string;
        export type WorkflowRunCheckSuiteId = number;
        export type WorkflowRunStatus = "completed" | "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "in_progress" | "queued" | "requested" | "waiting";
    }
    export interface PathParameters {
        "delivery-id"?: Parameters.DeliveryId;
        "installation-id"?: Parameters.InstallationId;
        "grant-id"?: Parameters.GrantId;
        "client-id"?: Parameters.ClientId;
        "app-slug"?: Parameters.AppSlug;
        "authorization-id"?: Parameters.AuthorizationId;
        enterprise: Parameters.Enterprise;
        "org-id"?: Parameters.OrgId;
        "runner-group-id"?: Parameters.RunnerGroupId;
        "runner-id"?: Parameters.RunnerId;
        "runner-label-name"?: Parameters.RunnerLabelName;
        "gist-id"?: Parameters.GistId;
        "comment-id"?: Parameters.CommentId;
        "account-id"?: Parameters.AccountId;
        "plan-id"?: Parameters.PlanId;
        owner: Parameters.Owner;
        repo: Parameters.Repo;
        "thread-id"?: Parameters.ThreadId;
        org: Parameters.Org;
        "repository-id"?: Parameters.RepositoryId;
        "secret-name"?: Parameters.SecretName;
        username: Parameters.Username;
        "group-id"?: Parameters.GroupId;
        "hook-id"?: Parameters.HookId;
        "invitation-id"?: Parameters.InvitationId;
        "migration-id"?: Parameters.MigrationId;
        "repo-name"?: Parameters.RepoName;
        "package-type"?: Parameters.PackageType;
        "package-name"?: Parameters.PackageName;
        "package-version-id"?: Parameters.PackageVersionId;
        "team-slug"?: Parameters.TeamSlug;
        "discussion-number"?: Parameters.DiscussionNumber;
        "comment-number"?: Parameters.CommentNumber;
        "reaction-id"?: Parameters.ReactionId;
        "project-id"?: Parameters.ProjectId;
        "card-id"?: Parameters.CardId;
        "column-id"?: Parameters.ColumnId;
        "artifact-id"?: Parameters.ArtifactId;
        "job-id"?: Parameters.JobId;
        "run-id"?: Parameters.RunId;
        "attempt-number"?: Parameters.AttemptNumber;
        "workflow-id"?: Parameters.WorkflowId;
        "autolink-id"?: Parameters.AutolinkId;
        branch: Parameters.Branch;
        "check-run-id"?: Parameters.CheckRunId;
        "check-suite-id"?: Parameters.CheckSuiteId;
        "alert-number"?: Parameters.AlertNumber;
        "commit-sha"?: Parameters.CommitSha;
        "deployment-id"?: Parameters.DeploymentId;
        "environment-name"?: Parameters.EnvironmentName;
        "issue-number"?: Parameters.IssueNumber;
        "key-id"?: Parameters.KeyId;
        "milestone-number"?: Parameters.MilestoneNumber;
        "pull-number"?: Parameters.PullNumber;
        "review-id"?: Parameters.ReviewId;
        "asset-id"?: Parameters.AssetId;
        "release-id"?: Parameters.ReleaseId;
        tag_protection_id: Parameters.TagProtectionId;
        "scim-group-id"?: Parameters.ScimGroupId;
        "scim-user-id"?: Parameters.ScimUserId;
        "team-id"?: Parameters.TeamId;
        "codespace-name"?: Parameters.CodespaceName;
        "export-id"?: Parameters.ExportId;
        "gpg-key-id"?: Parameters.GpgKeyId;
    }
    export interface QueryParameters {
        "per-page"?: Parameters.PerPage;
        cursor?: Parameters.Cursor;
        page?: Parameters.Page;
        since?: Parameters.Since /* date-time */;
        "visible-to-organization"?: Parameters.VisibleToOrganization;
        "audit-log-phrase"?: Parameters.AuditLogPhrase;
        "audit-log-include"?: Parameters.AuditLogInclude;
        "audit-log-after"?: Parameters.AuditLogAfter;
        "audit-log-before"?: Parameters.AuditLogBefore;
        "audit-log-order"?: Parameters.AuditLogOrder;
        "secret-scanning-alert-state"?: Parameters.SecretScanningAlertState;
        "secret-scanning-alert-secret-type"?: Parameters.SecretScanningAlertSecretType;
        "secret-scanning-alert-resolution"?: Parameters.SecretScanningAlertResolution;
        "pagination-before"?: Parameters.PaginationBefore;
        "pagination-after"?: Parameters.PaginationAfter;
        labels?: Parameters.Labels;
        direction?: Parameters.Direction;
        sort?: Parameters.Sort;
        all?: Parameters.All;
        participating?: Parameters.Participating;
        before?: Parameters.Before /* date-time */;
        "since-org"?: Parameters.SinceOrg;
        "visible-to-repository"?: Parameters.VisibleToRepository;
        "tool-name"?: Parameters.ToolName;
        "tool-guid"?: Parameters.ToolGuid;
        "package-visibility"?: Parameters.PackageVisibility;
        actor?: Parameters.Actor;
        "workflow-run-branch"?: Parameters.WorkflowRunBranch;
        event?: Parameters.Event;
        "workflow-run-status"?: Parameters.WorkflowRunStatus;
        created?: Parameters.Created /* date-time */;
        "exclude-pull-requests"?: Parameters.ExcludePullRequests;
        "workflow-run-check-suite-id"?: Parameters.WorkflowRunCheckSuiteId;
        "check-name"?: Parameters.CheckName;
        status?: Parameters.Status;
        "git-ref"?: Parameters.GitRef;
        "manifest-path"?: Parameters.ManifestPath;
        "since-user"?: Parameters.SinceUser;
        per?: Parameters.Per;
        "since-repo"?: Parameters.SinceRepo;
        "start-index"?: Parameters.StartIndex;
        count?: Parameters.Count;
        order?: Parameters.Order;
        "repository-id-in-query"?: Parameters.RepositoryIdInQuery;
    }
    namespace Responses {
        export interface Accepted {
        }
        export interface ActionsRunnerLabels {
            total_count: number;
            labels: /**
             * Self hosted runner label
             * A label for a self hosted runner
             */
            Schemas.RunnerLabel[];
        }
        export interface ActionsRunnerLabelsReadonly {
            total_count: number;
            labels: /**
             * Self hosted runner label
             * A label for a self hosted runner
             */
            Schemas.RunnerLabel[];
        }
        export type BadRequest = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type CodeScanningForbiddenRead = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type CodeScanningForbiddenWrite = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type Conflict = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type Forbidden = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export interface ForbiddenGist {
            block?: {
                reason?: string;
                created_at?: string;
                html_url?: string | null;
            };
            message?: string;
            documentation_url?: string;
        }
        export interface Found {
        }
        export type Gone = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type InternalError = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type MovedPermanently = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export interface NoContent {
        }
        export type NotFound = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export interface NotModified {
        }
        export type RequiresAuthentication = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type ScimBadRequest = /**
         * Scim Error
         * Scim Error
         */
        Schemas.ScimError;
        export type ScimConflict = /**
         * Scim Error
         * Scim Error
         */
        Schemas.ScimError;
        export type ScimForbidden = /**
         * Scim Error
         * Scim Error
         */
        Schemas.ScimError;
        export type ScimInternalError = /**
         * Scim Error
         * Scim Error
         */
        Schemas.ScimError;
        export type ScimNotFound = /**
         * Scim Error
         * Scim Error
         */
        Schemas.ScimError;
        export type ScimTooManyRequests = /**
         * Scim Error
         * Scim Error
         */
        Schemas.ScimError;
        export interface ServiceUnavailable {
            code?: string;
            message?: string;
            documentation_url?: string;
        }
        export type TemporaryRedirect = /**
         * Basic Error
         * Basic Error
         */
        Schemas.BasicError;
        export type ValidationFailed = /**
         * Validation Error
         * Validation Error
         */
        Schemas.ValidationError;
        export type ValidationFailedSimple = /**
         * Validation Error Simple
         * Validation Error Simple
         */
        Schemas.ValidationErrorSimple;
    }
    namespace Schemas {
        export interface ActionsBillingUsage {
            /**
             * The sum of the free and paid GitHub Actions minutes used.
             */
            total_minutes_used: number;
            /**
             * The total paid GitHub Actions minutes used.
             */
            total_paid_minutes_used: number;
            /**
             * The amount of free GitHub Actions minutes available.
             */
            included_minutes: number;
            minutes_used_breakdown: {
                /**
                 * Total minutes used on Ubuntu runner machines.
                 */
                UBUNTU?: number;
                /**
                 * Total minutes used on macOS runner machines.
                 */
                MACOS?: number;
                /**
                 * Total minutes used on Windows runner machines.
                 */
                WINDOWS?: number;
                /**
                 * Total minutes used on Linux 4 core runner machines.
                 */
                linux_4_core?: number;
                /**
                 * Total minutes used on Linux 8 core runner machines.
                 */
                linux_8_core?: number;
                /**
                 * Total minutes used on Linux 16 core runner machines.
                 */
                linux_16_core?: number;
                /**
                 * Total minutes used on Linux 32 core runner machines.
                 */
                linux_32_core?: number;
                /**
                 * Total minutes used on Linux 64 core runner machines.
                 */
                linux_64_core?: number;
                /**
                 * Total minutes used on Windows 4 core runner machines.
                 */
                windows_4_core?: number;
                /**
                 * Total minutes used on Windows 8 core runner machines.
                 */
                windows_8_core?: number;
                /**
                 * Total minutes used on Windows 16 core runner machines.
                 */
                windows_16_core?: number;
                /**
                 * Total minutes used on Windows 32 core runner machines.
                 */
                windows_32_core?: number;
                /**
                 * Total minutes used on Windows 64 core runner machines.
                 */
                windows_64_core?: number;
                /**
                 * Total minutes used on all runner machines.
                 */
                total?: number;
            };
        }
        /**
         * Actions Cache Usage by repository
         * GitHub Actions Cache Usage by repository.
         */
        export interface ActionsCacheUsageByRepository {
            /**
             * The repository owner and name for the cache usage being shown.
             * example:
             * octo-org/Hello-World
             */
            full_name: string;
            /**
             * The sum of the size in bytes of all the active cache items in the repository.
             * example:
             * 2322142
             */
            active_caches_size_in_bytes: number;
            /**
             * The number of active caches in the repository.
             * example:
             * 3
             */
            active_caches_count: number;
        }
        export interface ActionsCacheUsageOrgEnterprise {
            /**
             * The count of active caches across all repositories of an enterprise or an organization.
             */
            total_active_caches_count: number;
            /**
             * The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
             */
            total_active_caches_size_in_bytes: number;
        }
        /**
         * Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
         */
        export type ActionsCanApprovePullRequestReviews = boolean;
        /**
         * The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
         */
        export type ActionsDefaultWorkflowPermissions = "read" | "write";
        /**
         * Whether GitHub Actions is enabled on the repository.
         */
        export type ActionsEnabled = boolean;
        export interface ActionsEnterprisePermissions {
            enabled_organizations: /* The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */ EnabledOrganizations;
            /**
             * The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.
             */
            selected_organizations_url?: string;
            allowed_actions?: /* The permissions policy that controls the actions and reusable workflows that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */ AllowedActions;
            selected_actions_url?: /* The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */ SelectedActionsUrl;
        }
        export interface ActionsGetDefaultWorkflowPermissions {
            default_workflow_permissions: /* The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */ ActionsDefaultWorkflowPermissions;
            can_approve_pull_request_reviews: /* Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */ ActionsCanApprovePullRequestReviews;
        }
        export interface ActionsOrganizationPermissions {
            enabled_repositories: /* The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */ EnabledRepositories;
            /**
             * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
             */
            selected_repositories_url?: string;
            allowed_actions?: /* The permissions policy that controls the actions and reusable workflows that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */ AllowedActions;
            selected_actions_url?: /* The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */ SelectedActionsUrl;
        }
        /**
         * ActionsPublicKey
         * The public key used for setting Actions Secrets.
         */
        export interface ActionsPublicKey {
            /**
             * The identifier for the key.
             * example:
             * 1234567
             */
            key_id: string;
            /**
             * The Base64 encoded public key.
             * example:
             * hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
            /**
             * example:
             * 2
             */
            id?: number;
            /**
             * example:
             * https://api.github.com/user/keys/2
             */
            url?: string;
            /**
             * example:
             * ssh-rsa AAAAB3NzaC1yc2EAAA
             */
            title?: string;
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at?: string;
        }
        export interface ActionsRepositoryPermissions {
            enabled: /* Whether GitHub Actions is enabled on the repository. */ ActionsEnabled;
            allowed_actions?: /* The permissions policy that controls the actions and reusable workflows that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */ AllowedActions;
            selected_actions_url?: /* The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */ SelectedActionsUrl;
        }
        /**
         * Actions Secret
         * Set secrets for GitHub Actions.
         */
        export interface ActionsSecret {
            /**
             * The name of the secret.
             * example:
             * SECRET_TOKEN
             */
            name: string;
            created_at: string; // date-time
            updated_at: string; // date-time
        }
        export interface ActionsSetDefaultWorkflowPermissions {
            default_workflow_permissions?: /* The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */ ActionsDefaultWorkflowPermissions;
            can_approve_pull_request_reviews?: /* Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */ ActionsCanApprovePullRequestReviews;
        }
        export interface ActionsWorkflowAccessToRepository {
            /**
             * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
             * repository. `none` means access is only possible from workflows in this repository. Can be one of `none`, `organization`, `enterprise`.
             */
            access_level: "none" | "organization" | "enterprise";
        }
        /**
         * Actor
         * Actor
         */
        export interface Actor {
            id: number;
            login: string;
            display_login?: string;
            gravatar_id: string | null;
            url: string; // uri
            avatar_url: string; // uri
        }
        /**
         * Added to Project Issue Event
         * Added to Project Issue Event
         */
        export interface AddedToProjectIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            project_card?: {
                id: number;
                url: string; // uri
                project_id: number;
                project_url: string; // uri
                column_name: string;
                previous_column_name?: string;
            };
        }
        export interface AdvancedSecurityActiveCommitters {
            /**
             * example:
             * 25
             */
            total_advanced_security_committers?: number;
            repositories: AdvancedSecurityActiveCommittersRepository[];
        }
        export interface AdvancedSecurityActiveCommittersRepository {
            /**
             * example:
             * octocat/Hello-World
             */
            name: string;
            /**
             * example:
             * 25
             */
            advanced_security_committers: number;
            advanced_security_committers_breakdown: AdvancedSecurityActiveCommittersUser[];
        }
        export interface AdvancedSecurityActiveCommittersUser {
            user_login: string;
            /**
             * example:
             * 2021-11-03
             */
            last_pushed_date: string;
        }
        /**
         * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        export type AlertCreatedAt = string; // date-time
        /**
         * The GitHub URL of the alert resource.
         */
        export type AlertHtmlUrl = string; // uri
        /**
         * The REST API URL for fetching the list of instances for an alert.
         */
        export type AlertInstancesUrl = string; // uri
        /**
         * The security alert number.
         */
        export type AlertNumber = number;
        /**
         * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        export type AlertUpdatedAt = string; // date-time
        /**
         * The REST API URL of the alert resource.
         */
        export type AlertUrl = string; // uri
        /**
         * The permissions policy that controls the actions and reusable workflows that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
         */
        export type AllowedActions = "all" | "local_only" | "selected";
        /**
         * Api Overview
         * Api Overview
         */
        export interface ApiOverview {
            /**
             * example:
             * true
             */
            verifiable_password_authentication: boolean;
            ssh_key_fingerprints?: {
                SHA256_RSA?: string;
                SHA256_DSA?: string;
                SHA256_ECDSA?: string;
                SHA256_ED25519?: string;
            };
            /**
             * example:
             * [
             *   "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
             * ]
             */
            ssh_keys?: string[];
            /**
             * example:
             * [
             *   "127.0.0.1/32"
             * ]
             */
            hooks?: string[];
            /**
             * example:
             * [
             *   "127.0.0.1/32"
             * ]
             */
            web?: string[];
            /**
             * example:
             * [
             *   "127.0.0.1/32"
             * ]
             */
            api?: string[];
            /**
             * example:
             * [
             *   "127.0.0.1/32"
             * ]
             */
            git?: string[];
            /**
             * example:
             * [
             *   "13.65.0.0/16",
             *   "157.55.204.33/32",
             *   "2a01:111:f403:f90c::/62"
             * ]
             */
            packages?: string[];
            /**
             * example:
             * [
             *   "192.30.252.153/32",
             *   "192.30.252.154/32"
             * ]
             */
            pages?: string[];
            /**
             * example:
             * [
             *   "54.158.161.132",
             *   "54.226.70.38"
             * ]
             */
            importer?: string[];
            /**
             * example:
             * [
             *   "13.64.0.0/16",
             *   "13.65.0.0/16"
             * ]
             */
            actions?: string[];
            /**
             * example:
             * [
             *   "192.168.7.15/32",
             *   "192.168.7.16/32"
             * ]
             */
            dependabot?: string[];
        }
        /**
         * App Permissions
         * The permissions granted to the user-to-server access token.
         * example:
         * {
         *   "contents": "read",
         *   "issues": "read",
         *   "deployments": "write",
         *   "single_file": "read"
         * }
         */
        export interface AppPermissions {
            /**
             * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
             */
            actions?: "read" | "write";
            /**
             * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
             */
            administration?: "read" | "write";
            /**
             * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
             */
            checks?: "read" | "write";
            /**
             * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
             */
            contents?: "read" | "write";
            /**
             * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
             */
            deployments?: "read" | "write";
            /**
             * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
             */
            environments?: "read" | "write";
            /**
             * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
             */
            issues?: "read" | "write";
            /**
             * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
             */
            metadata?: "read" | "write";
            /**
             * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
             */
            packages?: "read" | "write";
            /**
             * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
             */
            pages?: "read" | "write";
            /**
             * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
             */
            pull_requests?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
             */
            repository_hooks?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
             */
            repository_projects?: "read" | "write" | "admin";
            /**
             * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
             */
            secret_scanning_alerts?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
             */
            secrets?: "read" | "write";
            /**
             * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
             */
            security_events?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
             */
            single_file?: "read" | "write";
            /**
             * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
             */
            statuses?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
             */
            vulnerability_alerts?: "read" | "write";
            /**
             * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
             */
            workflows?: "write";
            /**
             * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
             */
            members?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
             */
            organization_administration?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
             */
            organization_hooks?: "read" | "write";
            /**
             * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
             */
            organization_plan?: "read";
            /**
             * The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
             */
            organization_projects?: "read" | "write" | "admin";
            /**
             * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
             */
            organization_packages?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
             */
            organization_secrets?: "read" | "write";
            /**
             * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
             */
            organization_self_hosted_runners?: "read" | "write";
            /**
             * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
             */
            organization_user_blocking?: "read" | "write";
            /**
             * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
             */
            team_discussions?: "read" | "write";
        }
        /**
         * Application Grant
         * The authorization associated with an OAuth Access.
         */
        export interface ApplicationGrant {
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * https://api.github.com/applications/grants/1
             */
            url: string; // uri
            app: {
                client_id: string;
                name: string;
                url: string; // uri
            };
            /**
             * example:
             * 2011-09-06T17:26:27Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-09-06T20:39:23Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * [
             *   "public_repo"
             * ]
             */
            scopes: string[];
            user?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
        }
        /**
         * Artifact
         * An artifact
         */
        export interface Artifact {
            /**
             * example:
             * 5
             */
            id: number;
            /**
             * example:
             * MDEwOkNoZWNrU3VpdGU1
             */
            node_id: string;
            /**
             * The name of the artifact.
             * example:
             * AdventureWorks.Framework
             */
            name: string;
            /**
             * The size in bytes of the artifact.
             * example:
             * 12345
             */
            size_in_bytes: number;
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/actions/artifacts/5
             */
            url: string;
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip
             */
            archive_download_url: string;
            /**
             * Whether or not the artifact has expired.
             */
            expired: boolean;
            created_at: string | null; // date-time
            expires_at: string | null; // date-time
            updated_at: string | null; // date-time
        }
        /**
         * Assigned Issue Event
         * Assigned Issue Event
         */
        export interface AssignedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            Integration;
            assignee: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            assigner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
        }
        export interface AuditLogEvent {
            /**
             * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
             */
            "@timestamp"?: number;
            /**
             * The name of the action that was performed, for example `user.login` or `repo.create`.
             */
            action?: string;
            active?: boolean;
            active_was?: boolean;
            /**
             * The actor who performed the action.
             */
            actor?: string;
            /**
             * The id of the actor who performed the action.
             */
            actor_id?: number;
            actor_location?: {
                country_name?: string;
            };
            data?: {
                [name: string]: any;
            };
            org_id?: number;
            /**
             * The username of the account being blocked.
             */
            blocked_user?: string;
            business?: string;
            config?: {
                [key: string]: any;
            }[];
            config_was?: {
                [key: string]: any;
            }[];
            content_type?: string;
            /**
             * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
             */
            created_at?: number;
            deploy_key_fingerprint?: string;
            /**
             * A unique identifier for an audit event.
             */
            _document_id?: string;
            emoji?: string;
            events?: {
                [key: string]: any;
            }[];
            events_were?: {
                [key: string]: any;
            }[];
            explanation?: string;
            fingerprint?: string;
            hook_id?: number;
            limited_availability?: boolean;
            message?: string;
            name?: string;
            old_user?: string;
            openssh_public_key?: string;
            org?: string;
            previous_visibility?: string;
            read_only?: boolean;
            /**
             * The name of the repository.
             */
            repo?: string;
            /**
             * The name of the repository.
             */
            repository?: string;
            repository_public?: boolean;
            target_login?: string;
            team?: string;
            /**
             * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
             */
            transport_protocol?: number;
            /**
             * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
             */
            transport_protocol_name?: string;
            /**
             * The user that was affected by the action performed (if available).
             */
            user?: string;
            /**
             * The repository visibility, for example `public` or `private`.
             */
            visibility?: string;
        }
        /**
         * Authentication Token
         * Authentication Token
         */
        export interface AuthenticationToken {
            /**
             * The token used for authentication
             * example:
             * v1.1f699f1069f60xxx
             */
            token: string;
            /**
             * The time this token expires
             * example:
             * 2016-07-11T22:14:10Z
             */
            expires_at: string; // date-time
            /**
             * example:
             * {
             *   "issues": "read",
             *   "deployments": "write"
             * }
             */
            permissions?: {
                [key: string]: any;
            };
            /**
             * The repositories this token has access to
             */
            repositories?: /**
             * Repository
             * A git repository
             */
            Repository[];
            /**
             * example:
             * config.yaml
             */
            single_file?: string | null;
            /**
             * Describe whether all repositories have been selected or there's a selection involved
             */
            repository_selection?: "all" | "selected";
        }
        /**
         * author_association
         * How the author is associated with the repository.
         * example:
         * OWNER
         */
        export type AuthorAssociation = "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
        /**
         * Authorization
         * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
         */
        export interface Authorization {
            id: number;
            url: string; // uri
            /**
             * A list of scopes that this authorization is in.
             */
            scopes: string[] | null;
            token: string;
            token_last_eight: string | null;
            hashed_token: string | null;
            app: {
                client_id: string;
                name: string;
                url: string; // uri
            };
            note: string | null;
            note_url: string | null; // uri
            updated_at: string; // date-time
            created_at: string; // date-time
            fingerprint: string | null;
            user?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            installation?: /* Scoped Installation */ NullableScopedInstallation;
            expires_at: string | null; // date-time
        }
        /**
         * Auto merge
         * The status of auto merging a pull request.
         */
        export type AutoMerge = {
            enabled_by: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * The merge method to use.
             */
            merge_method: "merge" | "squash" | "rebase";
            /**
             * Title for the merge commit message.
             */
            commit_title: string;
            /**
             * Commit message for the merge commit.
             */
            commit_message: string;
        } | null;
        /**
         * Autolink reference
         * An autolink reference.
         */
        export interface Autolink {
            /**
             * example:
             * 3
             */
            id: number;
            /**
             * The prefix of a key that is linkified.
             * example:
             * TICKET-
             */
            key_prefix: string;
            /**
             * A template for the target URL that is generated if a key was found.
             * example:
             * https://example.com/TICKET?query=<num>
             */
            url_template: string;
        }
        /**
         * Base Gist
         * Base Gist
         */
        export interface BaseGist {
            url: string; // uri
            forks_url: string; // uri
            commits_url: string; // uri
            id: string;
            node_id: string;
            git_pull_url: string; // uri
            git_push_url: string; // uri
            html_url: string; // uri
            files: {
                [name: string]: {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                };
            };
            public: boolean;
            created_at: string; // date-time
            updated_at: string; // date-time
            description: string | null;
            comments: number;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            comments_url: string; // uri
            owner?: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            truncated?: boolean;
            forks?: any[];
            history?: any[];
        }
        /**
         * Basic Error
         * Basic Error
         */
        export interface BasicError {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
        }
        /**
         * Blob
         * Blob
         */
        export interface Blob {
            content: string;
            encoding: string;
            url: string; // uri
            sha: string;
            size: null | number;
            node_id: string;
            highlighted_content?: string;
        }
        /**
         * Branch Protection
         * Branch Protection
         */
        export interface BranchProtection {
            url?: string;
            enabled?: boolean;
            required_status_checks?: /**
             * Protected Branch Required Status Check
             * Protected Branch Required Status Check
             */
            ProtectedBranchRequiredStatusCheck;
            enforce_admins?: /**
             * Protected Branch Admin Enforced
             * Protected Branch Admin Enforced
             */
            ProtectedBranchAdminEnforced;
            required_pull_request_reviews?: /**
             * Protected Branch Pull Request Review
             * Protected Branch Pull Request Review
             */
            ProtectedBranchPullRequestReview;
            restrictions?: /**
             * Branch Restriction Policy
             * Branch Restriction Policy
             */
            BranchRestrictionPolicy;
            required_linear_history?: {
                enabled?: boolean;
            };
            allow_force_pushes?: {
                enabled?: boolean;
            };
            allow_deletions?: {
                enabled?: boolean;
            };
            block_creations?: {
                enabled?: boolean;
            };
            required_conversation_resolution?: {
                enabled?: boolean;
            };
            /**
             * example:
             * "branch/with/protection"
             */
            name?: string;
            /**
             * example:
             * "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"
             */
            protection_url?: string;
            required_signatures?: {
                /**
                 * example:
                 * https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
                 */
                url: string; // uri
                /**
                 * example:
                 * true
                 */
                enabled: boolean;
            };
        }
        /**
         * Branch Restriction Policy
         * Branch Restriction Policy
         */
        export interface BranchRestrictionPolicy {
            url: string; // uri
            users_url: string; // uri
            teams_url: string; // uri
            apps_url: string; // uri
            users: {
                login?: string;
                id?: number;
                node_id?: string;
                avatar_url?: string;
                gravatar_id?: string;
                url?: string;
                html_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                starred_url?: string;
                subscriptions_url?: string;
                organizations_url?: string;
                repos_url?: string;
                events_url?: string;
                received_events_url?: string;
                type?: string;
                site_admin?: boolean;
            }[];
            teams: {
                id?: number;
                node_id?: string;
                url?: string;
                html_url?: string;
                name?: string;
                slug?: string;
                description?: string | null;
                privacy?: string;
                permission?: string;
                members_url?: string;
                repositories_url?: string;
                parent?: string | null;
            }[];
            apps: {
                id?: number;
                slug?: string;
                node_id?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    url?: string;
                    repos_url?: string;
                    events_url?: string;
                    hooks_url?: string;
                    issues_url?: string;
                    members_url?: string;
                    public_members_url?: string;
                    avatar_url?: string;
                    description?: string;
                    /**
                     * example:
                     * ""
                     */
                    gravatar_id?: string;
                    /**
                     * example:
                     * "https://github.com/testorg-ea8ec76d71c3af4b"
                     */
                    html_url?: string;
                    /**
                     * example:
                     * "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
                     */
                    followers_url?: string;
                    /**
                     * example:
                     * "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
                     */
                    following_url?: string;
                    /**
                     * example:
                     * "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
                     */
                    gists_url?: string;
                    /**
                     * example:
                     * "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
                     */
                    starred_url?: string;
                    /**
                     * example:
                     * "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
                     */
                    subscriptions_url?: string;
                    /**
                     * example:
                     * "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
                     */
                    organizations_url?: string;
                    /**
                     * example:
                     * "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
                     */
                    received_events_url?: string;
                    /**
                     * example:
                     * "Organization"
                     */
                    type?: string;
                    /**
                     * example:
                     * false
                     */
                    site_admin?: boolean;
                };
                name?: string;
                description?: string;
                external_url?: string;
                html_url?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    metadata?: string;
                    contents?: string;
                    issues?: string;
                    single_file?: string;
                };
                events?: string[];
            }[];
        }
        /**
         * Branch Short
         * Branch Short
         */
        export interface BranchShort {
            name: string;
            commit: {
                sha: string;
                url: string;
            };
            protected: boolean;
        }
        /**
         * Branch With Protection
         * Branch With Protection
         */
        export interface BranchWithProtection {
            name: string;
            commit: /**
             * Commit
             * Commit
             */
            Commit;
            _links: {
                html: string;
                self: string; // uri
            };
            protected: boolean;
            protection: /**
             * Branch Protection
             * Branch Protection
             */
            BranchProtection;
            protection_url: string; // uri
            /**
             * example:
             * "mas*"
             */
            pattern?: string;
            /**
             * example:
             * 1
             */
            required_approving_review_count?: number;
        }
        /**
         * Check Annotation
         * Check Annotation
         */
        export interface CheckAnnotation {
            /**
             * example:
             * README.md
             */
            path: string;
            /**
             * example:
             * 2
             */
            start_line: number;
            /**
             * example:
             * 2
             */
            end_line: number;
            /**
             * example:
             * 5
             */
            start_column: null | number;
            /**
             * example:
             * 10
             */
            end_column: null | number;
            /**
             * example:
             * warning
             */
            annotation_level: string | null;
            /**
             * example:
             * Spell Checker
             */
            title: string | null;
            /**
             * example:
             * Check your spelling for 'banaas'.
             */
            message: string | null;
            /**
             * example:
             * Do you mean 'bananas' or 'banana'?
             */
            raw_details: string | null;
            blob_href: string;
        }
        /**
         * CheckRun
         * A check performed on the code of a given code change
         */
        export interface CheckRun {
            /**
             * The id of the check.
             * example:
             * 21
             */
            id: number;
            /**
             * The SHA of the commit that is being checked.
             * example:
             * 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /**
             * example:
             * MDg6Q2hlY2tSdW40
             */
            node_id: string;
            /**
             * example:
             * 42
             */
            external_id: string | null;
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/check-runs/4
             */
            url: string;
            /**
             * example:
             * https://github.com/github/hello-world/runs/4
             */
            html_url: string | null;
            /**
             * example:
             * https://example.com
             */
            details_url: string | null;
            /**
             * The phase of the lifecycle that the check is currently in.
             * example:
             * queued
             */
            status: "queued" | "in_progress" | "completed";
            /**
             * example:
             * neutral
             */
            conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required";
            /**
             * example:
             * 2018-05-04T01:14:52Z
             */
            started_at: string | null; // date-time
            /**
             * example:
             * 2018-05-04T01:14:52Z
             */
            completed_at: string | null; // date-time
            output: {
                title: string | null;
                summary: string | null;
                text: string | null;
                annotations_count: number;
                annotations_url: string; // uri
            };
            /**
             * The name of the check.
             * example:
             * test-coverage
             */
            name: string;
            check_suite: {
                id: number;
            } | null;
            app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            pull_requests: /* Pull Request Minimal */ PullRequestMinimal[];
            deployment?: /**
             * Deployment
             * A deployment created as the result of an Actions check run from a workflow that references an environment
             */
            DeploymentSimple;
        }
        /**
         * CheckSuite
         * A suite of checks performed on the code of a given code change
         */
        export interface CheckSuite {
            /**
             * example:
             * 5
             */
            id: number;
            /**
             * example:
             * MDEwOkNoZWNrU3VpdGU1
             */
            node_id: string;
            /**
             * example:
             * master
             */
            head_branch: string | null;
            /**
             * The SHA of the head commit that is being checked.
             * example:
             * 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /**
             * example:
             * completed
             */
            status: "queued" | "in_progress" | "completed";
            /**
             * example:
             * neutral
             */
            conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required";
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/check-suites/5
             */
            url: string | null;
            /**
             * example:
             * 146e867f55c26428e5f9fade55a9bbf5e95a7912
             */
            before: string | null;
            /**
             * example:
             * d6fde92930d4715a2b49857d24b940956b26d2d3
             */
            after: string | null;
            pull_requests: /* Pull Request Minimal */ PullRequestMinimal[] | null;
            app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            created_at: string | null; // date-time
            updated_at: string | null; // date-time
            head_commit: /**
             * Simple Commit
             * Simple Commit
             */
            SimpleCommit;
            latest_check_runs_count: number;
            check_runs_url: string;
            rerequestable?: boolean;
            runs_rerequestable?: boolean;
        }
        /**
         * Check Suite Preference
         * Check suite configuration preferences for a repository.
         */
        export interface CheckSuitePreference {
            preferences: {
                auto_trigger_checks?: {
                    app_id: number;
                    setting: boolean;
                }[];
            };
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
        }
        /**
         * Clone Traffic
         * Clone Traffic
         */
        export interface CloneTraffic {
            /**
             * example:
             * 173
             */
            count: number;
            /**
             * example:
             * 128
             */
            uniques: number;
            clones: /* Traffic */ Traffic[];
        }
        /**
         * Code Frequency Stat
         * Code Frequency Stat
         */
        export type CodeFrequencyStat = number[];
        /**
         * Code Of Conduct
         * Code Of Conduct
         */
        export interface CodeOfConduct {
            /**
             * example:
             * contributor_covenant
             */
            key: string;
            /**
             * example:
             * Contributor Covenant
             */
            name: string;
            /**
             * example:
             * https://api.github.com/codes_of_conduct/contributor_covenant
             */
            url: string; // uri
            /**
             * example:
             * # Contributor Covenant Code of Conduct
             *
             * ## Our Pledge
             *
             * In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
             *
             * ## Our Standards
             *
             * Examples of behavior that contributes to creating a positive environment include:
             *
             * * Using welcoming and inclusive language
             * * Being respectful of differing viewpoints and experiences
             * * Gracefully accepting constructive criticism
             * * Focusing on what is best for the community
             * * Showing empathy towards other community members
             *
             * Examples of unacceptable behavior by participants include:
             *
             * * The use of sexualized language or imagery and unwelcome sexual attention or advances
             * * Trolling, insulting/derogatory comments, and personal or political attacks
             * * Public or private harassment
             * * Publishing others' private information, such as a physical or electronic address, without explicit permission
             * * Other conduct which could reasonably be considered inappropriate in a professional setting
             *
             * ## Our Responsibilities
             *
             * Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
             *                   to any instances of unacceptable behavior.
             *
             * Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
             *
             * ## Scope
             *
             * This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
             *                   posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
             *
             * ## Enforcement
             *
             * Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
             *
             * Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
             *
             * ## Attribution
             *
             * This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]
             *
             * [homepage]: http://contributor-covenant.org
             * [version]: http://contributor-covenant.org/version/1/4/
             *
             */
            body?: string;
            html_url: string | null; // uri
        }
        /**
         * Code Of Conduct Simple
         * Code of Conduct Simple
         */
        export interface CodeOfConductSimple {
            /**
             * example:
             * https://api.github.com/repos/github/docs/community/code_of_conduct
             */
            url: string; // uri
            /**
             * example:
             * citizen_code_of_conduct
             */
            key: string;
            /**
             * example:
             * Citizen Code of Conduct
             */
            name: string;
            /**
             * example:
             * https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
             */
            html_url: string | null; // uri
        }
        export interface CodeScanningAlert {
            number: /* The security alert number. */ AlertNumber;
            created_at: /* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertCreatedAt /* date-time */;
            updated_at?: /* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertUpdatedAt /* date-time */;
            url: /* The REST API URL of the alert resource. */ AlertUrl /* uri */;
            html_url: /* The GitHub URL of the alert resource. */ AlertHtmlUrl /* uri */;
            instances_url: /* The REST API URL for fetching the list of instances for an alert. */ AlertInstancesUrl /* uri */;
            state: /* State of a code scanning alert. */ CodeScanningAlertState;
            fixed_at?: /* The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ CodeScanningAlertFixedAt /* date-time */;
            dismissed_by: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            dismissed_at: /* The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ CodeScanningAlertDismissedAt /* date-time */;
            dismissed_reason: /* **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */ CodeScanningAlertDismissedReason;
            dismissed_note?: /* The dismissal note associated with the dismissal of the alert. */ CodeScanningAlertDismissedNote;
            rule: CodeScanningAlertRule;
            tool: CodeScanningAnalysisTool;
            most_recent_instance: CodeScanningAlertInstance;
        }
        /**
         * A classification of the file. For example to identify it as generated.
         */
        export type CodeScanningAlertClassification = "source" | "generated" | "test" | "library";
        /**
         * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        export type CodeScanningAlertDismissedAt = string | null; // date-time
        /**
         * The dismissal note associated with the dismissal of the alert.
         */
        export type CodeScanningAlertDismissedNote = string | null;
        /**
         * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
         */
        export type CodeScanningAlertDismissedReason = null | "false positive" | "won't fix" | "used in tests";
        /**
         * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
         */
        export type CodeScanningAlertEnvironment = string;
        /**
         * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        export type CodeScanningAlertFixedAt = string | null; // date-time
        export interface CodeScanningAlertInstance {
            ref?: /**
             * The full Git reference, formatted as `refs/heads/<branch name>`,
             * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
             */
            CodeScanningRef;
            analysis_key?: /* Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */ CodeScanningAnalysisAnalysisKey;
            environment?: /* Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */ CodeScanningAlertEnvironment;
            category?: /* Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */ CodeScanningAnalysisCategory;
            state?: /* State of a code scanning alert. */ CodeScanningAlertState;
            commit_sha?: string;
            message?: {
                text?: string;
            };
            location?: /* Describe a region within a file for the alert. */ CodeScanningAlertLocation;
            html_url?: string;
            /**
             * Classifications that have been applied to the file that triggered the alert.
             * For example identifying it as documentation, or a generated file.
             */
            classifications?: /* A classification of the file. For example to identify it as generated. */ CodeScanningAlertClassification[];
        }
        export interface CodeScanningAlertItems {
            number: /* The security alert number. */ AlertNumber;
            created_at: /* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertCreatedAt /* date-time */;
            updated_at?: /* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertUpdatedAt /* date-time */;
            url: /* The REST API URL of the alert resource. */ AlertUrl /* uri */;
            html_url: /* The GitHub URL of the alert resource. */ AlertHtmlUrl /* uri */;
            instances_url: /* The REST API URL for fetching the list of instances for an alert. */ AlertInstancesUrl /* uri */;
            state: /* State of a code scanning alert. */ CodeScanningAlertState;
            fixed_at?: /* The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ CodeScanningAlertFixedAt /* date-time */;
            dismissed_by: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            dismissed_at: /* The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ CodeScanningAlertDismissedAt /* date-time */;
            dismissed_reason: /* **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */ CodeScanningAlertDismissedReason;
            dismissed_note?: /* The dismissal note associated with the dismissal of the alert. */ CodeScanningAlertDismissedNote;
            rule: CodeScanningAlertRuleSummary;
            tool: CodeScanningAnalysisTool;
            most_recent_instance: CodeScanningAlertInstance;
        }
        /**
         * Describe a region within a file for the alert.
         */
        export interface CodeScanningAlertLocation {
            path?: string;
            start_line?: number;
            end_line?: number;
            start_column?: number;
            end_column?: number;
        }
        export interface CodeScanningAlertRule {
            /**
             * A unique identifier for the rule used to detect the alert.
             */
            id?: string | null;
            /**
             * The name of the rule used to detect the alert.
             */
            name?: string;
            /**
             * The severity of the alert.
             */
            severity?: "none" | "note" | "warning" | "error";
            /**
             * The security severity of the alert.
             */
            security_severity_level?: "low" | "medium" | "high" | "critical";
            /**
             * A short description of the rule used to detect the alert.
             */
            description?: string;
            /**
             * description of the rule used to detect the alert.
             */
            full_description?: string;
            /**
             * A set of tags applicable for the rule.
             */
            tags?: string[] | null;
            /**
             * Detailed documentation for the rule as GitHub Flavored Markdown.
             */
            help?: string | null;
        }
        export interface CodeScanningAlertRuleSummary {
            /**
             * A unique identifier for the rule used to detect the alert.
             */
            id?: string | null;
            /**
             * The name of the rule used to detect the alert.
             */
            name?: string;
            /**
             * A set of tags applicable for the rule.
             */
            tags?: string[] | null;
            /**
             * The severity of the alert.
             */
            severity?: "none" | "note" | "warning" | "error";
            /**
             * A short description of the rule used to detect the alert.
             */
            description?: string;
        }
        /**
         * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
         */
        export type CodeScanningAlertSetState = "open" | "dismissed";
        /**
         * State of a code scanning alert.
         */
        export type CodeScanningAlertState = "open" | "closed" | "dismissed" | "fixed";
        export interface CodeScanningAnalysis {
            ref: /**
             * The full Git reference, formatted as `refs/heads/<branch name>`,
             * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
             */
            CodeScanningRef;
            commit_sha: /* The SHA of the commit to which the analysis you are uploading relates. */ CodeScanningAnalysisCommitSha /* ^[0-9a-fA-F]+$ */;
            analysis_key: /* Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */ CodeScanningAnalysisAnalysisKey;
            environment: /* Identifies the variable values associated with the environment in which this analysis was performed. */ CodeScanningAnalysisEnvironment;
            category?: /* Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */ CodeScanningAnalysisCategory;
            /**
             * example:
             * error reading field xyz
             */
            error: string;
            created_at: /* The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ CodeScanningAnalysisCreatedAt /* date-time */;
            /**
             * The total number of results in the analysis.
             */
            results_count: number;
            /**
             * The total number of rules used in the analysis.
             */
            rules_count: number;
            /**
             * Unique identifier for this analysis.
             */
            id: number;
            url: /* The REST API URL of the analysis resource. */ CodeScanningAnalysisUrl /* uri */;
            sarif_id: /**
             * An identifier for the upload.
             * example:
             * 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
             */
            CodeScanningAnalysisSarifId;
            tool: CodeScanningAnalysisTool;
            deletable: boolean;
            /**
             * Warning generated when processing the analysis
             * example:
             * 123 results were ignored
             */
            warning: string;
        }
        /**
         * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
         */
        export type CodeScanningAnalysisAnalysisKey = string;
        /**
         * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
         */
        export type CodeScanningAnalysisCategory = string;
        /**
         * The SHA of the commit to which the analysis you are uploading relates.
         */
        export type CodeScanningAnalysisCommitSha = string; // ^[0-9a-fA-F]+$
        /**
         * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        export type CodeScanningAnalysisCreatedAt = string; // date-time
        /**
         * Analysis deletion
         * Successful deletion of a code scanning analysis
         */
        export interface CodeScanningAnalysisDeletion {
            /**
             * Next deletable analysis in chain, without last analysis deletion confirmation
             */
            next_analysis_url: string | null; // uri
            /**
             * Next deletable analysis in chain, with last analysis deletion confirmation
             */
            confirm_delete_url: string | null; // uri
        }
        /**
         * Identifies the variable values associated with the environment in which this analysis was performed.
         */
        export type CodeScanningAnalysisEnvironment = string;
        /**
         * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
         */
        export type CodeScanningAnalysisSarifFile = string;
        /**
         * An identifier for the upload.
         * example:
         * 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
         */
        export type CodeScanningAnalysisSarifId = string;
        export interface CodeScanningAnalysisTool {
            name?: /* The name of the tool used to generate the code scanning analysis. */ CodeScanningAnalysisToolName;
            version?: /* The version of the tool used to generate the code scanning analysis. */ CodeScanningAnalysisToolVersion;
            guid?: /* The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */ CodeScanningAnalysisToolGuid;
        }
        /**
         * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
         */
        export type CodeScanningAnalysisToolGuid = string | null;
        /**
         * The name of the tool used to generate the code scanning analysis.
         */
        export type CodeScanningAnalysisToolName = string;
        /**
         * The version of the tool used to generate the code scanning analysis.
         */
        export type CodeScanningAnalysisToolVersion = string | null;
        /**
         * The REST API URL of the analysis resource.
         */
        export type CodeScanningAnalysisUrl = string; // uri
        export interface CodeScanningOrganizationAlertItems {
            number: /* The security alert number. */ AlertNumber;
            created_at: /* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertCreatedAt /* date-time */;
            updated_at?: /* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertUpdatedAt /* date-time */;
            url: /* The REST API URL of the alert resource. */ AlertUrl /* uri */;
            html_url: /* The GitHub URL of the alert resource. */ AlertHtmlUrl /* uri */;
            instances_url: /* The REST API URL for fetching the list of instances for an alert. */ AlertInstancesUrl /* uri */;
            state: /* State of a code scanning alert. */ CodeScanningAlertState;
            fixed_at?: /* The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ CodeScanningAlertFixedAt /* date-time */;
            dismissed_by: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            dismissed_at: /* The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ CodeScanningAlertDismissedAt /* date-time */;
            dismissed_reason: /* **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */ CodeScanningAlertDismissedReason;
            dismissed_note?: /* The dismissal note associated with the dismissal of the alert. */ CodeScanningAlertDismissedNote;
            rule: CodeScanningAlertRule;
            tool: CodeScanningAnalysisTool;
            most_recent_instance: CodeScanningAlertInstance;
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
        }
        /**
         * The full Git reference, formatted as `refs/heads/<branch name>`,
         * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
         */
        export type CodeScanningRef = string;
        export interface CodeScanningSarifsReceipt {
            id?: /**
             * An identifier for the upload.
             * example:
             * 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
             */
            CodeScanningAnalysisSarifId;
            /**
             * The REST API URL for checking the status of the upload.
             */
            url?: string; // uri
        }
        export interface CodeScanningSarifsStatus {
            /**
             * `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
             */
            processing_status?: "pending" | "complete" | "failed";
            /**
             * The REST API URL for getting the analyses associated with the upload.
             */
            analyses_url?: string | null; // uri
            /**
             * Any errors that ocurred during processing of the delivery.
             */
            errors?: string[] | null;
        }
        /**
         * Code Search Result Item
         * Code Search Result Item
         */
        export interface CodeSearchResultItem {
            name: string;
            path: string;
            sha: string;
            url: string; // uri
            git_url: string; // uri
            html_url: string; // uri
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            score: number;
            file_size?: number;
            language?: string | null;
            last_modified_at?: string; // date-time
            /**
             * example:
             * [
             *   "73..77",
             *   "77..78"
             * ]
             */
            line_numbers?: string[];
            text_matches?: /* Search Result Text Matches */ SearchResultTextMatches;
        }
        /**
         * CODEOWNERS errors
         * A list of errors found in a repo's CODEOWNERS file
         */
        export interface CodeownersErrors {
            errors: {
                /**
                 * The line number where this errors occurs.
                 * example:
                 * 7
                 */
                line: number;
                /**
                 * The column number where this errors occurs.
                 * example:
                 * 3
                 */
                column: number;
                /**
                 * The contents of the line where the error occurs.
                 * example:
                 * * user
                 */
                source?: string;
                /**
                 * The type of error.
                 * example:
                 * Invalid owner
                 */
                kind: string;
                /**
                 * Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
                 * example:
                 * The pattern `/` will never match anything, did you mean `*` instead?
                 */
                suggestion?: string | null;
                /**
                 * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
                 * example:
                 * Invalid owner on line 7:
                 *
                 *   * user
                 *     ^
                 */
                message: string;
                /**
                 * The path of the file where the error occured.
                 * example:
                 * .github/CODEOWNERS
                 */
                path: string;
            }[];
        }
        /**
         * Codespace
         * A codespace.
         */
        export interface Codespace {
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * Automatically generated name of this codespace.
             * example:
             * monalisa-octocat-hello-world-g4wpq6h95q
             */
            name: string;
            /**
             * Display name for this codespace.
             * example:
             * bookish space pancake
             */
            display_name?: string | null;
            /**
             * UUID identifying this codespace's environment.
             * example:
             * 26a7c758-7299-4a73-b978-5a92a7ae98a0
             */
            environment_id: string | null;
            owner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            billable_owner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            machine: /**
             * Codespace machine
             * A description of the machine powering a codespace.
             */
            NullableCodespaceMachine;
            /**
             * Whether the codespace was created from a prebuild.
             * example:
             * false
             */
            prebuild: boolean | null;
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            updated_at: string; // date-time
            /**
             * Last known time this codespace was started.
             * example:
             * 2011-01-26T19:01:12Z
             */
            last_used_at: string; // date-time
            /**
             * State of this codespace.
             * example:
             * Available
             */
            state: "Unknown" | "Created" | "Queued" | "Provisioning" | "Available" | "Awaiting" | "Unavailable" | "Deleted" | "Moved" | "Shutdown" | "Archived" | "Starting" | "ShuttingDown" | "Failed" | "Exporting" | "Updating" | "Rebuilding";
            /**
             * API URL for this codespace.
             */
            url: string; // uri
            /**
             * Details about the codespace's git repository.
             */
            git_status: {
                /**
                 * The number of commits the local repository is ahead of the remote.
                 * example:
                 * 0
                 */
                ahead?: number;
                /**
                 * The number of commits the local repository is behind the remote.
                 * example:
                 * 0
                 */
                behind?: number;
                /**
                 * Whether the local repository has unpushed changes.
                 */
                has_unpushed_changes?: boolean;
                /**
                 * Whether the local repository has uncommitted changes.
                 */
                has_uncommitted_changes?: boolean;
                /**
                 * The current branch (or SHA if in detached HEAD state) of the local repository.
                 * example:
                 * main
                 */
                ref?: string;
            };
            /**
             * The Azure region where this codespace is located.
             * example:
             * WestUs2
             */
            location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
            /**
             * The number of minutes of inactivity after which this codespace will be automatically stopped.
             * example:
             * 60
             */
            idle_timeout_minutes: null | number;
            /**
             * URL to access this codespace on the web.
             */
            web_url: string; // uri
            /**
             * API URL to access available alternate machine types for this codespace.
             */
            machines_url: string; // uri
            /**
             * API URL to start this codespace.
             */
            start_url: string; // uri
            /**
             * API URL to stop this codespace.
             */
            stop_url: string; // uri
            /**
             * API URL for the Pull Request associated with this codespace, if any.
             */
            pulls_url: string | null; // uri
            recent_folders: string[];
            runtime_constraints?: {
                /**
                 * The privacy settings a user can select from when forwarding a port.
                 */
                allowed_port_privacy_settings?: string[] | null;
            };
        }
        /**
         * Fetches information about an export of a codespace.
         * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
         */
        export interface CodespaceExportDetails {
            /**
             * State of the latest export
             * example:
             * succeeded | failed | in_progress
             */
            state?: string | null;
            /**
             * Completion time of the last export operation
             * example:
             * 2021-01-01T19:01:12Z
             */
            completed_at?: string | null; // date-time
            /**
             * Name of the exported branch
             * example:
             * codespace-monalisa-octocat-hello-world-g4wpq6h95q
             */
            branch?: string | null;
            /**
             * Git commit SHA of the exported branch
             * example:
             * fd95a81ca01e48ede9f39c799ecbcef817b8a3b2
             */
            sha?: string | null;
            /**
             * Id for the export details
             * example:
             * latest
             */
            id?: string;
            /**
             * Url for fetching export details
             * example:
             * https://api.github.com/user/codespaces/:name/exports/latest
             */
            export_url?: string;
            /**
             * Web url for the exported branch
             * example:
             * https://github.com/octocat/hello-world/tree/:branch
             */
            html_url?: string | null;
        }
        /**
         * Codespace machine
         * A description of the machine powering a codespace.
         */
        export interface CodespaceMachine {
            /**
             * The name of the machine.
             * example:
             * standardLinux
             */
            name: string;
            /**
             * The display name of the machine includes cores, memory, and storage.
             * example:
             * 4 cores, 8 GB RAM, 64 GB storage
             */
            display_name: string;
            /**
             * The operating system of the machine.
             * example:
             * linux
             */
            operating_system: string;
            /**
             * How much storage is available to the codespace.
             * example:
             * 68719476736
             */
            storage_in_bytes: number;
            /**
             * How much memory is available to the codespace.
             * example:
             * 8589934592
             */
            memory_in_bytes: number;
            /**
             * How many cores are available to the codespace.
             * example:
             * 4
             */
            cpus: number;
            /**
             * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.
             * example:
             * blob
             */
            prebuild_availability: "none" | "blob" | "pool";
        }
        /**
         * CodespacesPublicKey
         * The public key used for setting Codespaces secrets.
         */
        export interface CodespacesPublicKey {
            /**
             * The identifier for the key.
             * example:
             * 1234567
             */
            key_id: string;
            /**
             * The Base64 encoded public key.
             * example:
             * hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
            /**
             * example:
             * 2
             */
            id?: number;
            /**
             * example:
             * https://api.github.com/user/keys/2
             */
            url?: string;
            /**
             * example:
             * ssh-rsa AAAAB3NzaC1yc2EAAA
             */
            title?: string;
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at?: string;
        }
        /**
         * Codespaces Secret
         * Secrets for a GitHub Codespace.
         */
        export interface CodespacesSecret {
            /**
             * The name of the secret.
             * example:
             * SECRET_NAME
             */
            name: string;
            created_at: string; // date-time
            updated_at: string; // date-time
            /**
             * Visibility of a secret
             */
            visibility: "all" | "private" | "selected";
            /**
             * example:
             * https://api.github.com/user/secrets/SECRET_NAME/repositories
             */
            selected_repositories_url: string; // uri
        }
        /**
         * CodespacesUserPublicKey
         * The public key used for setting user Codespaces' Secrets.
         */
        export interface CodespacesUserPublicKey {
            /**
             * The identifier for the key.
             * example:
             * 1234567
             */
            key_id: string;
            /**
             * The Base64 encoded public key.
             * example:
             * hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
        }
        /**
         * Collaborator
         * Collaborator
         */
        export interface Collaborator {
            /**
             * example:
             * octocat
             */
            login: string;
            /**
             * example:
             * 1
             */
            id: number;
            email?: string | null;
            name?: string | null;
            /**
             * example:
             * MDQ6VXNlcjE=
             */
            node_id: string;
            /**
             * example:
             * https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string; // uri
            /**
             * example:
             * 41d064eb2195891e12d0413f63227ea7
             */
            gravatar_id: string | null;
            /**
             * example:
             * https://api.github.com/users/octocat
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/followers
             */
            followers_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/following{/other_user}
             */
            following_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/gists{/gist_id}
             */
            gists_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/starred{/owner}{/repo}
             */
            starred_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/orgs
             */
            organizations_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/repos
             */
            repos_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/events{/privacy}
             */
            events_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/received_events
             */
            received_events_url: string; // uri
            /**
             * example:
             * User
             */
            type: string;
            site_admin: boolean;
            permissions?: {
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
                admin: boolean;
            };
            /**
             * example:
             * admin
             */
            role_name: string;
        }
        export interface CombinedBillingUsage {
            /**
             * Numbers of days left in billing cycle.
             */
            days_left_in_billing_cycle: number;
            /**
             * Estimated storage space (GB) used in billing cycle.
             */
            estimated_paid_storage_for_month: number;
            /**
             * Estimated sum of free and paid storage space (GB) used in billing cycle.
             */
            estimated_storage_for_month: number;
        }
        /**
         * Combined Commit Status
         * Combined Commit Status
         */
        export interface CombinedCommitStatus {
            state: string;
            statuses: /* Simple Commit Status */ SimpleCommitStatus[];
            sha: string;
            total_count: number;
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            commit_url: string; // uri
            url: string; // uri
        }
        /**
         * Commit
         * Commit
         */
        export interface Commit {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            url: string; // uri
            /**
             * example:
             * 6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            sha: string;
            /**
             * example:
             * MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==
             */
            node_id: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
             */
            comments_url: string; // uri
            commit: {
                /**
                 * example:
                 * https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
                 */
                url: string; // uri
                author: /**
                 * Git User
                 * Metaproperties for Git author/committer information.
                 */
                NullableGitUser;
                committer: /**
                 * Git User
                 * Metaproperties for Git author/committer information.
                 */
                NullableGitUser;
                /**
                 * example:
                 * Fix all the bugs
                 */
                message: string;
                /**
                 * example:
                 * 0
                 */
                comment_count: number;
                tree: {
                    /**
                     * example:
                     * 827efc6d56897b048c772eb4087f854f46256132
                     */
                    sha: string;
                    /**
                     * example:
                     * https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
                     */
                    url: string; // uri
                };
                verification?: /* Verification */ Verification;
            };
            author: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            committer: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            parents: {
                /**
                 * example:
                 * 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                /**
                 * example:
                 * https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                url: string; // uri
                /**
                 * example:
                 * https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                html_url?: string; // uri
            }[];
            stats?: {
                additions?: number;
                deletions?: number;
                total?: number;
            };
            files?: /**
             * Diff Entry
             * Diff Entry
             */
            DiffEntry[];
        }
        /**
         * Commit Activity
         * Commit Activity
         */
        export interface CommitActivity {
            /**
             * example:
             * [
             *   0,
             *   3,
             *   26,
             *   20,
             *   39,
             *   1,
             *   0
             * ]
             */
            days: number[];
            /**
             * example:
             * 89
             */
            total: number;
            /**
             * example:
             * 1336280400
             */
            week: number;
        }
        /**
         * Commit Comment
         * Commit Comment
         */
        export interface CommitComment {
            html_url: string; // uri
            url: string; // uri
            id: number;
            node_id: string;
            body: string;
            path: string | null;
            position: null | number;
            line: null | number;
            commit_id: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            created_at: string; // date-time
            updated_at: string; // date-time
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Commit Comparison
         * Commit Comparison
         */
        export interface CommitComparison {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/compare/master...topic
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/compare/master...topic
             */
            html_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
             */
            permalink_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/compare/master...topic.diff
             */
            diff_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/compare/master...topic.patch
             */
            patch_url: string; // uri
            base_commit: /**
             * Commit
             * Commit
             */
            Commit;
            merge_base_commit: /**
             * Commit
             * Commit
             */
            Commit;
            /**
             * example:
             * ahead
             */
            status: "diverged" | "ahead" | "behind" | "identical";
            /**
             * example:
             * 4
             */
            ahead_by: number;
            /**
             * example:
             * 5
             */
            behind_by: number;
            /**
             * example:
             * 6
             */
            total_commits: number;
            commits: /**
             * Commit
             * Commit
             */
            Commit[];
            files?: /**
             * Diff Entry
             * Diff Entry
             */
            DiffEntry[];
        }
        /**
         * Commit Search Result Item
         * Commit Search Result Item
         */
        export interface CommitSearchResultItem {
            url: string; // uri
            sha: string;
            html_url: string; // uri
            comments_url: string; // uri
            commit: {
                author: {
                    name: string;
                    email: string;
                    date: string; // date-time
                };
                committer: /**
                 * Git User
                 * Metaproperties for Git author/committer information.
                 */
                NullableGitUser;
                comment_count: number;
                message: string;
                tree: {
                    sha: string;
                    url: string; // uri
                };
                url: string; // uri
                verification?: /* Verification */ Verification;
            };
            author: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            committer: /**
             * Git User
             * Metaproperties for Git author/committer information.
             */
            NullableGitUser;
            parents: {
                url?: string;
                html_url?: string;
                sha?: string;
            }[];
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            score: number;
            node_id: string;
            text_matches?: /* Search Result Text Matches */ SearchResultTextMatches;
        }
        /**
         * Community Profile
         * Community Profile
         */
        export interface CommunityProfile {
            /**
             * example:
             * 100
             */
            health_percentage: number;
            /**
             * example:
             * My first repository on GitHub!
             */
            description: string | null;
            /**
             * example:
             * example.com
             */
            documentation: string | null;
            files: {
                code_of_conduct: /**
                 * Code Of Conduct Simple
                 * Code of Conduct Simple
                 */
                NullableCodeOfConductSimple;
                code_of_conduct_file: /* Community Health File */ NullableCommunityHealthFile;
                license: /**
                 * License Simple
                 * License Simple
                 */
                NullableLicenseSimple;
                contributing: /* Community Health File */ NullableCommunityHealthFile;
                readme: /* Community Health File */ NullableCommunityHealthFile;
                issue_template: /* Community Health File */ NullableCommunityHealthFile;
                pull_request_template: /* Community Health File */ NullableCommunityHealthFile;
            };
            /**
             * example:
             * 2017-02-28T19:09:29Z
             */
            updated_at: string | null; // date-time
            /**
             * example:
             * true
             */
            content_reports_enabled?: boolean;
        }
        /**
         * Content Directory
         * A list of directory items
         */
        export type ContentDirectory = {
            type: string;
            size: number;
            name: string;
            path: string;
            content?: string;
            sha: string;
            url: string; // uri
            git_url: string | null; // uri
            html_url: string | null; // uri
            download_url: string | null; // uri
            _links: {
                git: string | null; // uri
                html: string | null; // uri
                self: string; // uri
            };
        }[];
        /**
         * Content File
         * Content File
         */
        export interface ContentFile {
            type: string;
            encoding: string;
            size: number;
            name: string;
            path: string;
            content: string;
            sha: string;
            url: string; // uri
            git_url: string | null; // uri
            html_url: string | null; // uri
            download_url: string | null; // uri
            _links: {
                git: string | null; // uri
                html: string | null; // uri
                self: string; // uri
            };
            /**
             * example:
             * "actual/actual.md"
             */
            target?: string;
            /**
             * example:
             * "git://example.com/defunkt/dotjs.git"
             */
            submodule_git_url?: string;
        }
        /**
         * Symlink Content
         * An object describing a symlink
         */
        export interface ContentSubmodule {
            type: string;
            submodule_git_url: string; // uri
            size: number;
            name: string;
            path: string;
            sha: string;
            url: string; // uri
            git_url: string | null; // uri
            html_url: string | null; // uri
            download_url: string | null; // uri
            _links: {
                git: string | null; // uri
                html: string | null; // uri
                self: string; // uri
            };
        }
        /**
         * Symlink Content
         * An object describing a symlink
         */
        export interface ContentSymlink {
            type: string;
            target: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            url: string; // uri
            git_url: string | null; // uri
            html_url: string | null; // uri
            download_url: string | null; // uri
            _links: {
                git: string | null; // uri
                html: string | null; // uri
                self: string; // uri
            };
        }
        /**
         * Content Traffic
         * Content Traffic
         */
        export interface ContentTraffic {
            /**
             * example:
             * /github/hubot
             */
            path: string;
            /**
             * example:
             * github/hubot: A customizable life embetterment robot.
             */
            title: string;
            /**
             * example:
             * 3542
             */
            count: number;
            /**
             * example:
             * 2225
             */
            uniques: number;
        }
        /**
         * Content Tree
         * Content Tree
         */
        export interface ContentTree {
            type: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            url: string; // uri
            git_url: string | null; // uri
            html_url: string | null; // uri
            download_url: string | null; // uri
            entries?: {
                type: string;
                size: number;
                name: string;
                path: string;
                content?: string;
                sha: string;
                url: string; // uri
                git_url: string | null; // uri
                html_url: string | null; // uri
                download_url: string | null; // uri
                _links: {
                    git: string | null; // uri
                    html: string | null; // uri
                    self: string; // uri
                };
            }[];
            _links: {
                git: string | null; // uri
                html: string | null; // uri
                self: string; // uri
            };
        }
        /**
         * Contributor
         * Contributor
         */
        export interface Contributor {
            login?: string;
            id?: number;
            node_id?: string;
            avatar_url?: string; // uri
            gravatar_id?: string | null;
            url?: string; // uri
            html_url?: string; // uri
            followers_url?: string; // uri
            following_url?: string;
            gists_url?: string;
            starred_url?: string;
            subscriptions_url?: string; // uri
            organizations_url?: string; // uri
            repos_url?: string; // uri
            events_url?: string;
            received_events_url?: string; // uri
            type: string;
            site_admin?: boolean;
            contributions: number;
            email?: string;
            name?: string;
        }
        /**
         * Contributor Activity
         * Contributor Activity
         */
        export interface ContributorActivity {
            author: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 135
             */
            total: number;
            /**
             * example:
             * [
             *   {
             *     "w": "1367712000",
             *     "a": 6898,
             *     "d": 77,
             *     "c": 10
             *   }
             * ]
             */
            weeks: {
                w?: number;
                a?: number;
                d?: number;
                c?: number;
            }[];
        }
        /**
         * Converted Note to Issue Issue Event
         * Converted Note to Issue Issue Event
         */
        export interface ConvertedNoteToIssueIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            Integration;
            project_card?: {
                id: number;
                url: string; // uri
                project_id: number;
                project_url: string; // uri
                column_name: string;
                previous_column_name?: string;
            };
        }
        /**
         * Credential Authorization
         * Credential Authorization
         */
        export interface CredentialAuthorization {
            /**
             * User login that owns the underlying credential.
             * example:
             * monalisa
             */
            login: string;
            /**
             * Unique identifier for the credential.
             * example:
             * 1
             */
            credential_id: number;
            /**
             * Human-readable description of the credential type.
             * example:
             * SSH Key
             */
            credential_type: string;
            /**
             * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
             * example:
             * 12345678
             */
            token_last_eight?: string;
            /**
             * Date when the credential was authorized for use.
             * example:
             * 2011-01-26T19:06:43Z
             */
            credential_authorized_at: string; // date-time
            /**
             * List of oauth scopes the token has been granted.
             * example:
             * [
             *   "user",
             *   "repo"
             * ]
             */
            scopes?: string[];
            /**
             * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
             * example:
             * jklmnop12345678
             */
            fingerprint?: string;
            /**
             * Date when the credential was last accessed. May be null if it was never accessed
             * example:
             * 2011-01-26T19:06:43Z
             */
            credential_accessed_at: string | null; // date-time
            /**
             * example:
             * 12345678
             */
            authorized_credential_id: null | number;
            /**
             * The title given to the ssh key. This will only be present when the credential is an ssh key.
             * example:
             * my ssh key
             */
            authorized_credential_title?: string | null;
            /**
             * The note given to the token. This will only be present when the credential is a token.
             * example:
             * my token
             */
            authorized_credential_note?: string | null;
            /**
             * The expiry for the token. This will only be present when the credential is a token.
             */
            authorized_credential_expires_at?: string | null; // date-time
        }
        /**
         * Demilestoned Issue Event
         * Demilestoned Issue Event
         */
        export interface DemilestonedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            milestone: {
                title: string;
            };
        }
        /**
         * DependabotPublicKey
         * The public key used for setting Dependabot Secrets.
         */
        export interface DependabotPublicKey {
            /**
             * The identifier for the key.
             * example:
             * 1234567
             */
            key_id: string;
            /**
             * The Base64 encoded public key.
             * example:
             * hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
             */
            key: string;
        }
        /**
         * Dependabot Secret
         * Set secrets for Dependabot.
         */
        export interface DependabotSecret {
            /**
             * The name of the secret.
             * example:
             * MY_ARTIFACTORY_PASSWORD
             */
            name: string;
            created_at: string; // date-time
            updated_at: string; // date-time
        }
        /**
         * Dependency Graph Diff
         * A diff of the dependencies between two commits.
         */
        export type DependencyGraphDiff = {
            change_type: "added" | "removed";
            /**
             * example:
             * path/to/package-lock.json
             */
            manifest: string;
            /**
             * example:
             * npm
             */
            ecosystem: string;
            /**
             * example:
             * @actions/core
             */
            name: string;
            /**
             * example:
             * 1.0.0
             */
            version: string;
            /**
             * example:
             * pkg:/npm/%40actions/core@1.1.0
             */
            package_url: string | null;
            /**
             * example:
             * MIT
             */
            license: string | null;
            /**
             * example:
             * https://github.com/github/actions
             */
            source_repository_url: string | null;
            vulnerabilities: {
                /**
                 * example:
                 * critical
                 */
                severity: string;
                /**
                 * example:
                 * GHSA-rf4j-j272-fj86
                 */
                advisory_ghsa_id: string;
                /**
                 * example:
                 * A summary of the advisory.
                 */
                advisory_summary: string;
                /**
                 * example:
                 * https://github.com/advisories/GHSA-rf4j-j272-fj86
                 */
                advisory_url: string;
            }[];
        }[];
        /**
         * Deploy Key
         * An SSH key granting access to a single repository.
         */
        export interface DeployKey {
            id: number;
            key: string;
            url: string;
            title: string;
            verified: boolean;
            created_at: string;
            read_only: boolean;
        }
        /**
         * Deployment
         * A request for a specific ref(branch,sha,tag) to be deployed
         */
        export interface Deployment {
            /**
             * example:
             * https://api.github.com/repos/octocat/example/deployments/1
             */
            url: string; // uri
            /**
             * Unique identifier of the deployment
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDEwOkRlcGxveW1lbnQx
             */
            node_id: string;
            /**
             * example:
             * a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d
             */
            sha: string;
            /**
             * The ref to deploy. This can be a branch, tag, or sha.
             * example:
             * topic-branch
             */
            ref: string;
            /**
             * Parameter to specify a task to execute
             * example:
             * deploy
             */
            task: string;
            payload: {
                [name: string]: any;
            } | string;
            /**
             * example:
             * staging
             */
            original_environment?: string;
            /**
             * Name for the target deployment environment.
             * example:
             * production
             */
            environment: string;
            /**
             * example:
             * Deploy request from hubot
             */
            description: string | null;
            creator: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 2012-07-20T01:19:13Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2012-07-20T01:19:13Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * https://api.github.com/repos/octocat/example/deployments/1/statuses
             */
            statuses_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/example
             */
            repository_url: string; // uri
            /**
             * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
             * example:
             * true
             */
            transient_environment?: boolean;
            /**
             * Specifies if the given environment is one that end-users directly interact with. Default: false.
             * example:
             * true
             */
            production_environment?: boolean;
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
        }
        /**
         * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
         */
        export type DeploymentBranchPolicy = {
            /**
             * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
             */
            protected_branches: boolean;
            /**
             * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
             */
            custom_branch_policies: boolean;
        } | null;
        /**
         * The type of reviewer. Must be one of: `User` or `Team`
         * example:
         * User
         */
        export type DeploymentReviewerType = "User" | "Team";
        /**
         * Deployment
         * A deployment created as the result of an Actions check run from a workflow that references an environment
         */
        export interface DeploymentSimple {
            /**
             * example:
             * https://api.github.com/repos/octocat/example/deployments/1
             */
            url: string; // uri
            /**
             * Unique identifier of the deployment
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDEwOkRlcGxveW1lbnQx
             */
            node_id: string;
            /**
             * Parameter to specify a task to execute
             * example:
             * deploy
             */
            task: string;
            /**
             * example:
             * staging
             */
            original_environment?: string;
            /**
             * Name for the target deployment environment.
             * example:
             * production
             */
            environment: string;
            /**
             * example:
             * Deploy request from hubot
             */
            description: string | null;
            /**
             * example:
             * 2012-07-20T01:19:13Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2012-07-20T01:19:13Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * https://api.github.com/repos/octocat/example/deployments/1/statuses
             */
            statuses_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/example
             */
            repository_url: string; // uri
            /**
             * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
             * example:
             * true
             */
            transient_environment?: boolean;
            /**
             * Specifies if the given environment is one that end-users directly interact with. Default: false.
             * example:
             * true
             */
            production_environment?: boolean;
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
        }
        /**
         * Deployment Status
         * The status of a deployment.
         */
        export interface DeploymentStatus {
            /**
             * example:
             * https://api.github.com/repos/octocat/example/deployments/42/statuses/1
             */
            url: string; // uri
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDE2OkRlcGxveW1lbnRTdGF0dXMx
             */
            node_id: string;
            /**
             * The state of the status.
             * example:
             * success
             */
            state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
            creator: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * A short description of the status.
             * example:
             * Deployment finished successfully.
             */
            description: string;
            /**
             * The environment of the deployment that the status is for.
             * example:
             * production
             */
            environment?: string;
            /**
             * Deprecated: the URL to associate with this status.
             * example:
             * https://example.com/deployment/42/output
             */
            target_url: string; // uri
            /**
             * example:
             * 2012-07-20T01:19:13Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2012-07-20T01:19:13Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * https://api.github.com/repos/octocat/example/deployments/42
             */
            deployment_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/example
             */
            repository_url: string; // uri
            /**
             * The URL for accessing your environment.
             * example:
             * https://staging.example.com/
             */
            environment_url?: string; // uri
            /**
             * The URL to associate with this status.
             * example:
             * https://example.com/deployment/42/output
             */
            log_url?: string; // uri
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
        }
        /**
         * Diff Entry
         * Diff Entry
         */
        export interface DiffEntry {
            /**
             * example:
             * bbcd538c8e72b8c175046e27cc8f907076331401
             */
            sha: string;
            /**
             * example:
             * file1.txt
             */
            filename: string;
            /**
             * example:
             * added
             */
            status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
            /**
             * example:
             * 103
             */
            additions: number;
            /**
             * example:
             * 21
             */
            deletions: number;
            /**
             * example:
             * 124
             */
            changes: number;
            /**
             * example:
             * https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
             */
            blob_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
             */
            raw_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            contents_url: string; // uri
            /**
             * example:
             * @@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test
             */
            patch?: string;
            /**
             * example:
             * file.txt
             */
            previous_filename?: string;
        }
        /**
         * Email
         * Email
         */
        export interface Email {
            /**
             * example:
             * octocat@github.com
             */
            email: string; // email
            /**
             * example:
             * true
             */
            primary: boolean;
            /**
             * example:
             * true
             */
            verified: boolean;
            /**
             * example:
             * public
             */
            visibility: string | null;
        }
        /**
         * Empty Object
         * An object without any properties.
         */
        export interface EmptyObject {
        }
        /**
         * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
         */
        export type EnabledOrganizations = "all" | "none" | "selected";
        /**
         * The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
         */
        export type EnabledRepositories = "all" | "none" | "selected";
        /**
         * Enterprise
         * An enterprise account
         */
        export interface Enterprise {
            /**
             * A short description of the enterprise.
             */
            description?: string | null;
            /**
             * example:
             * https://github.com/enterprises/octo-business
             */
            html_url: string; // uri
            /**
             * The enterprise's website URL.
             */
            website_url?: string | null; // uri
            /**
             * Unique identifier of the enterprise
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * The name of the enterprise.
             * example:
             * Octo Business
             */
            name: string;
            /**
             * The slug url identifier for the enterprise.
             * example:
             * octo-business
             */
            slug: string;
            /**
             * example:
             * 2019-01-26T19:01:12Z
             */
            created_at: string | null; // date-time
            /**
             * example:
             * 2019-01-26T19:14:43Z
             */
            updated_at: string | null; // date-time
            avatar_url: string; // uri
        }
        /**
         * Environment
         * Details of a deployment environment
         */
        export interface Environment {
            /**
             * The id of the environment.
             * example:
             * 56780428
             */
            id: number;
            /**
             * example:
             * MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
             */
            node_id: string;
            /**
             * The name of the environment.
             * example:
             * staging
             */
            name: string;
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/environments/staging
             */
            url: string;
            /**
             * example:
             * https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
             */
            html_url: string;
            /**
             * The time that the environment was created, in ISO 8601 format.
             * example:
             * 2020-11-23T22:00:40Z
             */
            created_at: string; // date-time
            /**
             * The time that the environment was last updated, in ISO 8601 format.
             * example:
             * 2020-11-23T22:00:40Z
             */
            updated_at: string; // date-time
            protection_rules?: ({
                /**
                 * example:
                 * 3515
                 */
                id: number;
                /**
                 * example:
                 * MDQ6R2F0ZTM1MTU=
                 */
                node_id: string;
                /**
                 * example:
                 * wait_timer
                 */
                type: string;
                wait_timer?: /**
                 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
                 * example:
                 * 30
                 */
                WaitTimer;
            } | {
                /**
                 * example:
                 * 3755
                 */
                id: number;
                /**
                 * example:
                 * MDQ6R2F0ZTM3NTU=
                 */
                node_id: string;
                /**
                 * example:
                 * required_reviewers
                 */
                type: string;
                /**
                 * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
                 */
                reviewers?: {
                    type?: /**
                     * The type of reviewer. Must be one of: `User` or `Team`
                     * example:
                     * User
                     */
                    DeploymentReviewerType;
                    reviewer?: /**
                     * Simple User
                     * Simple User
                     */
                    SimpleUser | /**
                     * Team
                     * Groups of organization members that gives permissions on specified repositories.
                     */
                    Team;
                }[];
            } | {
                /**
                 * example:
                 * 3515
                 */
                id: number;
                /**
                 * example:
                 * MDQ6R2F0ZTM1MTU=
                 */
                node_id: string;
                /**
                 * example:
                 * branch_policy
                 */
                type: string;
            })[];
            deployment_branch_policy?: /* The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */ DeploymentBranchPolicy;
        }
        /**
         * Environment Approval
         * An entry in the reviews log for environment deployments
         */
        export interface EnvironmentApprovals {
            /**
             * The list of environments that were approved or rejected
             */
            environments: {
                /**
                 * The id of the environment.
                 * example:
                 * 56780428
                 */
                id?: number;
                /**
                 * example:
                 * MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
                 */
                node_id?: string;
                /**
                 * The name of the environment.
                 * example:
                 * staging
                 */
                name?: string;
                /**
                 * example:
                 * https://api.github.com/repos/github/hello-world/environments/staging
                 */
                url?: string;
                /**
                 * example:
                 * https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
                 */
                html_url?: string;
                /**
                 * The time that the environment was created, in ISO 8601 format.
                 * example:
                 * 2020-11-23T22:00:40Z
                 */
                created_at?: string; // date-time
                /**
                 * The time that the environment was last updated, in ISO 8601 format.
                 * example:
                 * 2020-11-23T22:00:40Z
                 */
                updated_at?: string; // date-time
            }[];
            /**
             * Whether deployment to the environment(s) was approved or rejected
             * example:
             * approved
             */
            state: "approved" | "rejected";
            user: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * The comment submitted with the deployment review
             * example:
             * Ship it!
             */
            comment: string;
        }
        /**
         * Event
         * Event
         */
        export interface Event {
            id: string;
            type: string | null;
            actor: /**
             * Actor
             * Actor
             */
            Actor;
            repo: {
                id: number;
                name: string;
                url: string; // uri
            };
            org?: /**
             * Actor
             * Actor
             */
            Actor;
            payload: {
                action?: string;
                issue?: /**
                 * Issue
                 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
                 */
                Issue;
                comment?: /**
                 * Issue Comment
                 * Comments provide a way for people to collaborate on an issue.
                 */
                IssueComment;
                pages?: {
                    page_name?: string;
                    title?: string;
                    summary?: string | null;
                    action?: string;
                    sha?: string;
                    html_url?: string;
                }[];
            };
            public: boolean;
            created_at: string | null; // date-time
        }
        /**
         * ExternalGroup
         * Information about an external group's usage and its members
         */
        export interface ExternalGroup {
            /**
             * The internal ID of the group
             * example:
             * 1
             */
            group_id: number;
            /**
             * The display name for the group
             * example:
             * group-azuread-test
             */
            group_name: string;
            /**
             * The date when the group was last updated_at
             * example:
             * 2021-01-03 22:27:15:000 -700
             */
            updated_at?: string;
            /**
             * An array of teams linked to this group
             * example:
             * [
             *   {
             *     "team_id": 1,
             *     "team_name": "team-test"
             *   },
             *   {
             *     "team_id": 2,
             *     "team_name": "team-test2"
             *   }
             * ]
             */
            teams: {
                /**
                 * The id for a team
                 * example:
                 * 1
                 */
                team_id: number;
                /**
                 * The name of the team
                 * example:
                 * team-test
                 */
                team_name: string;
            }[];
            /**
             * An array of external members linked to this group
             * example:
             * [
             *   {
             *     "member_id": 1,
             *     "member_login": "mona-lisa_eocsaxrs",
             *     "member_name": "Mona Lisa",
             *     "member_email": "mona_lisa@github.com"
             *   },
             *   {
             *     "member_id": 2,
             *     "member_login": "octo-lisa_eocsaxrs",
             *     "member_name": "Octo Lisa",
             *     "member_email": "octo_lisa@github.com"
             *   }
             * ]
             */
            members: {
                /**
                 * The internal user ID of the identity
                 * example:
                 * 1
                 */
                member_id: number;
                /**
                 * The handle/login for the user
                 * example:
                 * mona-lisa_eocsaxrs
                 */
                member_login: string;
                /**
                 * The user display name/profile name
                 * example:
                 * Mona Lisa
                 */
                member_name: string;
                /**
                 * An email attached to a user
                 * example:
                 * mona_lisa@github.com
                 */
                member_email: string;
            }[];
        }
        /**
         * ExternalGroups
         * A list of external groups available to be connected to a team
         */
        export interface ExternalGroups {
            /**
             * An array of external groups available to be mapped to a team
             * example:
             * [
             *   {
             *     "group_id": 1,
             *     "group_name": "group-azuread-test",
             *     "updated_at": "2021-01-03 22:27:15:000 -700"
             *   },
             *   {
             *     "group_id": 2,
             *     "group_name": "group-azuread-test2",
             *     "updated_at": "2021-06-03 22:27:15:000 -700"
             *   }
             * ]
             */
            groups?: {
                /**
                 * The internal ID of the group
                 * example:
                 * 1
                 */
                group_id: number;
                /**
                 * The display name of the group
                 * example:
                 * group-azuread-test
                 */
                group_name: string;
                /**
                 * The time of the last update for this group
                 * example:
                 * 2019-06-03 22:27:15:000 -700
                 */
                updated_at: string;
            }[];
        }
        /**
         * Feed
         * Feed
         */
        export interface Feed {
            /**
             * example:
             * https://github.com/timeline
             */
            timeline_url: string;
            /**
             * example:
             * https://github.com/{user}
             */
            user_url: string;
            /**
             * example:
             * https://github.com/octocat
             */
            current_user_public_url?: string;
            /**
             * example:
             * https://github.com/octocat.private?token=abc123
             */
            current_user_url?: string;
            /**
             * example:
             * https://github.com/octocat.private.actor?token=abc123
             */
            current_user_actor_url?: string;
            /**
             * example:
             * https://github.com/octocat-org
             */
            current_user_organization_url?: string;
            /**
             * example:
             * [
             *   "https://github.com/organizations/github/octocat.private.atom?token=abc123"
             * ]
             */
            current_user_organization_urls?: string /* uri */[];
            /**
             * example:
             * https://github.com/security-advisories
             */
            security_advisories_url?: string;
            _links: {
                timeline: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType;
                user: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType;
                security_advisories?: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType;
                current_user?: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType;
                current_user_public?: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType;
                current_user_actor?: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType;
                current_user_organization?: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType;
                current_user_organizations?: /**
                 * Link With Type
                 * Hypermedia Link with Type
                 */
                LinkWithType[];
            };
        }
        /**
         * File Commit
         * File Commit
         */
        export interface FileCommit {
            content: {
                name?: string;
                path?: string;
                sha?: string;
                size?: number;
                url?: string;
                html_url?: string;
                git_url?: string;
                download_url?: string;
                type?: string;
                _links?: {
                    self?: string;
                    git?: string;
                    html?: string;
                };
            } | null;
            commit: {
                sha?: string;
                node_id?: string;
                url?: string;
                html_url?: string;
                author?: {
                    date?: string;
                    name?: string;
                    email?: string;
                };
                committer?: {
                    date?: string;
                    name?: string;
                    email?: string;
                };
                message?: string;
                tree?: {
                    url?: string;
                    sha?: string;
                };
                parents?: {
                    url?: string;
                    html_url?: string;
                    sha?: string;
                }[];
                verification?: {
                    verified?: boolean;
                    reason?: string;
                    signature?: string | null;
                    payload?: string | null;
                };
            };
        }
        /**
         * Full Repository
         * Full Repository
         */
        export interface FullRepository {
            /**
             * example:
             * 1296269
             */
            id: number;
            /**
             * example:
             * MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * example:
             * Hello-World
             */
            name: string;
            /**
             * example:
             * octocat/Hello-World
             */
            full_name: string;
            owner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            private: boolean;
            /**
             * example:
             * https://github.com/octocat/Hello-World
             */
            html_url: string; // uri
            /**
             * example:
             * This your first repo!
             */
            description: string | null;
            fork: boolean;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World
             */
            url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            /**
             * example:
             * git:github.com/octocat/Hello-World.git
             */
            git_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            /**
             * example:
             * git@github.com:octocat/Hello-World.git
             */
            ssh_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World.git
             */
            clone_url: string;
            /**
             * example:
             * git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string; // uri
            /**
             * example:
             * https://svn.github.com/octocat/Hello-World
             */
            svn_url: string; // uri
            /**
             * example:
             * https://github.com
             */
            homepage: string | null; // uri
            language: string | null;
            /**
             * example:
             * 9
             */
            forks_count: number;
            /**
             * example:
             * 80
             */
            stargazers_count: number;
            /**
             * example:
             * 80
             */
            watchers_count: number;
            /**
             * example:
             * 108
             */
            size: number;
            /**
             * example:
             * master
             */
            default_branch: string;
            /**
             * example:
             * 0
             */
            open_issues_count: number;
            /**
             * example:
             * true
             */
            is_template?: boolean;
            /**
             * example:
             * [
             *   "octocat",
             *   "atom",
             *   "electron",
             *   "API"
             * ]
             */
            topics?: string[];
            /**
             * example:
             * true
             */
            has_issues: boolean;
            /**
             * example:
             * true
             */
            has_projects: boolean;
            /**
             * example:
             * true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * example:
             * true
             */
            has_downloads: boolean;
            archived: boolean;
            /**
             * Returns whether or not this repository disabled.
             */
            disabled: boolean;
            /**
             * The repository visibility: public, private, or internal.
             * example:
             * public
             */
            visibility?: string;
            /**
             * example:
             * 2011-01-26T19:06:43Z
             */
            pushed_at: string; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-01-26T19:14:43Z
             */
            updated_at: string; // date-time
            permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
            };
            /**
             * example:
             * true
             */
            allow_rebase_merge?: boolean;
            template_repository?: /**
             * Repository
             * A git repository
             */
            NullableRepository;
            temp_clone_token?: string | null;
            /**
             * example:
             * true
             */
            allow_squash_merge?: boolean;
            /**
             * example:
             * false
             */
            allow_auto_merge?: boolean;
            /**
             * example:
             * false
             */
            delete_branch_on_merge?: boolean;
            /**
             * example:
             * true
             */
            allow_merge_commit?: boolean;
            /**
             * example:
             * true
             */
            allow_forking?: boolean;
            /**
             * example:
             * 42
             */
            subscribers_count: number;
            /**
             * example:
             * 0
             */
            network_count: number;
            license: /**
             * License Simple
             * License Simple
             */
            NullableLicenseSimple;
            organization?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            parent?: /**
             * Repository
             * A git repository
             */
            Repository;
            source?: /**
             * Repository
             * A git repository
             */
            Repository;
            forks: number;
            master_branch?: string;
            open_issues: number;
            watchers: number;
            /**
             * Whether anonymous git access is allowed.
             */
            anonymous_access_enabled?: boolean;
            code_of_conduct?: /**
             * Code Of Conduct Simple
             * Code of Conduct Simple
             */
            CodeOfConductSimple;
            security_and_analysis?: {
                advanced_security?: {
                    status?: "enabled" | "disabled";
                };
                secret_scanning?: {
                    status?: "enabled" | "disabled";
                };
                secret_scanning_push_protection?: {
                    status?: "enabled" | "disabled";
                };
            } | null;
        }
        /**
         * Gist Comment
         * A comment made to a gist.
         */
        export interface GistComment {
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDExOkdpc3RDb21tZW50MQ==
             */
            node_id: string;
            /**
             * example:
             * https://api.github.com/gists/a6db0bec360bb87e9418/comments/1
             */
            url: string; // uri
            /**
             * The comment text.
             * example:
             * Body of the attachment
             */
            body: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 2011-04-18T23:23:56Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-04-18T23:23:56Z
             */
            updated_at: string; // date-time
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
        }
        /**
         * Gist Commit
         * Gist Commit
         */
        export interface GistCommit {
            /**
             * example:
             * https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f
             */
            url: string; // uri
            /**
             * example:
             * 57a7f021a713b1c5a6a199b54cc514735d2d462f
             */
            version: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            change_status: {
                total?: number;
                additions?: number;
                deletions?: number;
            };
            /**
             * example:
             * 2010-04-14T02:15:15Z
             */
            committed_at: string; // date-time
        }
        /**
         * Gist History
         * Gist History
         */
        export interface GistHistory {
            user?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            version?: string;
            committed_at?: string; // date-time
            change_status?: {
                total?: number;
                additions?: number;
                deletions?: number;
            };
            url?: string; // uri
        }
        /**
         * Gist Simple
         * Gist Simple
         */
        export interface GistSimple {
            forks?: {
                id?: string;
                url?: string; // uri
                user?: /**
                 * Public User
                 * Public User
                 */
                PublicUser;
                created_at?: string; // date-time
                updated_at?: string; // date-time
            }[] | null;
            history?: /**
             * Gist History
             * Gist History
             */
            GistHistory[] | null;
            /**
             * Gist
             * Gist
             */
            fork_of?: {
                url: string; // uri
                forks_url: string; // uri
                commits_url: string; // uri
                id: string;
                node_id: string;
                git_pull_url: string; // uri
                git_push_url: string; // uri
                html_url: string; // uri
                files: {
                    [name: string]: {
                        filename?: string;
                        type?: string;
                        language?: string;
                        raw_url?: string;
                        size?: number;
                    };
                };
                public: boolean;
                created_at: string; // date-time
                updated_at: string; // date-time
                description: string | null;
                comments: number;
                user: /**
                 * Simple User
                 * Simple User
                 */
                NullableSimpleUser;
                comments_url: string; // uri
                owner?: /**
                 * Simple User
                 * Simple User
                 */
                NullableSimpleUser;
                truncated?: boolean;
                forks?: any[];
                history?: any[];
            } | null;
            url?: string;
            forks_url?: string;
            commits_url?: string;
            id?: string;
            node_id?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            files?: {
                [name: string]: {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                    truncated?: boolean;
                    content?: string;
                } | null;
            };
            public?: boolean;
            created_at?: string;
            updated_at?: string;
            description?: string | null;
            comments?: number;
            user?: string | null;
            comments_url?: string;
            owner?: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            truncated?: boolean;
        }
        /**
         * Git Commit
         * Low-level Git commit operations within a repository
         */
        export interface GitCommit {
            /**
             * SHA for the commit
             * example:
             * 7638417db6d59f3c431d3e1f261cc637155684cd
             */
            sha: string;
            node_id: string;
            url: string; // uri
            /**
             * Identifying information for the git-user
             */
            author: {
                /**
                 * Timestamp of the commit
                 * example:
                 * 2014-08-09T08:02:04+12:00
                 */
                date: string; // date-time
                /**
                 * Git email address of the user
                 * example:
                 * monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * Name of the git user
                 * example:
                 * Monalisa Octocat
                 */
                name: string;
            };
            /**
             * Identifying information for the git-user
             */
            committer: {
                /**
                 * Timestamp of the commit
                 * example:
                 * 2014-08-09T08:02:04+12:00
                 */
                date: string; // date-time
                /**
                 * Git email address of the user
                 * example:
                 * monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * Name of the git user
                 * example:
                 * Monalisa Octocat
                 */
                name: string;
            };
            /**
             * Message describing the purpose of the commit
             * example:
             * Fix #42
             */
            message: string;
            tree: {
                /**
                 * SHA for the commit
                 * example:
                 * 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                url: string; // uri
            };
            parents: {
                /**
                 * SHA for the commit
                 * example:
                 * 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                url: string; // uri
                html_url: string; // uri
            }[];
            verification: {
                verified: boolean;
                reason: string;
                signature: string | null;
                payload: string | null;
            };
            html_url: string; // uri
        }
        /**
         * Git Reference
         * Git references within a repository
         */
        export interface GitRef {
            ref: string;
            node_id: string;
            url: string; // uri
            object: {
                type: string;
                /**
                 * SHA for the reference
                 * example:
                 * 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                url: string; // uri
            };
        }
        /**
         * Git Tag
         * Metadata for a Git tag
         */
        export interface GitTag {
            /**
             * example:
             * MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==
             */
            node_id: string;
            /**
             * Name of the tag
             * example:
             * v0.0.1
             */
            tag: string;
            /**
             * example:
             * 940bd336248efae0f9ee5bc7b2d5c985887b16ac
             */
            sha: string;
            /**
             * URL for the tag
             * example:
             * https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
             */
            url: string; // uri
            /**
             * Message describing the purpose of the tag
             * example:
             * Initial public release
             */
            message: string;
            tagger: {
                date: string;
                email: string;
                name: string;
            };
            object: {
                sha: string;
                type: string;
                url: string; // uri
            };
            verification?: /* Verification */ Verification;
        }
        /**
         * Git Tree
         * The hierarchy between files in a Git repository.
         */
        export interface GitTree {
            sha: string;
            url: string; // uri
            truncated: boolean;
            /**
             * Objects specifying a tree structure
             * example:
             * [
             *   {
             *     "path": "file.rb",
             *     "mode": "100644",
             *     "type": "blob",
             *     "size": 30,
             *     "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
             *     "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132",
             *     "properties": {
             *       "path": {
             *         "type": "string"
             *       },
             *       "mode": {
             *         "type": "string"
             *       },
             *       "type": {
             *         "type": "string"
             *       },
             *       "size": {
             *         "type": "integer"
             *       },
             *       "sha": {
             *         "type": "string"
             *       },
             *       "url": {
             *         "type": "string"
             *       }
             *     },
             *     "required": [
             *       "path",
             *       "mode",
             *       "type",
             *       "sha",
             *       "url",
             *       "size"
             *     ]
             *   }
             * ]
             */
            tree: {
                /**
                 * example:
                 * test/file.rb
                 */
                path?: string;
                /**
                 * example:
                 * 040000
                 */
                mode?: string;
                /**
                 * example:
                 * tree
                 */
                type?: string;
                /**
                 * example:
                 * 23f6827669e43831def8a7ad935069c8bd418261
                 */
                sha?: string;
                /**
                 * example:
                 * 12
                 */
                size?: number;
                /**
                 * example:
                 * https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261
                 */
                url?: string;
            }[];
        }
        /**
         * Gitignore Template
         * Gitignore Template
         */
        export interface GitignoreTemplate {
            /**
             * example:
             * C
             */
            name: string;
            /**
             * example:
             * # Object files
             * *.o
             *
             * # Libraries
             * *.lib
             * *.a
             *
             * # Shared objects (inc. Windows DLLs)
             * *.dll
             * *.so
             * *.so.*
             * *.dylib
             *
             * # Executables
             * *.exe
             * *.out
             * *.app
             *
             */
            source: string;
        }
        /**
         * GPG Key
         * A unique encryption key
         */
        export interface GpgKey {
            /**
             * example:
             * 3
             */
            id: number;
            primary_key_id: null | number;
            /**
             * example:
             * 3262EFF25BA0D270
             */
            key_id: string;
            /**
             * example:
             * xsBNBFayYZ...
             */
            public_key: string;
            /**
             * example:
             * [
             *   {
             *     "email": "mastahyeti@users.noreply.github.com",
             *     "verified": true
             *   }
             * ]
             */
            emails: {
                email?: string;
                verified?: boolean;
            }[];
            /**
             * example:
             * [
             *   {
             *     "id": 4,
             *     "primary_key_id": 3,
             *     "key_id": "4A595D4C72EE49C7",
             *     "public_key": "zsBNBFayYZ...",
             *     "emails": [],
             *     "subkeys": [],
             *     "can_sign": false,
             *     "can_encrypt_comms": true,
             *     "can_encrypt_storage": true,
             *     "can_certify": false,
             *     "created_at": "2016-03-24T11:31:04-06:00",
             *     "expires_at": null
             *   }
             * ]
             */
            subkeys: {
                id?: number;
                primary_key_id?: number;
                key_id?: string;
                public_key?: string;
                emails?: any[];
                subkeys?: any[];
                can_sign?: boolean;
                can_encrypt_comms?: boolean;
                can_encrypt_storage?: boolean;
                can_certify?: boolean;
                created_at?: string;
                expires_at?: string | null;
                raw_key?: string | null;
            }[];
            /**
             * example:
             * true
             */
            can_sign: boolean;
            can_encrypt_comms: boolean;
            can_encrypt_storage: boolean;
            /**
             * example:
             * true
             */
            can_certify: boolean;
            /**
             * example:
             * 2016-03-24T11:31:04-06:00
             */
            created_at: string; // date-time
            expires_at: string | null; // date-time
            raw_key: string | null;
        }
        /**
         * GroupMapping
         * External Groups to be mapped to a team for membership
         */
        export interface GroupMapping {
            /**
             * Array of groups to be mapped to this team
             * example:
             * [
             *   {
             *     "group_id": "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa",
             *     "group_name": "saml-azuread-test",
             *     "group_description": "A group of Developers working on AzureAD SAML SSO"
             *   },
             *   {
             *     "group_id": "2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2",
             *     "group_name": "saml-azuread-test2",
             *     "group_description": "Another group of Developers working on AzureAD SAML SSO"
             *   }
             * ]
             */
            groups?: {
                /**
                 * The ID of the group
                 * example:
                 * 111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa
                 */
                group_id: string;
                /**
                 * The name of the group
                 * example:
                 * saml-azuread-test
                 */
                group_name: string;
                /**
                 * a description of the group
                 * example:
                 * A group of Developers working on AzureAD SAML SSO
                 */
                group_description: string;
                /**
                 * synchronization status for this group mapping
                 * example:
                 * unsynced
                 */
                status?: string;
                /**
                 * the time of the last sync for this group-mapping
                 * example:
                 * 2019-06-03 22:27:15:000 -700
                 */
                synced_at?: string | null;
            }[];
        }
        /**
         * Webhook
         * Webhooks for repositories.
         */
        export interface Hook {
            type: string;
            /**
             * Unique identifier of the webhook.
             * example:
             * 42
             */
            id: number;
            /**
             * The name of a valid service, use 'web' for a webhook.
             * example:
             * web
             */
            name: string;
            /**
             * Determines whether the hook is actually triggered on pushes.
             * example:
             * true
             */
            active: boolean;
            /**
             * Determines what events the hook is triggered for. Default: ['push'].
             * example:
             * [
             *   "push",
             *   "pull_request"
             * ]
             */
            events: string[];
            config: {
                /**
                 * example:
                 * "foo@bar.com"
                 */
                email?: string;
                /**
                 * example:
                 * "foo"
                 */
                password?: string;
                /**
                 * example:
                 * "roomer"
                 */
                room?: string;
                /**
                 * example:
                 * "foo"
                 */
                subdomain?: string;
                url?: /**
                 * The URL to which the payloads will be delivered.
                 * example:
                 * https://example.com/webhook
                 */
                WebhookConfigUrl /* uri */;
                insecure_ssl?: WebhookConfigInsecureSsl;
                content_type?: /**
                 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                 * example:
                 * "json"
                 */
                WebhookConfigContentType;
                /**
                 * example:
                 * "sha256"
                 */
                digest?: string;
                secret?: /**
                 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                 * example:
                 * "********"
                 */
                WebhookConfigSecret;
                /**
                 * example:
                 * "abc"
                 */
                token?: string;
            };
            /**
             * example:
             * 2011-09-06T20:39:23Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 2011-09-06T17:26:27Z
             */
            created_at: string; // date-time
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/hooks/1
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/hooks/1/test
             */
            test_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
             */
            ping_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries
             */
            deliveries_url?: string; // uri
            last_response: /* Hook Response */ HookResponse;
        }
        /**
         * Webhook delivery
         * Delivery made by a webhook.
         */
        export interface HookDelivery {
            /**
             * Unique identifier of the delivery.
             * example:
             * 42
             */
            id: number;
            /**
             * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
             * example:
             * 58474f00-b361-11eb-836d-0e4f3503ccbe
             */
            guid: string;
            /**
             * Time when the delivery was delivered.
             * example:
             * 2021-05-12T20:33:44Z
             */
            delivered_at: string; // date-time
            /**
             * Whether the delivery is a redelivery.
             * example:
             * false
             */
            redelivery: boolean;
            /**
             * Time spent delivering.
             * example:
             * 0.03
             */
            duration: number;
            /**
             * Description of the status of the attempted delivery
             * example:
             * failed to connect
             */
            status: string;
            /**
             * Status code received when delivery was made.
             * example:
             * 502
             */
            status_code: number;
            /**
             * The event that triggered the delivery.
             * example:
             * issues
             */
            event: string;
            /**
             * The type of activity for the event that triggered the delivery.
             * example:
             * opened
             */
            action: string | null;
            /**
             * The id of the GitHub App installation associated with this event.
             * example:
             * 123
             */
            installation_id: null | number;
            /**
             * The id of the repository associated with this event.
             * example:
             * 123
             */
            repository_id: null | number;
            /**
             * The URL target of the delivery.
             * example:
             * https://www.example.com
             */
            url?: string;
            request: {
                /**
                 * The request headers sent with the webhook delivery.
                 */
                headers: {
                    [name: string]: any;
                } | null;
                /**
                 * The webhook payload.
                 */
                payload: {
                    [name: string]: any;
                } | null;
            };
            response: {
                /**
                 * The response headers received when the delivery was made.
                 */
                headers: {
                    [name: string]: any;
                } | null;
                /**
                 * The response payload received.
                 */
                payload: string | null;
            };
        }
        /**
         * Simple webhook delivery
         * Delivery made by a webhook, without request and response information.
         */
        export interface HookDeliveryItem {
            /**
             * Unique identifier of the webhook delivery.
             * example:
             * 42
             */
            id: number;
            /**
             * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
             * example:
             * 58474f00-b361-11eb-836d-0e4f3503ccbe
             */
            guid: string;
            /**
             * Time when the webhook delivery occurred.
             * example:
             * 2021-05-12T20:33:44Z
             */
            delivered_at: string; // date-time
            /**
             * Whether the webhook delivery is a redelivery.
             * example:
             * false
             */
            redelivery: boolean;
            /**
             * Time spent delivering.
             * example:
             * 0.03
             */
            duration: number;
            /**
             * Describes the response returned after attempting the delivery.
             * example:
             * failed to connect
             */
            status: string;
            /**
             * Status code received when delivery was made.
             * example:
             * 502
             */
            status_code: number;
            /**
             * The event that triggered the delivery.
             * example:
             * issues
             */
            event: string;
            /**
             * The type of activity for the event that triggered the delivery.
             * example:
             * opened
             */
            action: string | null;
            /**
             * The id of the GitHub App installation associated with this event.
             * example:
             * 123
             */
            installation_id: null | number;
            /**
             * The id of the repository associated with this event.
             * example:
             * 123
             */
            repository_id: null | number;
        }
        /**
         * Hook Response
         */
        export interface HookResponse {
            code: null | number;
            status: string | null;
            message: string | null;
        }
        /**
         * Hovercard
         * Hovercard
         */
        export interface Hovercard {
            contexts: {
                message: string;
                octicon: string;
            }[];
        }
        /**
         * Import
         * A repository import from an external source.
         */
        export interface Import {
            vcs: string | null;
            use_lfs?: boolean;
            /**
             * The URL of the originating repository.
             */
            vcs_url: string;
            svc_root?: string;
            tfvc_project?: string;
            status: "auth" | "error" | "none" | "detecting" | "choose" | "auth_failed" | "importing" | "mapping" | "waiting_to_push" | "pushing" | "complete" | "setup" | "unknown" | "detection_found_multiple" | "detection_found_nothing" | "detection_needs_auth";
            status_text?: string | null;
            failed_step?: string | null;
            error_message?: string | null;
            import_percent?: null | number;
            commit_count?: null | number;
            push_percent?: null | number;
            has_large_files?: boolean;
            large_files_size?: number;
            large_files_count?: number;
            project_choices?: {
                vcs?: string;
                tfvc_project?: string;
                human_name?: string;
            }[];
            message?: string;
            authors_count?: null | number;
            url: string; // uri
            html_url: string; // uri
            authors_url: string; // uri
            repository_url: string; // uri
            svn_root?: string;
        }
        /**
         * Installation
         * Installation
         */
        export interface Installation {
            /**
             * The ID of the installation.
             * example:
             * 1
             */
            id: number;
            account: /**
             * Simple User
             * Simple User
             */
            SimpleUser | /**
             * Enterprise
             * An enterprise account
             */
            Enterprise | null;
            /**
             * Describe whether all repositories have been selected or there's a selection involved
             */
            repository_selection: "all" | "selected";
            /**
             * example:
             * https://api.github.com/installations/1/access_tokens
             */
            access_tokens_url: string; // uri
            /**
             * example:
             * https://api.github.com/installation/repositories
             */
            repositories_url: string; // uri
            /**
             * example:
             * https://github.com/organizations/github/settings/installations/1
             */
            html_url: string; // uri
            /**
             * example:
             * 1
             */
            app_id: number;
            /**
             * The ID of the user or organization this token is being scoped to.
             */
            target_id: number;
            /**
             * example:
             * Organization
             */
            target_type: string;
            permissions: /**
             * App Permissions
             * The permissions granted to the user-to-server access token.
             * example:
             * {
             *   "contents": "read",
             *   "issues": "read",
             *   "deployments": "write",
             *   "single_file": "read"
             * }
             */
            AppPermissions;
            events: string[];
            created_at: string; // date-time
            updated_at: string; // date-time
            /**
             * example:
             * config.yaml
             */
            single_file_name: string | null;
            /**
             * example:
             * true
             */
            has_multiple_single_files?: boolean;
            /**
             * example:
             * [
             *   "config.yml",
             *   ".github/issue_TEMPLATE.md"
             * ]
             */
            single_file_paths?: string[];
            /**
             * example:
             * github-actions
             */
            app_slug: string;
            suspended_by: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            suspended_at: string | null; // date-time
            /**
             * example:
             * "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"
             */
            contact_email?: string | null;
        }
        /**
         * Installation Token
         * Authentication token for a GitHub App installed on a user or org.
         */
        export interface InstallationToken {
            token: string;
            expires_at: string;
            permissions?: /**
             * App Permissions
             * The permissions granted to the user-to-server access token.
             * example:
             * {
             *   "contents": "read",
             *   "issues": "read",
             *   "deployments": "write",
             *   "single_file": "read"
             * }
             */
            AppPermissions;
            repository_selection?: "all" | "selected";
            repositories?: /**
             * Repository
             * A git repository
             */
            Repository[];
            /**
             * example:
             * README.md
             */
            single_file?: string;
            /**
             * example:
             * true
             */
            has_multiple_single_files?: boolean;
            /**
             * example:
             * [
             *   "config.yml",
             *   ".github/issue_TEMPLATE.md"
             * ]
             */
            single_file_paths?: string[];
        }
        /**
         * GitHub app
         * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        export interface Integration {
            /**
             * Unique identifier of the GitHub app
             * example:
             * 37
             */
            id: number;
            /**
             * The slug name of the GitHub app
             * example:
             * probot-owners
             */
            slug?: string;
            /**
             * example:
             * MDExOkludGVncmF0aW9uMQ==
             */
            node_id: string;
            owner: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The name of the GitHub app
             * example:
             * Probot Owners
             */
            name: string;
            /**
             * example:
             * The description of the app.
             */
            description: string | null;
            /**
             * example:
             * https://example.com
             */
            external_url: string; // uri
            /**
             * example:
             * https://github.com/apps/super-ci
             */
            html_url: string; // uri
            /**
             * example:
             * 2017-07-08T16:18:44-04:00
             */
            created_at: string; // date-time
            /**
             * example:
             * 2017-07-08T16:18:44-04:00
             */
            updated_at: string; // date-time
            /**
             * The set of permissions for the GitHub app
             * example:
             * {
             *   "issues": "read",
             *   "deployments": "write"
             * }
             */
            permissions: {
                [name: string]: string;
                issues?: string;
                checks?: string;
                metadata?: string;
                contents?: string;
                deployments?: string;
            };
            /**
             * The list of events for the GitHub app
             * example:
             * [
             *   "label",
             *   "deployment"
             * ]
             */
            events: string[];
            /**
             * The number of installations associated with the GitHub app
             * example:
             * 5
             */
            installations_count?: number;
            /**
             * example:
             * "Iv1.25b5d1e65ffc4022"
             */
            client_id?: string;
            /**
             * example:
             * "1d4b2097ac622ba702d19de498f005747a8b21d3"
             */
            client_secret?: string;
            /**
             * example:
             * "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
             */
            webhook_secret?: string | null;
            /**
             * example:
             * "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
             */
            pem?: string;
        }
        /**
         * The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`.
         * example:
         * one_month
         */
        export type InteractionExpiry = "one_day" | "three_days" | "one_week" | "one_month" | "six_months";
        /**
         * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`.
         * example:
         * collaborators_only
         */
        export type InteractionGroup = "existing_users" | "contributors_only" | "collaborators_only";
        /**
         * Interaction Restrictions
         * Limit interactions to a specific type of user for a specified duration
         */
        export interface InteractionLimit {
            limit: /**
             * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`.
             * example:
             * collaborators_only
             */
            InteractionGroup;
            expiry?: /**
             * The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`.
             * example:
             * one_month
             */
            InteractionExpiry;
        }
        /**
         * Interaction Limits
         * Interaction limit settings.
         */
        export interface InteractionLimitResponse {
            limit: /**
             * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`.
             * example:
             * collaborators_only
             */
            InteractionGroup;
            /**
             * example:
             * repository
             */
            origin: string;
            /**
             * example:
             * 2018-08-17T04:18:39Z
             */
            expires_at: string; // date-time
        }
        /**
         * Issue
         * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
         */
        export interface Issue {
            id: number;
            node_id: string;
            /**
             * URL for the issue
             * example:
             * https://api.github.com/repositories/42/issues/1
             */
            url: string; // uri
            repository_url: string; // uri
            labels_url: string;
            comments_url: string; // uri
            events_url: string; // uri
            html_url: string; // uri
            /**
             * Number uniquely identifying the issue within its repository
             * example:
             * 42
             */
            number: number;
            /**
             * State of the issue; either 'open' or 'closed'
             * example:
             * open
             */
            state: string;
            /**
             * Title of the issue
             * example:
             * Widget creation fails in Safari on OS X 10.8
             */
            title: string;
            /**
             * Contents of the issue
             * example:
             * It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
             */
            body?: string | null;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
             * example:
             * [
             *   "bug",
             *   "registration"
             * ]
             */
            labels: (string | {
                id?: number; // int64
                node_id?: string;
                url?: string; // uri
                name?: string;
                description?: string | null;
                color?: string | null;
                default?: boolean;
            })[];
            assignee: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            assignees?: /**
             * Simple User
             * Simple User
             */
            SimpleUser[] | null;
            milestone: /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            NullableMilestone;
            locked: boolean;
            active_lock_reason?: string | null;
            comments: number;
            pull_request?: {
                merged_at?: string | null; // date-time
                diff_url: string | null; // uri
                html_url: string | null; // uri
                patch_url: string | null; // uri
                url: string | null; // uri
            };
            closed_at: string | null; // date-time
            created_at: string; // date-time
            updated_at: string; // date-time
            draft?: boolean;
            closed_by?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            body_html?: string;
            body_text?: string;
            timeline_url?: string; // uri
            repository?: /**
             * Repository
             * A git repository
             */
            Repository;
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Issue Comment
         * Comments provide a way for people to collaborate on an issue.
         */
        export interface IssueComment {
            /**
             * Unique identifier of the issue comment
             * example:
             * 42
             */
            id: number;
            node_id: string;
            /**
             * URL for the issue comment
             * example:
             * https://api.github.com/repositories/42/issues/comments/1
             */
            url: string; // uri
            /**
             * Contents of the issue comment
             * example:
             * What version of Safari were you using when you observed this bug?
             */
            body?: string;
            body_text?: string;
            body_html?: string;
            html_url: string; // uri
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            updated_at: string; // date-time
            issue_url: string; // uri
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Issue Event
         * Issue Event
         */
        export interface IssueEvent {
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDEwOklzc3VlRXZlbnQx
             */
            node_id: string;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/issues/events/1
             */
            url: string; // uri
            actor: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * closed
             */
            event: string;
            /**
             * example:
             * 6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            commit_id: string | null;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            commit_url: string | null;
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            created_at: string; // date-time
            issue?: /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            NullableIssue;
            label?: /**
             * Issue Event Label
             * Issue Event Label
             */
            IssueEventLabel;
            assignee?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            assigner?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            review_requester?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            requested_reviewer?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            requested_team?: /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            Team;
            dismissed_review?: /* Issue Event Dismissed Review */ IssueEventDismissedReview;
            milestone?: /**
             * Issue Event Milestone
             * Issue Event Milestone
             */
            IssueEventMilestone;
            project_card?: /**
             * Issue Event Project Card
             * Issue Event Project Card
             */
            IssueEventProjectCard;
            rename?: /**
             * Issue Event Rename
             * Issue Event Rename
             */
            IssueEventRename;
            author_association?: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            lock_reason?: string | null;
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
        }
        /**
         * Issue Event Dismissed Review
         */
        export interface IssueEventDismissedReview {
            state: string;
            review_id: number;
            dismissal_message: string | null;
            dismissal_commit_id?: string | null;
        }
        /**
         * Issue Event for Issue
         * Issue Event for Issue
         */
        export type IssueEventForIssue = /**
         * Issue Event for Issue
         * Issue Event for Issue
         */
        /**
         * Labeled Issue Event
         * Labeled Issue Event
         */
        LabeledIssueEvent | /**
         * Unlabeled Issue Event
         * Unlabeled Issue Event
         */
        UnlabeledIssueEvent | /**
         * Assigned Issue Event
         * Assigned Issue Event
         */
        AssignedIssueEvent | /**
         * Unassigned Issue Event
         * Unassigned Issue Event
         */
        UnassignedIssueEvent | /**
         * Milestoned Issue Event
         * Milestoned Issue Event
         */
        MilestonedIssueEvent | /**
         * Demilestoned Issue Event
         * Demilestoned Issue Event
         */
        DemilestonedIssueEvent | /**
         * Renamed Issue Event
         * Renamed Issue Event
         */
        RenamedIssueEvent | /**
         * Review Requested Issue Event
         * Review Requested Issue Event
         */
        ReviewRequestedIssueEvent | /**
         * Review Request Removed Issue Event
         * Review Request Removed Issue Event
         */
        ReviewRequestRemovedIssueEvent | /**
         * Review Dismissed Issue Event
         * Review Dismissed Issue Event
         */
        ReviewDismissedIssueEvent | /**
         * Locked Issue Event
         * Locked Issue Event
         */
        LockedIssueEvent | /**
         * Added to Project Issue Event
         * Added to Project Issue Event
         */
        AddedToProjectIssueEvent | /**
         * Moved Column in Project Issue Event
         * Moved Column in Project Issue Event
         */
        MovedColumnInProjectIssueEvent | /**
         * Removed from Project Issue Event
         * Removed from Project Issue Event
         */
        RemovedFromProjectIssueEvent | /**
         * Converted Note to Issue Issue Event
         * Converted Note to Issue Issue Event
         */
        ConvertedNoteToIssueIssueEvent;
        /**
         * Issue Event Label
         * Issue Event Label
         */
        export interface IssueEventLabel {
            name: string | null;
            color: string | null;
        }
        /**
         * Issue Event Milestone
         * Issue Event Milestone
         */
        export interface IssueEventMilestone {
            title: string;
        }
        /**
         * Issue Event Project Card
         * Issue Event Project Card
         */
        export interface IssueEventProjectCard {
            url: string; // uri
            id: number;
            project_url: string; // uri
            project_id: number;
            column_name: string;
            previous_column_name?: string;
        }
        /**
         * Issue Event Rename
         * Issue Event Rename
         */
        export interface IssueEventRename {
            from: string;
            to: string;
        }
        /**
         * Issue Search Result Item
         * Issue Search Result Item
         */
        export interface IssueSearchResultItem {
            url: string; // uri
            repository_url: string; // uri
            labels_url: string;
            comments_url: string; // uri
            events_url: string; // uri
            html_url: string; // uri
            id: number;
            node_id: string;
            number: number;
            title: string;
            locked: boolean;
            active_lock_reason?: string | null;
            assignees?: /**
             * Simple User
             * Simple User
             */
            SimpleUser[] | null;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            labels: {
                id?: number; // int64
                node_id?: string;
                url?: string;
                name?: string;
                color?: string;
                default?: boolean;
                description?: string | null;
            }[];
            state: string;
            assignee: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            milestone: /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            NullableMilestone;
            comments: number;
            created_at: string; // date-time
            updated_at: string; // date-time
            closed_at: string | null; // date-time
            text_matches?: /* Search Result Text Matches */ SearchResultTextMatches;
            pull_request?: {
                merged_at?: string | null; // date-time
                diff_url: string | null; // uri
                html_url: string | null; // uri
                patch_url: string | null; // uri
                url: string | null; // uri
            };
            body?: string;
            score: number;
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            draft?: boolean;
            repository?: /**
             * Repository
             * A git repository
             */
            Repository;
            body_html?: string;
            body_text?: string;
            timeline_url?: string; // uri
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Job
         * Information of a job execution in a workflow run
         */
        export interface Job {
            /**
             * The id of the job.
             * example:
             * 21
             */
            id: number;
            /**
             * The id of the associated workflow run.
             * example:
             * 5
             */
            run_id: number;
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5
             */
            run_url: string;
            /**
             * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
             * example:
             * 1
             */
            run_attempt?: number;
            /**
             * example:
             * MDg6Q2hlY2tSdW40
             */
            node_id: string;
            /**
             * The SHA of the commit that is being run.
             * example:
             * 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/actions/jobs/21
             */
            url: string;
            /**
             * example:
             * https://github.com/github/hello-world/runs/4
             */
            html_url: string | null;
            /**
             * The phase of the lifecycle that the job is currently in.
             * example:
             * queued
             */
            status: "queued" | "in_progress" | "completed";
            /**
             * The outcome of the job.
             * example:
             * success
             */
            conclusion: string | null;
            /**
             * The time that the job started, in ISO 8601 format.
             * example:
             * 2019-08-08T08:00:00-07:00
             */
            started_at: string; // date-time
            /**
             * The time that the job finished, in ISO 8601 format.
             * example:
             * 2019-08-08T08:00:00-07:00
             */
            completed_at: string | null; // date-time
            /**
             * The name of the job.
             * example:
             * test-coverage
             */
            name: string;
            /**
             * Steps in this job.
             */
            steps?: {
                /**
                 * The phase of the lifecycle that the job is currently in.
                 * example:
                 * queued
                 */
                status: "queued" | "in_progress" | "completed";
                /**
                 * The outcome of the job.
                 * example:
                 * success
                 */
                conclusion: string | null;
                /**
                 * The name of the job.
                 * example:
                 * test-coverage
                 */
                name: string;
                /**
                 * example:
                 * 1
                 */
                number: number;
                /**
                 * The time that the step started, in ISO 8601 format.
                 * example:
                 * 2019-08-08T08:00:00-07:00
                 */
                started_at?: string | null; // date-time
                /**
                 * The time that the job finished, in ISO 8601 format.
                 * example:
                 * 2019-08-08T08:00:00-07:00
                 */
                completed_at?: string | null; // date-time
            }[];
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/check-runs/4
             */
            check_run_url: string;
            /**
             * Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
             * example:
             * [
             *   "self-hosted",
             *   "foo",
             *   "bar"
             * ]
             */
            labels: string[];
            /**
             * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * example:
             * 1
             */
            runner_id: null | number;
            /**
             * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * example:
             * my runner
             */
            runner_name: string | null;
            /**
             * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * example:
             * 2
             */
            runner_group_id: null | number;
            /**
             * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
             * example:
             * my runner group
             */
            runner_group_name: string | null;
        }
        /**
         * Key
         * Key
         */
        export interface Key {
            key: string;
            id: number;
            url: string;
            title: string;
            created_at: string; // date-time
            verified: boolean;
            read_only: boolean;
        }
        /**
         * Key Simple
         * Key Simple
         */
        export interface KeySimple {
            id: number;
            key: string;
        }
        /**
         * Label
         * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
         */
        export interface Label {
            /**
             * example:
             * 208045946
             */
            id: number; // int64
            /**
             * example:
             * MDU6TGFiZWwyMDgwNDU5NDY=
             */
            node_id: string;
            /**
             * URL for the label
             * example:
             * https://api.github.com/repositories/42/labels/bug
             */
            url: string; // uri
            /**
             * The name of the label.
             * example:
             * bug
             */
            name: string;
            /**
             * example:
             * Something isn't working
             */
            description: string | null;
            /**
             * 6-character hex code, without the leading #, identifying the color
             * example:
             * FFFFFF
             */
            color: string;
            /**
             * example:
             * true
             */
            default: boolean;
        }
        /**
         * Label Search Result Item
         * Label Search Result Item
         */
        export interface LabelSearchResultItem {
            id: number;
            node_id: string;
            url: string; // uri
            name: string;
            color: string;
            default: boolean;
            description: string | null;
            score: number;
            text_matches?: /* Search Result Text Matches */ SearchResultTextMatches;
        }
        /**
         * Labeled Issue Event
         * Labeled Issue Event
         */
        export interface LabeledIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            label: {
                name: string;
                color: string;
            };
        }
        /**
         * Language
         * Language
         */
        export interface Language {
            [name: string]: number;
        }
        /**
         * License
         * License
         */
        export interface License {
            /**
             * example:
             * mit
             */
            key: string;
            /**
             * example:
             * MIT License
             */
            name: string;
            /**
             * example:
             * MIT
             */
            spdx_id: string | null;
            /**
             * example:
             * https://api.github.com/licenses/mit
             */
            url: string | null; // uri
            /**
             * example:
             * MDc6TGljZW5zZW1pdA==
             */
            node_id: string;
            /**
             * example:
             * http://choosealicense.com/licenses/mit/
             */
            html_url: string; // uri
            /**
             * example:
             * A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.
             */
            description: string;
            /**
             * example:
             * Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.
             */
            implementation: string;
            /**
             * example:
             * [
             *   "commercial-use",
             *   "modifications",
             *   "distribution",
             *   "sublicense",
             *   "private-use"
             * ]
             */
            permissions: string[];
            /**
             * example:
             * [
             *   "include-copyright"
             * ]
             */
            conditions: string[];
            /**
             * example:
             * [
             *   "no-liability"
             * ]
             */
            limitations: string[];
            /**
             * example:
             *
             *
             * The MIT License (MIT)
             *
             * Copyright (c) [year] [fullname]
             *
             * Permission is hereby granted, free of charge, to any person obtaining a copy
             * of this software and associated documentation files (the "Software"), to deal
             * in the Software without restriction, including without limitation the rights
             * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             * copies of the Software, and to permit persons to whom the Software is
             * furnished to do so, subject to the following conditions:
             *
             * The above copyright notice and this permission notice shall be included in all
             * copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
             * SOFTWARE.
             *
             */
            body: string;
            /**
             * example:
             * true
             */
            featured: boolean;
        }
        /**
         * License Content
         * License Content
         */
        export interface LicenseContent {
            name: string;
            path: string;
            sha: string;
            size: number;
            url: string; // uri
            html_url: string | null; // uri
            git_url: string | null; // uri
            download_url: string | null; // uri
            type: string;
            content: string;
            encoding: string;
            _links: {
                git: string | null; // uri
                html: string | null; // uri
                self: string; // uri
            };
            license: /**
             * License Simple
             * License Simple
             */
            NullableLicenseSimple;
        }
        /**
         * License Simple
         * License Simple
         */
        export interface LicenseSimple {
            /**
             * example:
             * mit
             */
            key: string;
            /**
             * example:
             * MIT License
             */
            name: string;
            /**
             * example:
             * https://api.github.com/licenses/mit
             */
            url: string | null; // uri
            /**
             * example:
             * MIT
             */
            spdx_id: string | null;
            /**
             * example:
             * MDc6TGljZW5zZW1pdA==
             */
            node_id: string;
            html_url?: string; // uri
        }
        /**
         * Link
         * Hypermedia Link
         */
        export interface Link {
            href: string;
        }
        /**
         * Link With Type
         * Hypermedia Link with Type
         */
        export interface LinkWithType {
            href: string;
            type: string;
        }
        /**
         * Locked Issue Event
         * Locked Issue Event
         */
        export interface LockedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            /**
             * example:
             * "off-topic"
             */
            lock_reason: string | null;
        }
        /**
         * Marketplace Account
         */
        export interface MarketplaceAccount {
            url: string; // uri
            id: number;
            type: string;
            node_id?: string;
            login: string;
            email?: string | null; // email
            organization_billing_email?: string | null; // email
        }
        /**
         * Marketplace Listing Plan
         * Marketplace Listing Plan
         */
        export interface MarketplaceListingPlan {
            /**
             * example:
             * https://api.github.com/marketplace_listing/plans/1313
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/marketplace_listing/plans/1313/accounts
             */
            accounts_url: string; // uri
            /**
             * example:
             * 1313
             */
            id: number;
            /**
             * example:
             * 3
             */
            number: number;
            /**
             * example:
             * Pro
             */
            name: string;
            /**
             * example:
             * A professional-grade CI solution
             */
            description: string;
            /**
             * example:
             * 1099
             */
            monthly_price_in_cents: number;
            /**
             * example:
             * 11870
             */
            yearly_price_in_cents: number;
            /**
             * example:
             * flat-rate
             */
            price_model: string;
            /**
             * example:
             * true
             */
            has_free_trial: boolean;
            unit_name: string | null;
            /**
             * example:
             * published
             */
            state: string;
            /**
             * example:
             * [
             *   "Up to 25 private repositories",
             *   "11 concurrent builds"
             * ]
             */
            bullets: string[];
        }
        /**
         * Marketplace Purchase
         * Marketplace Purchase
         */
        export interface MarketplacePurchase {
            url: string;
            type: string;
            id: number;
            login: string;
            organization_billing_email?: string;
            email?: string | null;
            marketplace_pending_change?: {
                is_installed?: boolean;
                effective_date?: string;
                unit_count?: null | number;
                id?: number;
                plan?: /**
                 * Marketplace Listing Plan
                 * Marketplace Listing Plan
                 */
                MarketplaceListingPlan;
            } | null;
            marketplace_purchase: {
                billing_cycle?: string;
                next_billing_date?: string | null;
                is_installed?: boolean;
                unit_count?: null | number;
                on_free_trial?: boolean;
                free_trial_ends_on?: string | null;
                updated_at?: string;
                plan?: /**
                 * Marketplace Listing Plan
                 * Marketplace Listing Plan
                 */
                MarketplaceListingPlan;
            };
        }
        /**
         * Merged upstream
         * Results of a successful merge upstream request
         */
        export interface MergedUpstream {
            message?: string;
            merge_type?: "merge" | "fast-forward" | "none";
            base_branch?: string;
        }
        /**
         * Migration
         * A migration.
         */
        export interface Migration {
            /**
             * example:
             * 79
             */
            id: number;
            owner: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 0b989ba4-242f-11e5-81e1-c7b6966d2516
             */
            guid: string;
            /**
             * example:
             * pending
             */
            state: string;
            /**
             * example:
             * true
             */
            lock_repositories: boolean;
            exclude_metadata: boolean;
            exclude_git_data: boolean;
            exclude_attachments: boolean;
            exclude_releases: boolean;
            exclude_owner_projects: boolean;
            repositories: /**
             * Repository
             * A git repository
             */
            Repository[];
            /**
             * example:
             * https://api.github.com/orgs/octo-org/migrations/79
             */
            url: string; // uri
            /**
             * example:
             * 2015-07-06T15:33:38-07:00
             */
            created_at: string; // date-time
            /**
             * example:
             * 2015-07-06T15:33:38-07:00
             */
            updated_at: string; // date-time
            node_id: string;
            archive_url?: string; // uri
            exclude?: any[];
        }
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        export interface Milestone {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/milestones/1
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/milestones/v1.0
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
             */
            labels_url: string; // uri
            /**
             * example:
             * 1002604
             */
            id: number;
            /**
             * example:
             * MDk6TWlsZXN0b25lMTAwMjYwNA==
             */
            node_id: string;
            /**
             * The number of the milestone.
             * example:
             * 42
             */
            number: number;
            /**
             * The state of the milestone.
             * example:
             * open
             */
            state: "open" | "closed";
            /**
             * The title of the milestone.
             * example:
             * v1.0
             */
            title: string;
            /**
             * example:
             * Tracking milestone for version 1.0
             */
            description: string | null;
            creator: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 4
             */
            open_issues: number;
            /**
             * example:
             * 8
             */
            closed_issues: number;
            /**
             * example:
             * 2011-04-10T20:09:31Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2014-03-03T18:58:10Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 2013-02-12T13:22:01Z
             */
            closed_at: string | null; // date-time
            /**
             * example:
             * 2012-10-09T23:39:01Z
             */
            due_on: string | null; // date-time
        }
        /**
         * Milestoned Issue Event
         * Milestoned Issue Event
         */
        export interface MilestonedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            milestone: {
                title: string;
            };
        }
        /**
         * Minimal Repository
         * Minimal Repository
         */
        export interface MinimalRepository {
            /**
             * example:
             * 1296269
             */
            id: number;
            /**
             * example:
             * MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * example:
             * Hello-World
             */
            name: string;
            /**
             * example:
             * octocat/Hello-World
             */
            full_name: string;
            owner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            private: boolean;
            /**
             * example:
             * https://github.com/octocat/Hello-World
             */
            html_url: string; // uri
            /**
             * example:
             * This your first repo!
             */
            description: string | null;
            fork: boolean;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World
             */
            url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            git_url?: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            ssh_url?: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            clone_url?: string;
            mirror_url?: string | null;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string; // uri
            svn_url?: string;
            homepage?: string | null;
            language?: string | null;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            /**
             * example:
             * 2011-01-26T19:06:43Z
             */
            pushed_at?: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at?: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:14:43Z
             */
            updated_at?: string | null; // date-time
            permissions?: {
                admin?: boolean;
                maintain?: boolean;
                push?: boolean;
                triage?: boolean;
                pull?: boolean;
            };
            /**
             * example:
             * admin
             */
            role_name?: string;
            template_repository?: /**
             * Repository
             * A git repository
             */
            NullableRepository;
            temp_clone_token?: string;
            delete_branch_on_merge?: boolean;
            subscribers_count?: number;
            network_count?: number;
            code_of_conduct?: /**
             * Code Of Conduct
             * Code Of Conduct
             */
            CodeOfConduct;
            license?: {
                key?: string;
                name?: string;
                spdx_id?: string;
                url?: string;
                node_id?: string;
            } | null;
            /**
             * example:
             * 0
             */
            forks?: number;
            /**
             * example:
             * 0
             */
            open_issues?: number;
            /**
             * example:
             * 0
             */
            watchers?: number;
            allow_forking?: boolean;
        }
        /**
         * Moved Column in Project Issue Event
         * Moved Column in Project Issue Event
         */
        export interface MovedColumnInProjectIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            project_card?: {
                id: number;
                url: string; // uri
                project_id: number;
                project_url: string; // uri
                column_name: string;
                previous_column_name?: string;
            };
        }
        /**
         * Code Of Conduct Simple
         * Code of Conduct Simple
         */
        export type NullableCodeOfConductSimple = {
            /**
             * example:
             * https://api.github.com/repos/github/docs/community/code_of_conduct
             */
            url: string; // uri
            /**
             * example:
             * citizen_code_of_conduct
             */
            key: string;
            /**
             * example:
             * Citizen Code of Conduct
             */
            name: string;
            /**
             * example:
             * https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
             */
            html_url: string | null; // uri
        } | null;
        /**
         * Codespace machine
         * A description of the machine powering a codespace.
         */
        export type NullableCodespaceMachine = {
            /**
             * The name of the machine.
             * example:
             * standardLinux
             */
            name: string;
            /**
             * The display name of the machine includes cores, memory, and storage.
             * example:
             * 4 cores, 8 GB RAM, 64 GB storage
             */
            display_name: string;
            /**
             * The operating system of the machine.
             * example:
             * linux
             */
            operating_system: string;
            /**
             * How much storage is available to the codespace.
             * example:
             * 68719476736
             */
            storage_in_bytes: number;
            /**
             * How much memory is available to the codespace.
             * example:
             * 8589934592
             */
            memory_in_bytes: number;
            /**
             * How many cores are available to the codespace.
             * example:
             * 4
             */
            cpus: number;
            /**
             * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.
             * example:
             * blob
             */
            prebuild_availability: "none" | "blob" | "pool";
        } | null;
        /**
         * Collaborator
         * Collaborator
         */
        export type NullableCollaborator = {
            /**
             * example:
             * octocat
             */
            login: string;
            /**
             * example:
             * 1
             */
            id: number;
            email?: string | null;
            name?: string | null;
            /**
             * example:
             * MDQ6VXNlcjE=
             */
            node_id: string;
            /**
             * example:
             * https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string; // uri
            /**
             * example:
             * 41d064eb2195891e12d0413f63227ea7
             */
            gravatar_id: string | null;
            /**
             * example:
             * https://api.github.com/users/octocat
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/followers
             */
            followers_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/following{/other_user}
             */
            following_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/gists{/gist_id}
             */
            gists_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/starred{/owner}{/repo}
             */
            starred_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/orgs
             */
            organizations_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/repos
             */
            repos_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/events{/privacy}
             */
            events_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/received_events
             */
            received_events_url: string; // uri
            /**
             * example:
             * User
             */
            type: string;
            site_admin: boolean;
            permissions?: {
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
                admin: boolean;
            };
            /**
             * example:
             * admin
             */
            role_name: string;
        } | null;
        /**
         * Community Health File
         */
        export type NullableCommunityHealthFile = {
            url: string; // uri
            html_url: string; // uri
        } | null;
        /**
         * Git User
         * Metaproperties for Git author/committer information.
         */
        export type NullableGitUser = {
            /**
             * example:
             * "Chris Wanstrath"
             */
            name?: string;
            /**
             * example:
             * "chris@ozmm.org"
             */
            email?: string;
            /**
             * example:
             * "2007-10-29T02:42:39.000-07:00"
             */
            date?: string;
        } | null;
        /**
         * GitHub app
         * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        export type NullableIntegration = {
            /**
             * Unique identifier of the GitHub app
             * example:
             * 37
             */
            id: number;
            /**
             * The slug name of the GitHub app
             * example:
             * probot-owners
             */
            slug?: string;
            /**
             * example:
             * MDExOkludGVncmF0aW9uMQ==
             */
            node_id: string;
            owner: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The name of the GitHub app
             * example:
             * Probot Owners
             */
            name: string;
            /**
             * example:
             * The description of the app.
             */
            description: string | null;
            /**
             * example:
             * https://example.com
             */
            external_url: string; // uri
            /**
             * example:
             * https://github.com/apps/super-ci
             */
            html_url: string; // uri
            /**
             * example:
             * 2017-07-08T16:18:44-04:00
             */
            created_at: string; // date-time
            /**
             * example:
             * 2017-07-08T16:18:44-04:00
             */
            updated_at: string; // date-time
            /**
             * The set of permissions for the GitHub app
             * example:
             * {
             *   "issues": "read",
             *   "deployments": "write"
             * }
             */
            permissions: {
                [name: string]: string;
                issues?: string;
                checks?: string;
                metadata?: string;
                contents?: string;
                deployments?: string;
            };
            /**
             * The list of events for the GitHub app
             * example:
             * [
             *   "label",
             *   "deployment"
             * ]
             */
            events: string[];
            /**
             * The number of installations associated with the GitHub app
             * example:
             * 5
             */
            installations_count?: number;
            /**
             * example:
             * "Iv1.25b5d1e65ffc4022"
             */
            client_id?: string;
            /**
             * example:
             * "1d4b2097ac622ba702d19de498f005747a8b21d3"
             */
            client_secret?: string;
            /**
             * example:
             * "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
             */
            webhook_secret?: string | null;
            /**
             * example:
             * "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
             */
            pem?: string;
        } | null;
        /**
         * Issue
         * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
         */
        export type NullableIssue = {
            id: number;
            node_id: string;
            /**
             * URL for the issue
             * example:
             * https://api.github.com/repositories/42/issues/1
             */
            url: string; // uri
            repository_url: string; // uri
            labels_url: string;
            comments_url: string; // uri
            events_url: string; // uri
            html_url: string; // uri
            /**
             * Number uniquely identifying the issue within its repository
             * example:
             * 42
             */
            number: number;
            /**
             * State of the issue; either 'open' or 'closed'
             * example:
             * open
             */
            state: string;
            /**
             * Title of the issue
             * example:
             * Widget creation fails in Safari on OS X 10.8
             */
            title: string;
            /**
             * Contents of the issue
             * example:
             * It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
             */
            body?: string | null;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
             * example:
             * [
             *   "bug",
             *   "registration"
             * ]
             */
            labels: (string | {
                id?: number; // int64
                node_id?: string;
                url?: string; // uri
                name?: string;
                description?: string | null;
                color?: string | null;
                default?: boolean;
            })[];
            assignee: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            assignees?: /**
             * Simple User
             * Simple User
             */
            SimpleUser[] | null;
            milestone: /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            NullableMilestone;
            locked: boolean;
            active_lock_reason?: string | null;
            comments: number;
            pull_request?: {
                merged_at?: string | null; // date-time
                diff_url: string | null; // uri
                html_url: string | null; // uri
                patch_url: string | null; // uri
                url: string | null; // uri
            };
            closed_at: string | null; // date-time
            created_at: string; // date-time
            updated_at: string; // date-time
            draft?: boolean;
            closed_by?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            body_html?: string;
            body_text?: string;
            timeline_url?: string; // uri
            repository?: /**
             * Repository
             * A git repository
             */
            Repository;
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            reactions?: /* Reaction Rollup */ ReactionRollup;
        } | null;
        /**
         * License Simple
         * License Simple
         */
        export type NullableLicenseSimple = {
            /**
             * example:
             * mit
             */
            key: string;
            /**
             * example:
             * MIT License
             */
            name: string;
            /**
             * example:
             * https://api.github.com/licenses/mit
             */
            url: string | null; // uri
            /**
             * example:
             * MIT
             */
            spdx_id: string | null;
            /**
             * example:
             * MDc6TGljZW5zZW1pdA==
             */
            node_id: string;
            html_url?: string; // uri
        } | null;
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        export type NullableMilestone = {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/milestones/1
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/milestones/v1.0
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
             */
            labels_url: string; // uri
            /**
             * example:
             * 1002604
             */
            id: number;
            /**
             * example:
             * MDk6TWlsZXN0b25lMTAwMjYwNA==
             */
            node_id: string;
            /**
             * The number of the milestone.
             * example:
             * 42
             */
            number: number;
            /**
             * The state of the milestone.
             * example:
             * open
             */
            state: "open" | "closed";
            /**
             * The title of the milestone.
             * example:
             * v1.0
             */
            title: string;
            /**
             * example:
             * Tracking milestone for version 1.0
             */
            description: string | null;
            creator: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 4
             */
            open_issues: number;
            /**
             * example:
             * 8
             */
            closed_issues: number;
            /**
             * example:
             * 2011-04-10T20:09:31Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2014-03-03T18:58:10Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 2013-02-12T13:22:01Z
             */
            closed_at: string | null; // date-time
            /**
             * example:
             * 2012-10-09T23:39:01Z
             */
            due_on: string | null; // date-time
        } | null;
        /**
         * Minimal Repository
         * Minimal Repository
         */
        export type NullableMinimalRepository = {
            /**
             * example:
             * 1296269
             */
            id: number;
            /**
             * example:
             * MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * example:
             * Hello-World
             */
            name: string;
            /**
             * example:
             * octocat/Hello-World
             */
            full_name: string;
            owner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            private: boolean;
            /**
             * example:
             * https://github.com/octocat/Hello-World
             */
            html_url: string; // uri
            /**
             * example:
             * This your first repo!
             */
            description: string | null;
            fork: boolean;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World
             */
            url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            git_url?: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            ssh_url?: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            clone_url?: string;
            mirror_url?: string | null;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string; // uri
            svn_url?: string;
            homepage?: string | null;
            language?: string | null;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            /**
             * example:
             * 2011-01-26T19:06:43Z
             */
            pushed_at?: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at?: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:14:43Z
             */
            updated_at?: string | null; // date-time
            permissions?: {
                admin?: boolean;
                maintain?: boolean;
                push?: boolean;
                triage?: boolean;
                pull?: boolean;
            };
            /**
             * example:
             * admin
             */
            role_name?: string;
            template_repository?: /**
             * Repository
             * A git repository
             */
            NullableRepository;
            temp_clone_token?: string;
            delete_branch_on_merge?: boolean;
            subscribers_count?: number;
            network_count?: number;
            code_of_conduct?: /**
             * Code Of Conduct
             * Code Of Conduct
             */
            CodeOfConduct;
            license?: {
                key?: string;
                name?: string;
                spdx_id?: string;
                url?: string;
                node_id?: string;
            } | null;
            /**
             * example:
             * 0
             */
            forks?: number;
            /**
             * example:
             * 0
             */
            open_issues?: number;
            /**
             * example:
             * 0
             */
            watchers?: number;
            allow_forking?: boolean;
        } | null;
        /**
         * Repository
         * A git repository
         */
        export type NullableRepository = {
            /**
             * Unique identifier of the repository
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * The name of the repository.
             * example:
             * Team Environment
             */
            name: string;
            /**
             * example:
             * octocat/Hello-World
             */
            full_name: string;
            license: /**
             * License Simple
             * License Simple
             */
            NullableLicenseSimple;
            organization?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            /**
             * example:
             * https://github.com/octocat/Hello-World
             */
            html_url: string; // uri
            /**
             * example:
             * This your first repo!
             */
            description: string | null;
            fork: boolean;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World
             */
            url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            /**
             * example:
             * git:github.com/octocat/Hello-World.git
             */
            git_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            /**
             * example:
             * git@github.com:octocat/Hello-World.git
             */
            ssh_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World.git
             */
            clone_url: string;
            /**
             * example:
             * git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string; // uri
            /**
             * example:
             * https://svn.github.com/octocat/Hello-World
             */
            svn_url: string; // uri
            /**
             * example:
             * https://github.com
             */
            homepage: string | null; // uri
            language: string | null;
            /**
             * example:
             * 9
             */
            forks_count: number;
            /**
             * example:
             * 80
             */
            stargazers_count: number;
            /**
             * example:
             * 80
             */
            watchers_count: number;
            /**
             * example:
             * 108
             */
            size: number;
            /**
             * The default branch of the repository.
             * example:
             * master
             */
            default_branch: string;
            /**
             * example:
             * 0
             */
            open_issues_count: number;
            /**
             * Whether this repository acts as a template that can be used to generate new repositories.
             * example:
             * true
             */
            is_template?: boolean;
            topics?: string[];
            /**
             * Whether issues are enabled.
             * example:
             * true
             */
            has_issues: boolean;
            /**
             * Whether projects are enabled.
             * example:
             * true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * example:
             * true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * Whether downloads are enabled.
             * example:
             * true
             */
            has_downloads: boolean;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            /**
             * Returns whether or not this repository disabled.
             */
            disabled: boolean;
            /**
             * The repository visibility: public, private, or internal.
             */
            visibility?: string;
            /**
             * example:
             * 2011-01-26T19:06:43Z
             */
            pushed_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:14:43Z
             */
            updated_at: string | null; // date-time
            /**
             * Whether to allow rebase merges for pull requests.
             * example:
             * true
             */
            allow_rebase_merge?: boolean;
            template_repository?: {
                id?: number;
                node_id?: string;
                name?: string;
                full_name?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    avatar_url?: string;
                    gravatar_id?: string;
                    url?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    repos_url?: string;
                    events_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                private?: boolean;
                html_url?: string;
                description?: string;
                fork?: boolean;
                url?: string;
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                downloads_url?: string;
                events_url?: string;
                forks_url?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                notifications_url?: string;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                clone_url?: string;
                mirror_url?: string;
                hooks_url?: string;
                svn_url?: string;
                homepage?: string;
                language?: string;
                forks_count?: number;
                stargazers_count?: number;
                watchers_count?: number;
                size?: number;
                default_branch?: string;
                open_issues_count?: number;
                is_template?: boolean;
                topics?: string[];
                has_issues?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                has_pages?: boolean;
                has_downloads?: boolean;
                archived?: boolean;
                disabled?: boolean;
                visibility?: string;
                pushed_at?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    admin?: boolean;
                    maintain?: boolean;
                    push?: boolean;
                    triage?: boolean;
                    pull?: boolean;
                };
                allow_rebase_merge?: boolean;
                temp_clone_token?: string;
                allow_squash_merge?: boolean;
                allow_auto_merge?: boolean;
                delete_branch_on_merge?: boolean;
                allow_update_branch?: boolean;
                allow_merge_commit?: boolean;
                subscribers_count?: number;
                network_count?: number;
            } | null;
            temp_clone_token?: string;
            /**
             * Whether to allow squash merges for pull requests.
             * example:
             * true
             */
            allow_squash_merge?: boolean;
            /**
             * Whether to allow Auto-merge to be used on pull requests.
             * example:
             * false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to delete head branches when pull requests are merged
             * example:
             * false
             */
            delete_branch_on_merge?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * example:
             * true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow forking this repo
             */
            allow_forking?: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            /**
             * example:
             * "2020-07-09T00:17:42Z"
             */
            starred_at?: string;
        } | null;
        /**
         * Scoped Installation
         */
        export type NullableScopedInstallation = {
            permissions: /**
             * App Permissions
             * The permissions granted to the user-to-server access token.
             * example:
             * {
             *   "contents": "read",
             *   "issues": "read",
             *   "deployments": "write",
             *   "single_file": "read"
             * }
             */
            AppPermissions;
            /**
             * Describe whether all repositories have been selected or there's a selection involved
             */
            repository_selection: "all" | "selected";
            /**
             * example:
             * config.yaml
             */
            single_file_name: string | null;
            /**
             * example:
             * true
             */
            has_multiple_single_files?: boolean;
            /**
             * example:
             * [
             *   "config.yml",
             *   ".github/issue_TEMPLATE.md"
             * ]
             */
            single_file_paths?: string[];
            /**
             * example:
             * https://api.github.com/users/octocat/repos
             */
            repositories_url: string; // uri
            account: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
        } | null;
        /**
         * Simple Commit
         * Simple Commit
         */
        export type NullableSimpleCommit = {
            id: string;
            tree_id: string;
            message: string;
            timestamp: string; // date-time
            author: {
                name: string;
                email: string;
            } | null;
            committer: {
                name: string;
                email: string;
            } | null;
        } | null;
        /**
         * Simple User
         * Simple User
         */
        export type NullableSimpleUser = {
            name?: string | null;
            email?: string | null;
            /**
             * example:
             * octocat
             */
            login: string;
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDQ6VXNlcjE=
             */
            node_id: string;
            /**
             * example:
             * https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string; // uri
            /**
             * example:
             * 41d064eb2195891e12d0413f63227ea7
             */
            gravatar_id: string | null;
            /**
             * example:
             * https://api.github.com/users/octocat
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/followers
             */
            followers_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/following{/other_user}
             */
            following_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/gists{/gist_id}
             */
            gists_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/starred{/owner}{/repo}
             */
            starred_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/orgs
             */
            organizations_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/repos
             */
            repos_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/events{/privacy}
             */
            events_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/received_events
             */
            received_events_url: string; // uri
            /**
             * example:
             * User
             */
            type: string;
            site_admin: boolean;
            /**
             * example:
             * "2020-07-09T00:17:55Z"
             */
            starred_at?: string;
        } | null;
        /**
         * Team Simple
         * Groups of organization members that gives permissions on specified repositories.
         */
        export type NullableTeamSimple = {
            /**
             * Unique identifier of the team
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDQ6VGVhbTE=
             */
            node_id: string;
            /**
             * URL for the team
             * example:
             * https://api.github.com/organizations/1/team/1
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/organizations/1/team/1/members{/member}
             */
            members_url: string;
            /**
             * Name of the team
             * example:
             * Justice League
             */
            name: string;
            /**
             * Description of the team
             * example:
             * A great team.
             */
            description: string | null;
            /**
             * Permission that the team will have for its repositories
             * example:
             * admin
             */
            permission: string;
            /**
             * The level of privacy this team should have
             * example:
             * closed
             */
            privacy?: string;
            /**
             * example:
             * https://github.com/orgs/rails/teams/core
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/organizations/1/team/1/repos
             */
            repositories_url: string; // uri
            /**
             * example:
             * justice-league
             */
            slug: string;
            /**
             * Distinguished Name (DN) that team maps to within LDAP environment
             * example:
             * uid=example,ou=users,dc=github,dc=com
             */
            ldap_dn?: string;
        } | null;
        /**
         * Org Hook
         * Org Hook
         */
        export interface OrgHook {
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * https://api.github.com/orgs/octocat/hooks/1
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/octocat/hooks/1/pings
             */
            ping_url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/octocat/hooks/1/deliveries
             */
            deliveries_url?: string; // uri
            /**
             * example:
             * web
             */
            name: string;
            /**
             * example:
             * [
             *   "push",
             *   "pull_request"
             * ]
             */
            events: string[];
            /**
             * example:
             * true
             */
            active: boolean;
            config: {
                /**
                 * example:
                 * "http://example.com/2"
                 */
                url?: string;
                /**
                 * example:
                 * "0"
                 */
                insecure_ssl?: string;
                /**
                 * example:
                 * "form"
                 */
                content_type?: string;
                /**
                 * example:
                 * "********"
                 */
                secret?: string;
            };
            /**
             * example:
             * 2011-09-06T20:39:23Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 2011-09-06T17:26:27Z
             */
            created_at: string; // date-time
            type: string;
        }
        /**
         * Org Membership
         * Org Membership
         */
        export interface OrgMembership {
            /**
             * example:
             * https://api.github.com/orgs/octocat/memberships/defunkt
             */
            url: string; // uri
            /**
             * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
             * example:
             * active
             */
            state: "active" | "pending";
            /**
             * The user's membership type in the organization.
             * example:
             * admin
             */
            role: "admin" | "member" | "billing_manager";
            /**
             * example:
             * https://api.github.com/orgs/octocat
             */
            organization_url: string; // uri
            organization: /**
             * Organization Simple
             * Organization Simple
             */
            OrganizationSimple;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            permissions?: {
                can_create_repository: boolean;
            };
        }
        /**
         * Actions Secret for an Organization
         * Secrets for GitHub Actions for an organization.
         */
        export interface OrganizationActionsSecret {
            /**
             * The name of the secret.
             * example:
             * SECRET_TOKEN
             */
            name: string;
            created_at: string; // date-time
            updated_at: string; // date-time
            /**
             * Visibility of a secret
             */
            visibility: "all" | "private" | "selected";
            /**
             * example:
             * https://api.github.com/organizations/org/secrets/my_secret/repositories
             */
            selected_repositories_url?: string; // uri
        }
        /**
         * Organization Custom Repository Role
         * Custom repository roles created by organization administrators
         */
        export interface OrganizationCustomRepositoryRole {
            id: number;
            name: string;
        }
        /**
         * Dependabot Secret for an Organization
         * Secrets for GitHub Dependabot for an organization.
         */
        export interface OrganizationDependabotSecret {
            /**
             * The name of the secret.
             * example:
             * SECRET_TOKEN
             */
            name: string;
            created_at: string; // date-time
            updated_at: string; // date-time
            /**
             * Visibility of a secret
             */
            visibility: "all" | "private" | "selected";
            /**
             * example:
             * https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories
             */
            selected_repositories_url?: string; // uri
        }
        /**
         * Organization Full
         * Organization Full
         */
        export interface OrganizationFull {
            /**
             * example:
             * github
             */
            login: string;
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDEyOk9yZ2FuaXphdGlvbjE=
             */
            node_id: string;
            /**
             * example:
             * https://api.github.com/orgs/github
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/github/repos
             */
            repos_url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/github/events
             */
            events_url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/github/hooks
             */
            hooks_url: string;
            /**
             * example:
             * https://api.github.com/orgs/github/issues
             */
            issues_url: string;
            /**
             * example:
             * https://api.github.com/orgs/github/members{/member}
             */
            members_url: string;
            /**
             * example:
             * https://api.github.com/orgs/github/public_members{/member}
             */
            public_members_url: string;
            /**
             * example:
             * https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /**
             * example:
             * A great organization
             */
            description: string | null;
            /**
             * example:
             * github
             */
            name?: string;
            /**
             * example:
             * GitHub
             */
            company?: string;
            /**
             * example:
             * https://github.com/blog
             */
            blog?: string; // uri
            /**
             * example:
             * San Francisco
             */
            location?: string;
            /**
             * example:
             * octocat@github.com
             */
            email?: string; // email
            /**
             * example:
             * github
             */
            twitter_username?: string | null;
            /**
             * example:
             * true
             */
            is_verified?: boolean;
            /**
             * example:
             * true
             */
            has_organization_projects: boolean;
            /**
             * example:
             * true
             */
            has_repository_projects: boolean;
            /**
             * example:
             * 2
             */
            public_repos: number;
            /**
             * example:
             * 1
             */
            public_gists: number;
            /**
             * example:
             * 20
             */
            followers: number;
            /**
             * example:
             * 0
             */
            following: number;
            /**
             * example:
             * https://github.com/octocat
             */
            html_url: string; // uri
            /**
             * example:
             * 2008-01-14T04:33:35Z
             */
            created_at: string; // date-time
            /**
             * example:
             * Organization
             */
            type: string;
            /**
             * example:
             * 100
             */
            total_private_repos?: number;
            /**
             * example:
             * 100
             */
            owned_private_repos?: number;
            /**
             * example:
             * 81
             */
            private_gists?: null | number;
            /**
             * example:
             * 10000
             */
            disk_usage?: null | number;
            /**
             * example:
             * 8
             */
            collaborators?: null | number;
            /**
             * example:
             * org@example.com
             */
            billing_email?: string | null; // email
            plan?: {
                name: string;
                space: number;
                private_repos: number;
                filled_seats?: number;
                seats?: number;
            };
            default_repository_permission?: string | null;
            /**
             * example:
             * true
             */
            members_can_create_repositories?: boolean | null;
            /**
             * example:
             * true
             */
            two_factor_requirement_enabled?: boolean | null;
            /**
             * example:
             * all
             */
            members_allowed_repository_creation_type?: string;
            /**
             * example:
             * true
             */
            members_can_create_public_repositories?: boolean;
            /**
             * example:
             * true
             */
            members_can_create_private_repositories?: boolean;
            /**
             * example:
             * true
             */
            members_can_create_internal_repositories?: boolean;
            /**
             * example:
             * true
             */
            members_can_create_pages?: boolean;
            /**
             * example:
             * true
             */
            members_can_create_public_pages?: boolean;
            /**
             * example:
             * true
             */
            members_can_create_private_pages?: boolean;
            /**
             * example:
             * false
             */
            members_can_fork_private_repositories?: boolean | null;
            updated_at: string; // date-time
        }
        /**
         * Organization Invitation
         * Organization Invitation
         */
        export interface OrganizationInvitation {
            id: number;
            login: string | null;
            email: string | null;
            role: string;
            created_at: string;
            failed_at?: string | null;
            failed_reason?: string | null;
            inviter: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            team_count: number;
            /**
             * example:
             * "MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"
             */
            node_id: string;
            /**
             * example:
             * "https://api.github.com/organizations/16/invitations/1/teams"
             */
            invitation_teams_url: string;
        }
        export interface OrganizationSecretScanningAlert {
            number?: /* The security alert number. */ AlertNumber;
            created_at?: /* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertCreatedAt /* date-time */;
            url?: /* The REST API URL of the alert resource. */ AlertUrl /* uri */;
            html_url?: /* The GitHub URL of the alert resource. */ AlertHtmlUrl /* uri */;
            /**
             * The REST API URL of the code locations for this alert.
             */
            locations_url?: string; // uri
            state?: /* Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */ SecretScanningAlertState;
            resolution?: /* **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`. */ SecretScanningAlertResolution;
            /**
             * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            resolved_at?: string | null; // date-time
            resolved_by?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The type of secret that secret scanning detected.
             */
            secret_type?: string;
            /**
             * User-friendly name for the detected secret, matching the `secret_type`.
             * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
             */
            secret_type_display_name?: string;
            /**
             * The secret that was detected.
             */
            secret?: string;
            repository?: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
        }
        /**
         * Organization Simple
         * Organization Simple
         */
        export interface OrganizationSimple {
            /**
             * example:
             * github
             */
            login: string;
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDEyOk9yZ2FuaXphdGlvbjE=
             */
            node_id: string;
            /**
             * example:
             * https://api.github.com/orgs/github
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/github/repos
             */
            repos_url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/github/events
             */
            events_url: string; // uri
            /**
             * example:
             * https://api.github.com/orgs/github/hooks
             */
            hooks_url: string;
            /**
             * example:
             * https://api.github.com/orgs/github/issues
             */
            issues_url: string;
            /**
             * example:
             * https://api.github.com/orgs/github/members{/member}
             */
            members_url: string;
            /**
             * example:
             * https://api.github.com/orgs/github/public_members{/member}
             */
            public_members_url: string;
            /**
             * example:
             * https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string;
            /**
             * example:
             * A great organization
             */
            description: string | null;
        }
        /**
         * Package
         * A software package
         */
        export interface Package {
            /**
             * Unique identifier of the package.
             * example:
             * 1
             */
            id: number;
            /**
             * The name of the package.
             * example:
             * super-linter
             */
            name: string;
            /**
             * example:
             * docker
             */
            package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
            /**
             * example:
             * https://api.github.com/orgs/github/packages/container/super-linter
             */
            url: string;
            /**
             * example:
             * https://github.com/orgs/github/packages/container/package/super-linter
             */
            html_url: string;
            /**
             * The number of versions of the package.
             * example:
             * 1
             */
            version_count: number;
            /**
             * example:
             * private
             */
            visibility: "private" | "public";
            owner?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            repository?: /**
             * Minimal Repository
             * Minimal Repository
             */
            NullableMinimalRepository;
            created_at: string; // date-time
            updated_at: string; // date-time
        }
        /**
         * Package Version
         * A version of a software package
         */
        export interface PackageVersion {
            /**
             * Unique identifier of the package version.
             * example:
             * 1
             */
            id: number;
            /**
             * The name of the package version.
             * example:
             * latest
             */
            name: string;
            /**
             * example:
             * https://api.github.com/orgs/github/packages/container/super-linter/versions/786068
             */
            url: string;
            /**
             * example:
             * https://github.com/orgs/github/packages/container/package/super-linter
             */
            package_html_url: string;
            /**
             * example:
             * https://github.com/orgs/github/packages/container/super-linter/786068
             */
            html_url?: string;
            /**
             * example:
             * MIT
             */
            license?: string;
            description?: string;
            /**
             * example:
             * 2011-04-10T20:09:31Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2014-03-03T18:58:10Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 2014-03-03T18:58:10Z
             */
            deleted_at?: string; // date-time
            /**
             * Package Version Metadata
             */
            metadata?: {
                /**
                 * example:
                 * docker
                 */
                package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
                /**
                 * Container Metadata
                 */
                container?: {
                    tags: string[];
                };
                /**
                 * Docker Metadata
                 */
                docker?: {
                    tag?: string[];
                };
            };
        }
        export interface PackagesBillingUsage {
            /**
             * Sum of the free and paid storage space (GB) for GitHuub Packages.
             */
            total_gigabytes_bandwidth_used: number;
            /**
             * Total paid storage space (GB) for GitHuub Packages.
             */
            total_paid_gigabytes_bandwidth_used: number;
            /**
             * Free storage space (GB) for GitHub Packages.
             */
            included_gigabytes_bandwidth: number;
        }
        /**
         * GitHub Pages
         * The configuration for GitHub Pages for a repository.
         */
        export interface Page {
            /**
             * The API address for accessing this Page resource.
             * example:
             * https://api.github.com/repos/github/hello-world/pages
             */
            url: string; // uri
            /**
             * The status of the most recent build of the Page.
             * example:
             * built
             */
            status: "built" | "building" | "errored";
            /**
             * The Pages site's custom domain
             * example:
             * example.com
             */
            cname: string | null;
            /**
             * The state if the domain is verified
             * example:
             * pending
             */
            protected_domain_state?: "pending" | "verified" | "unverified";
            /**
             * The timestamp when a pending domain becomes unverified.
             */
            pending_domain_unverified_at?: string | null; // date-time
            /**
             * Whether the Page has a custom 404 page.
             * example:
             * false
             */
            custom_404: boolean;
            /**
             * The web address the Page can be accessed from.
             * example:
             * https://example.com
             */
            html_url?: string; // uri
            source?: /* Pages Source Hash */ PagesSourceHash;
            /**
             * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
             * example:
             * true
             */
            public: boolean;
            https_certificate?: /* Pages Https Certificate */ PagesHttpsCertificate;
            /**
             * Whether https is enabled on the domain
             * example:
             * true
             */
            https_enforced?: boolean;
        }
        /**
         * Page Build
         * Page Build
         */
        export interface PageBuild {
            url: string; // uri
            status: string;
            error: {
                message: string | null;
            };
            pusher: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            commit: string;
            duration: number;
            created_at: string; // date-time
            updated_at: string; // date-time
        }
        /**
         * Page Build Status
         * Page Build Status
         */
        export interface PageBuildStatus {
            /**
             * example:
             * https://api.github.com/repos/github/hello-world/pages/builds/latest
             */
            url: string; // uri
            /**
             * example:
             * queued
             */
            status: string;
        }
        /**
         * Pages Health Check Status
         * Pages Health Check Status
         */
        export interface PagesHealthCheck {
            domain?: {
                host?: string;
                uri?: string;
                nameservers?: string;
                dns_resolves?: boolean;
                is_proxied?: boolean | null;
                is_cloudflare_ip?: boolean | null;
                is_fastly_ip?: boolean | null;
                is_old_ip_address?: boolean | null;
                is_a_record?: boolean | null;
                has_cname_record?: boolean | null;
                has_mx_records_present?: boolean | null;
                is_valid_domain?: boolean;
                is_apex_domain?: boolean;
                should_be_a_record?: boolean | null;
                is_cname_to_github_user_domain?: boolean | null;
                is_cname_to_pages_dot_github_dot_com?: boolean | null;
                is_cname_to_fastly?: boolean | null;
                is_pointed_to_github_pages_ip?: boolean | null;
                is_non_github_pages_ip_present?: boolean | null;
                is_pages_domain?: boolean;
                is_served_by_pages?: boolean | null;
                is_valid?: boolean;
                reason?: string | null;
                responds_to_https?: boolean;
                enforces_https?: boolean;
                https_error?: string | null;
                is_https_eligible?: boolean | null;
                caa_error?: string | null;
            };
            alt_domain?: {
                host?: string;
                uri?: string;
                nameservers?: string;
                dns_resolves?: boolean;
                is_proxied?: boolean | null;
                is_cloudflare_ip?: boolean | null;
                is_fastly_ip?: boolean | null;
                is_old_ip_address?: boolean | null;
                is_a_record?: boolean | null;
                has_cname_record?: boolean | null;
                has_mx_records_present?: boolean | null;
                is_valid_domain?: boolean;
                is_apex_domain?: boolean;
                should_be_a_record?: boolean | null;
                is_cname_to_github_user_domain?: boolean | null;
                is_cname_to_pages_dot_github_dot_com?: boolean | null;
                is_cname_to_fastly?: boolean | null;
                is_pointed_to_github_pages_ip?: boolean | null;
                is_non_github_pages_ip_present?: boolean | null;
                is_pages_domain?: boolean;
                is_served_by_pages?: boolean | null;
                is_valid?: boolean;
                reason?: string | null;
                responds_to_https?: boolean;
                enforces_https?: boolean;
                https_error?: string | null;
                is_https_eligible?: boolean | null;
                caa_error?: string | null;
            } | null;
        }
        /**
         * Pages Https Certificate
         */
        export interface PagesHttpsCertificate {
            /**
             * example:
             * approved
             */
            state: "new" | "authorization_created" | "authorization_pending" | "authorized" | "authorization_revoked" | "issued" | "uploaded" | "approved" | "errored" | "bad_authz" | "destroy_pending" | "dns_changed";
            /**
             * example:
             * Certificate is approved
             */
            description: string;
            /**
             * Array of the domain set and its alternate name (if it is configured)
             * example:
             * [
             *   "example.com",
             *   "www.example.com"
             * ]
             */
            domains: string[];
            expires_at?: string; // date
        }
        /**
         * Pages Source Hash
         */
        export interface PagesSourceHash {
            branch: string;
            path: string;
        }
        /**
         * Participation Stats
         */
        export interface ParticipationStats {
            all: number[];
            owner: number[];
        }
        /**
         * Pending Deployment
         * Details of a deployment that is waiting for protection rules to pass
         */
        export interface PendingDeployment {
            environment: {
                /**
                 * The id of the environment.
                 * example:
                 * 56780428
                 */
                id?: number;
                /**
                 * example:
                 * MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
                 */
                node_id?: string;
                /**
                 * The name of the environment.
                 * example:
                 * staging
                 */
                name?: string;
                /**
                 * example:
                 * https://api.github.com/repos/github/hello-world/environments/staging
                 */
                url?: string;
                /**
                 * example:
                 * https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
                 */
                html_url?: string;
            };
            /**
             * The set duration of the wait timer
             * example:
             * 30
             */
            wait_timer: number;
            /**
             * The time that the wait timer began.
             * example:
             * 2020-11-23T22:00:40Z
             */
            wait_timer_started_at: string | null; // date-time
            /**
             * Whether the currently authenticated user can approve the deployment
             * example:
             * true
             */
            current_user_can_approve: boolean;
            /**
             * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
             */
            reviewers: {
                type?: /**
                 * The type of reviewer. Must be one of: `User` or `Team`
                 * example:
                 * User
                 */
                DeploymentReviewerType;
                reviewer?: /**
                 * Simple User
                 * Simple User
                 */
                SimpleUser | /**
                 * Team
                 * Groups of organization members that gives permissions on specified repositories.
                 */
                Team;
            }[];
        }
        /**
         * Porter Author
         * Porter Author
         */
        export interface PorterAuthor {
            id: number;
            remote_id: string;
            remote_name: string;
            email: string;
            name: string;
            url: string; // uri
            import_url: string; // uri
        }
        /**
         * Porter Large File
         * Porter Large File
         */
        export interface PorterLargeFile {
            ref_name: string;
            path: string;
            oid: string;
            size: number;
        }
        /**
         * Private User
         * Private User
         */
        export interface PrivateUser {
            /**
             * example:
             * octocat
             */
            login: string;
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDQ6VXNlcjE=
             */
            node_id: string;
            /**
             * example:
             * https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string; // uri
            /**
             * example:
             * 41d064eb2195891e12d0413f63227ea7
             */
            gravatar_id: string | null;
            /**
             * example:
             * https://api.github.com/users/octocat
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/followers
             */
            followers_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/following{/other_user}
             */
            following_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/gists{/gist_id}
             */
            gists_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/starred{/owner}{/repo}
             */
            starred_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/orgs
             */
            organizations_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/repos
             */
            repos_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/events{/privacy}
             */
            events_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/received_events
             */
            received_events_url: string; // uri
            /**
             * example:
             * User
             */
            type: string;
            site_admin: boolean;
            /**
             * example:
             * monalisa octocat
             */
            name: string | null;
            /**
             * example:
             * GitHub
             */
            company: string | null;
            /**
             * example:
             * https://github.com/blog
             */
            blog: string | null;
            /**
             * example:
             * San Francisco
             */
            location: string | null;
            /**
             * example:
             * octocat@github.com
             */
            email: string | null; // email
            hireable: boolean | null;
            /**
             * example:
             * There once was...
             */
            bio: string | null;
            /**
             * example:
             * monalisa
             */
            twitter_username?: string | null;
            /**
             * example:
             * 2
             */
            public_repos: number;
            /**
             * example:
             * 1
             */
            public_gists: number;
            /**
             * example:
             * 20
             */
            followers: number;
            /**
             * example:
             * 0
             */
            following: number;
            /**
             * example:
             * 2008-01-14T04:33:35Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2008-01-14T04:33:35Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 81
             */
            private_gists: number;
            /**
             * example:
             * 100
             */
            total_private_repos: number;
            /**
             * example:
             * 100
             */
            owned_private_repos: number;
            /**
             * example:
             * 10000
             */
            disk_usage: number;
            /**
             * example:
             * 8
             */
            collaborators: number;
            /**
             * example:
             * true
             */
            two_factor_authentication: boolean;
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            suspended_at?: string | null; // date-time
            business_plus?: boolean;
            ldap_dn?: string;
        }
        /**
         * Project
         * Projects are a way to organize columns and cards of work.
         */
        export interface Project {
            /**
             * example:
             * https://api.github.com/repos/api-playground/projects-test
             */
            owner_url: string; // uri
            /**
             * example:
             * https://api.github.com/projects/1002604
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/api-playground/projects-test/projects/12
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/projects/1002604/columns
             */
            columns_url: string; // uri
            /**
             * example:
             * 1002604
             */
            id: number;
            /**
             * example:
             * MDc6UHJvamVjdDEwMDI2MDQ=
             */
            node_id: string;
            /**
             * Name of the project
             * example:
             * Week One Sprint
             */
            name: string;
            /**
             * Body of the project
             * example:
             * This project represents the sprint of the first week in January
             */
            body: string | null;
            /**
             * example:
             * 1
             */
            number: number;
            /**
             * State of the project; either 'open' or 'closed'
             * example:
             * open
             */
            state: string;
            creator: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 2011-04-10T20:09:31Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2014-03-03T18:58:10Z
             */
            updated_at: string; // date-time
            /**
             * The baseline permission that all organization members have on this project. Only present if owner is an organization.
             */
            organization_permission?: "read" | "write" | "admin" | "none";
            /**
             * Whether or not this project can be seen by everyone. Only present if owner is an organization.
             */
            private?: boolean;
        }
        /**
         * Project Card
         * Project cards represent a scope of work.
         */
        export interface ProjectCard {
            /**
             * example:
             * https://api.github.com/projects/columns/cards/1478
             */
            url: string; // uri
            /**
             * The project card's ID
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDExOlByb2plY3RDYXJkMTQ3OA==
             */
            node_id: string;
            /**
             * example:
             * Add payload for delete Project column
             */
            note: string | null;
            creator: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 2016-09-05T14:21:06Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2016-09-05T14:20:22Z
             */
            updated_at: string; // date-time
            /**
             * Whether or not the card is archived
             * example:
             * false
             */
            archived?: boolean;
            column_name?: string;
            project_id?: string;
            /**
             * example:
             * https://api.github.com/projects/columns/367
             */
            column_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/api-playground/projects-test/issues/3
             */
            content_url?: string; // uri
            /**
             * example:
             * https://api.github.com/projects/120
             */
            project_url: string; // uri
        }
        /**
         * Project Collaborator Permission
         * Project Collaborator Permission
         */
        export interface ProjectCollaboratorPermission {
            permission: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
        }
        /**
         * Project Column
         * Project columns contain cards of work.
         */
        export interface ProjectColumn {
            /**
             * example:
             * https://api.github.com/projects/columns/367
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/projects/120
             */
            project_url: string; // uri
            /**
             * example:
             * https://api.github.com/projects/columns/367/cards
             */
            cards_url: string; // uri
            /**
             * The unique identifier of the project column
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDEzOlByb2plY3RDb2x1bW4zNjc=
             */
            node_id: string;
            /**
             * Name of the project column
             * example:
             * Remaining tasks
             */
            name: string;
            /**
             * example:
             * 2016-09-05T14:18:44Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2016-09-05T14:22:28Z
             */
            updated_at: string; // date-time
        }
        /**
         * Protected Branch
         * Branch protections protect branches
         */
        export interface ProtectedBranch {
            url: string; // uri
            required_status_checks?: /**
             * Status Check Policy
             * Status Check Policy
             */
            StatusCheckPolicy;
            required_pull_request_reviews?: {
                url: string; // uri
                dismiss_stale_reviews?: boolean;
                require_code_owner_reviews?: boolean;
                required_approving_review_count?: number;
                dismissal_restrictions?: {
                    url: string; // uri
                    users_url: string; // uri
                    teams_url: string; // uri
                    users: /**
                     * Simple User
                     * Simple User
                     */
                    SimpleUser[];
                    teams: /**
                     * Team
                     * Groups of organization members that gives permissions on specified repositories.
                     */
                    Team[];
                };
                bypass_pull_request_allowances?: {
                    users: /**
                     * Simple User
                     * Simple User
                     */
                    SimpleUser[];
                    teams: /**
                     * Team
                     * Groups of organization members that gives permissions on specified repositories.
                     */
                    Team[];
                };
            };
            required_signatures?: {
                /**
                 * example:
                 * https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
                 */
                url: string; // uri
                /**
                 * example:
                 * true
                 */
                enabled: boolean;
            };
            enforce_admins?: {
                url: string; // uri
                enabled: boolean;
            };
            required_linear_history?: {
                enabled: boolean;
            };
            allow_force_pushes?: {
                enabled: boolean;
            };
            allow_deletions?: {
                enabled: boolean;
            };
            restrictions?: /**
             * Branch Restriction Policy
             * Branch Restriction Policy
             */
            BranchRestrictionPolicy;
            required_conversation_resolution?: {
                enabled?: boolean;
            };
            block_creations?: {
                enabled: boolean;
            };
        }
        /**
         * Protected Branch Admin Enforced
         * Protected Branch Admin Enforced
         */
        export interface ProtectedBranchAdminEnforced {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
             */
            url: string; // uri
            /**
             * example:
             * true
             */
            enabled: boolean;
        }
        /**
         * Protected Branch Pull Request Review
         * Protected Branch Pull Request Review
         */
        export interface ProtectedBranchPullRequestReview {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
             */
            url?: string; // uri
            dismissal_restrictions?: {
                /**
                 * The list of users with review dismissal access.
                 */
                users?: /**
                 * Simple User
                 * Simple User
                 */
                SimpleUser[];
                /**
                 * The list of teams with review dismissal access.
                 */
                teams?: /**
                 * Team
                 * Groups of organization members that gives permissions on specified repositories.
                 */
                Team[];
                /**
                 * example:
                 * "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"
                 */
                url?: string;
                /**
                 * example:
                 * "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"
                 */
                users_url?: string;
                /**
                 * example:
                 * "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"
                 */
                teams_url?: string;
            };
            /**
             * Allow specific users or teams to bypass pull request requirements.
             */
            bypass_pull_request_allowances?: {
                /**
                 * The list of users allowed to bypass pull request requirements.
                 */
                users?: /**
                 * Simple User
                 * Simple User
                 */
                SimpleUser[];
                /**
                 * The list of teams allowed to bypass pull request requirements.
                 */
                teams?: /**
                 * Team
                 * Groups of organization members that gives permissions on specified repositories.
                 */
                Team[];
            };
            /**
             * example:
             * true
             */
            dismiss_stale_reviews: boolean;
            /**
             * example:
             * true
             */
            require_code_owner_reviews: boolean;
            /**
             * example:
             * 2
             */
            required_approving_review_count?: number;
        }
        /**
         * Protected Branch Required Status Check
         * Protected Branch Required Status Check
         */
        export interface ProtectedBranchRequiredStatusCheck {
            url?: string;
            enforcement_level?: string;
            contexts: string[];
            checks: {
                context: string;
                app_id: null | number;
            }[];
            contexts_url?: string;
            strict?: boolean;
        }
        /**
         * Public User
         * Public User
         */
        export interface PublicUser {
            login: string;
            id: number;
            node_id: string;
            avatar_url: string; // uri
            gravatar_id: string | null;
            url: string; // uri
            html_url: string; // uri
            followers_url: string; // uri
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string; // uri
            organizations_url: string; // uri
            repos_url: string; // uri
            events_url: string;
            received_events_url: string; // uri
            type: string;
            site_admin: boolean;
            name: string | null;
            company: string | null;
            blog: string | null;
            location: string | null;
            email: string | null; // email
            hireable: boolean | null;
            bio: string | null;
            twitter_username?: string | null;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            created_at: string; // date-time
            updated_at: string; // date-time
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            suspended_at?: string | null; // date-time
            /**
             * example:
             * 1
             */
            private_gists?: number;
            /**
             * example:
             * 2
             */
            total_private_repos?: number;
            /**
             * example:
             * 2
             */
            owned_private_repos?: number;
            /**
             * example:
             * 1
             */
            disk_usage?: number;
            /**
             * example:
             * 3
             */
            collaborators?: number;
        }
        /**
         * Pull Request
         * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
         */
        export interface PullRequest {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1347
             */
            url: string; // uri
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDExOlB1bGxSZXF1ZXN0MQ==
             */
            node_id: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/1347
             */
            html_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/1347.diff
             */
            diff_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/1347.patch
             */
            patch_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/issues/1347
             */
            issue_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
             */
            commits_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
             */
            review_comments_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
             */
            review_comment_url: string;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
             */
            comments_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            statuses_url: string; // uri
            /**
             * Number uniquely identifying the pull request within its repository.
             * example:
             * 42
             */
            number: number;
            /**
             * State of this Pull Request. Either `open` or `closed`.
             * example:
             * open
             */
            state: "open" | "closed";
            /**
             * example:
             * true
             */
            locked: boolean;
            /**
             * The title of the pull request.
             * example:
             * Amazing new feature
             */
            title: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * Please pull these awesome changes
             */
            body: string | null;
            labels: {
                id: number; // int64
                node_id: string;
                url: string;
                name: string;
                description: string | null;
                color: string;
                default: boolean;
            }[];
            milestone: /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            NullableMilestone;
            /**
             * example:
             * too heated
             */
            active_lock_reason?: string | null;
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            closed_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            merged_at: string | null; // date-time
            /**
             * example:
             * e5bd3914e2e596debea16f433f57875b5b90bcd6
             */
            merge_commit_sha: string | null;
            assignee: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            assignees?: /**
             * Simple User
             * Simple User
             */
            SimpleUser[] | null;
            requested_reviewers?: /**
             * Simple User
             * Simple User
             */
            SimpleUser[] | null;
            requested_teams?: /**
             * Team Simple
             * Groups of organization members that gives permissions on specified repositories.
             */
            TeamSimple[] | null;
            head: {
                label: string;
                ref: string;
                repo: {
                    archive_url: string;
                    assignees_url: string;
                    blobs_url: string;
                    branches_url: string;
                    collaborators_url: string;
                    comments_url: string;
                    commits_url: string;
                    compare_url: string;
                    contents_url: string;
                    contributors_url: string; // uri
                    deployments_url: string; // uri
                    description: string | null;
                    downloads_url: string; // uri
                    events_url: string; // uri
                    fork: boolean;
                    forks_url: string; // uri
                    full_name: string;
                    git_commits_url: string;
                    git_refs_url: string;
                    git_tags_url: string;
                    hooks_url: string; // uri
                    html_url: string; // uri
                    id: number;
                    node_id: string;
                    issue_comment_url: string;
                    issue_events_url: string;
                    issues_url: string;
                    keys_url: string;
                    labels_url: string;
                    languages_url: string; // uri
                    merges_url: string; // uri
                    milestones_url: string;
                    name: string;
                    notifications_url: string;
                    owner: {
                        avatar_url: string; // uri
                        events_url: string;
                        followers_url: string; // uri
                        following_url: string;
                        gists_url: string;
                        gravatar_id: string | null;
                        html_url: string; // uri
                        id: number;
                        node_id: string;
                        login: string;
                        organizations_url: string; // uri
                        received_events_url: string; // uri
                        repos_url: string; // uri
                        site_admin: boolean;
                        starred_url: string;
                        subscriptions_url: string; // uri
                        type: string;
                        url: string; // uri
                    };
                    private: boolean;
                    pulls_url: string;
                    releases_url: string;
                    stargazers_url: string; // uri
                    statuses_url: string;
                    subscribers_url: string; // uri
                    subscription_url: string; // uri
                    tags_url: string; // uri
                    teams_url: string; // uri
                    trees_url: string;
                    url: string; // uri
                    clone_url: string;
                    default_branch: string;
                    forks: number;
                    forks_count: number;
                    git_url: string;
                    has_downloads: boolean;
                    has_issues: boolean;
                    has_projects: boolean;
                    has_wiki: boolean;
                    has_pages: boolean;
                    homepage: string | null; // uri
                    language: string | null;
                    master_branch?: string;
                    archived: boolean;
                    disabled: boolean;
                    /**
                     * The repository visibility: public, private, or internal.
                     */
                    visibility?: string;
                    mirror_url: string | null; // uri
                    open_issues: number;
                    open_issues_count: number;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        push: boolean;
                        triage?: boolean;
                        pull: boolean;
                    };
                    temp_clone_token?: string;
                    allow_merge_commit?: boolean;
                    allow_squash_merge?: boolean;
                    allow_rebase_merge?: boolean;
                    license: {
                        key: string;
                        name: string;
                        url: string | null; // uri
                        spdx_id: string | null;
                        node_id: string;
                    } | null;
                    pushed_at: string; // date-time
                    size: number;
                    ssh_url: string;
                    stargazers_count: number;
                    svn_url: string; // uri
                    topics?: string[];
                    watchers: number;
                    watchers_count: number;
                    created_at: string; // date-time
                    updated_at: string; // date-time
                    allow_forking?: boolean;
                    is_template?: boolean;
                } | null;
                sha: string;
                user: {
                    avatar_url: string; // uri
                    events_url: string;
                    followers_url: string; // uri
                    following_url: string;
                    gists_url: string;
                    gravatar_id: string | null;
                    html_url: string; // uri
                    id: number;
                    node_id: string;
                    login: string;
                    organizations_url: string; // uri
                    received_events_url: string; // uri
                    repos_url: string; // uri
                    site_admin: boolean;
                    starred_url: string;
                    subscriptions_url: string; // uri
                    type: string;
                    url: string; // uri
                };
            };
            base: {
                label: string;
                ref: string;
                repo: {
                    archive_url: string;
                    assignees_url: string;
                    blobs_url: string;
                    branches_url: string;
                    collaborators_url: string;
                    comments_url: string;
                    commits_url: string;
                    compare_url: string;
                    contents_url: string;
                    contributors_url: string; // uri
                    deployments_url: string; // uri
                    description: string | null;
                    downloads_url: string; // uri
                    events_url: string; // uri
                    fork: boolean;
                    forks_url: string; // uri
                    full_name: string;
                    git_commits_url: string;
                    git_refs_url: string;
                    git_tags_url: string;
                    hooks_url: string; // uri
                    html_url: string; // uri
                    id: number;
                    is_template?: boolean;
                    node_id: string;
                    issue_comment_url: string;
                    issue_events_url: string;
                    issues_url: string;
                    keys_url: string;
                    labels_url: string;
                    languages_url: string; // uri
                    merges_url: string; // uri
                    milestones_url: string;
                    name: string;
                    notifications_url: string;
                    owner: {
                        avatar_url: string; // uri
                        events_url: string;
                        followers_url: string; // uri
                        following_url: string;
                        gists_url: string;
                        gravatar_id: string | null;
                        html_url: string; // uri
                        id: number;
                        node_id: string;
                        login: string;
                        organizations_url: string; // uri
                        received_events_url: string; // uri
                        repos_url: string; // uri
                        site_admin: boolean;
                        starred_url: string;
                        subscriptions_url: string; // uri
                        type: string;
                        url: string; // uri
                    };
                    private: boolean;
                    pulls_url: string;
                    releases_url: string;
                    stargazers_url: string; // uri
                    statuses_url: string;
                    subscribers_url: string; // uri
                    subscription_url: string; // uri
                    tags_url: string; // uri
                    teams_url: string; // uri
                    trees_url: string;
                    url: string; // uri
                    clone_url: string;
                    default_branch: string;
                    forks: number;
                    forks_count: number;
                    git_url: string;
                    has_downloads: boolean;
                    has_issues: boolean;
                    has_projects: boolean;
                    has_wiki: boolean;
                    has_pages: boolean;
                    homepage: string | null; // uri
                    language: string | null;
                    master_branch?: string;
                    archived: boolean;
                    disabled: boolean;
                    /**
                     * The repository visibility: public, private, or internal.
                     */
                    visibility?: string;
                    mirror_url: string | null; // uri
                    open_issues: number;
                    open_issues_count: number;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        push: boolean;
                        triage?: boolean;
                        pull: boolean;
                    };
                    temp_clone_token?: string;
                    allow_merge_commit?: boolean;
                    allow_squash_merge?: boolean;
                    allow_rebase_merge?: boolean;
                    license: /**
                     * License Simple
                     * License Simple
                     */
                    NullableLicenseSimple;
                    pushed_at: string; // date-time
                    size: number;
                    ssh_url: string;
                    stargazers_count: number;
                    svn_url: string; // uri
                    topics?: string[];
                    watchers: number;
                    watchers_count: number;
                    created_at: string; // date-time
                    updated_at: string; // date-time
                    allow_forking?: boolean;
                };
                sha: string;
                user: {
                    avatar_url: string; // uri
                    events_url: string;
                    followers_url: string; // uri
                    following_url: string;
                    gists_url: string;
                    gravatar_id: string | null;
                    html_url: string; // uri
                    id: number;
                    node_id: string;
                    login: string;
                    organizations_url: string; // uri
                    received_events_url: string; // uri
                    repos_url: string; // uri
                    site_admin: boolean;
                    starred_url: string;
                    subscriptions_url: string; // uri
                    type: string;
                    url: string; // uri
                };
            };
            _links: {
                comments: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                commits: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                statuses: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                html: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                issue: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                review_comments: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                review_comment: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                self: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
            };
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            auto_merge: /**
             * Auto merge
             * The status of auto merging a pull request.
             */
            AutoMerge;
            /**
             * Indicates whether or not the pull request is a draft.
             * example:
             * false
             */
            draft?: boolean;
            merged: boolean;
            /**
             * example:
             * true
             */
            mergeable: boolean | null;
            /**
             * example:
             * true
             */
            rebaseable?: boolean | null;
            /**
             * example:
             * clean
             */
            mergeable_state: string;
            merged_by: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * 10
             */
            comments: number;
            /**
             * example:
             * 0
             */
            review_comments: number;
            /**
             * Indicates whether maintainers can modify the pull request.
             * example:
             * true
             */
            maintainer_can_modify: boolean;
            /**
             * example:
             * 3
             */
            commits: number;
            /**
             * example:
             * 100
             */
            additions: number;
            /**
             * example:
             * 3
             */
            deletions: number;
            /**
             * example:
             * 5
             */
            changed_files: number;
        }
        /**
         * Pull Request Merge Result
         * Pull Request Merge Result
         */
        export interface PullRequestMergeResult {
            sha: string;
            merged: boolean;
            message: string;
        }
        /**
         * Pull Request Minimal
         */
        export interface PullRequestMinimal {
            id: number;
            number: number;
            url: string;
            head: {
                ref: string;
                sha: string;
                repo: {
                    id: number;
                    url: string;
                    name: string;
                };
            };
            base: {
                ref: string;
                sha: string;
                repo: {
                    id: number;
                    url: string;
                    name: string;
                };
            };
        }
        /**
         * Pull Request Review
         * Pull Request Reviews are reviews on pull requests.
         */
        export interface PullRequestReview {
            /**
             * Unique identifier of the review
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
             */
            node_id: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The text of the review.
             * example:
             * This looks great.
             */
            body: string;
            /**
             * example:
             * CHANGES_REQUESTED
             */
            state: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/12
             */
            pull_request_url: string; // uri
            _links: {
                html: {
                    href: string;
                };
                pull_request: {
                    href: string;
                };
            };
            submitted_at?: string; // date-time
            /**
             * A commit SHA for the review.
             * example:
             * 54bb654c9e6025347f57900a4a5c2313a96b8035
             */
            commit_id: string;
            body_html?: string;
            body_text?: string;
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
        }
        /**
         * Pull Request Review Comment
         * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
         */
        export interface PullRequestReviewComment {
            /**
             * URL for the pull request review comment
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
             */
            url: string;
            /**
             * The ID of the pull request review to which the comment belongs.
             * example:
             * 42
             */
            pull_request_review_id: null | number;
            /**
             * The ID of the pull request review comment.
             * example:
             * 1
             */
            id: number;
            /**
             * The node ID of the pull request review comment.
             * example:
             * MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
             */
            node_id: string;
            /**
             * The diff of the line that the comment refers to.
             * example:
             * @@ -16,33 +16,40 @@ public class Connection : IConnection...
             */
            diff_hunk: string;
            /**
             * The relative path of the file to which the comment applies.
             * example:
             * config/database.yaml
             */
            path: string;
            /**
             * The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
             * example:
             * 1
             */
            position: number;
            /**
             * The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
             * example:
             * 4
             */
            original_position: number;
            /**
             * The SHA of the commit to which the comment applies.
             * example:
             * 6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            commit_id: string;
            /**
             * The SHA of the original commit to which the comment applies.
             * example:
             * 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
             */
            original_commit_id: string;
            /**
             * The comment ID to reply to.
             * example:
             * 8
             */
            in_reply_to_id?: number;
            user: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * The text of the comment.
             * example:
             * We should probably include a check for null values here.
             */
            body: string;
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            updated_at: string; // date-time
            /**
             * HTML URL for the pull request review comment.
             * example:
             * https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
             */
            html_url: string; // uri
            /**
             * URL for the pull request that the review comment belongs to.
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1
             */
            pull_request_url: string; // uri
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            _links: {
                self: {
                    /**
                     * example:
                     * https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
                     */
                    href: string; // uri
                };
                html: {
                    /**
                     * example:
                     * https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
                     */
                    href: string; // uri
                };
                pull_request: {
                    /**
                     * example:
                     * https://api.github.com/repos/octocat/Hello-World/pulls/1
                     */
                    href: string; // uri
                };
            };
            /**
             * The first line of the range for a multi-line comment.
             * example:
             * 2
             */
            start_line?: null | number;
            /**
             * The first line of the range for a multi-line comment.
             * example:
             * 2
             */
            original_start_line?: null | number;
            /**
             * The side of the first line of the range for a multi-line comment.
             */
            start_side?: "LEFT" | "RIGHT";
            /**
             * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * example:
             * 2
             */
            line?: number;
            /**
             * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * example:
             * 2
             */
            original_line?: number;
            /**
             * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
             */
            side?: "LEFT" | "RIGHT";
            reactions?: /* Reaction Rollup */ ReactionRollup;
            /**
             * example:
             * "<p>comment body</p>"
             */
            body_html?: string;
            /**
             * example:
             * "comment body"
             */
            body_text?: string;
        }
        /**
         * Pull Request Review Request
         * Pull Request Review Request
         */
        export interface PullRequestReviewRequest {
            users: /**
             * Simple User
             * Simple User
             */
            SimpleUser[];
            teams: /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            Team[];
        }
        /**
         * Pull Request Simple
         * Pull Request Simple
         */
        export interface PullRequestSimple {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1347
             */
            url: string; // uri
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDExOlB1bGxSZXF1ZXN0MQ==
             */
            node_id: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/1347
             */
            html_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/1347.diff
             */
            diff_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/1347.patch
             */
            patch_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/issues/1347
             */
            issue_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
             */
            commits_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
             */
            review_comments_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
             */
            review_comment_url: string;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
             */
            comments_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            statuses_url: string; // uri
            /**
             * example:
             * 1347
             */
            number: number;
            /**
             * example:
             * open
             */
            state: string;
            /**
             * example:
             * true
             */
            locked: boolean;
            /**
             * example:
             * new-feature
             */
            title: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * Please pull these awesome changes
             */
            body: string | null;
            labels: {
                id: number; // int64
                node_id: string;
                url: string;
                name: string;
                description: string;
                color: string;
                default: boolean;
            }[];
            milestone: /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            NullableMilestone;
            /**
             * example:
             * too heated
             */
            active_lock_reason?: string | null;
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            closed_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            merged_at: string | null; // date-time
            /**
             * example:
             * e5bd3914e2e596debea16f433f57875b5b90bcd6
             */
            merge_commit_sha: string | null;
            assignee: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            assignees?: /**
             * Simple User
             * Simple User
             */
            SimpleUser[] | null;
            requested_reviewers?: /**
             * Simple User
             * Simple User
             */
            SimpleUser[] | null;
            requested_teams?: /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            Team[] | null;
            head: {
                label: string;
                ref: string;
                repo: /**
                 * Repository
                 * A git repository
                 */
                Repository;
                sha: string;
                user: /**
                 * Simple User
                 * Simple User
                 */
                NullableSimpleUser;
            };
            base: {
                label: string;
                ref: string;
                repo: /**
                 * Repository
                 * A git repository
                 */
                Repository;
                sha: string;
                user: /**
                 * Simple User
                 * Simple User
                 */
                NullableSimpleUser;
            };
            _links: {
                comments: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                commits: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                statuses: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                html: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                issue: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                review_comments: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                review_comment: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                self: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
            };
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            auto_merge: /**
             * Auto merge
             * The status of auto merging a pull request.
             */
            AutoMerge;
            /**
             * Indicates whether or not the pull request is a draft.
             * example:
             * false
             */
            draft?: boolean;
        }
        /**
         * Rate Limit
         */
        export interface RateLimit {
            limit: number;
            remaining: number;
            reset: number;
            used: number;
        }
        /**
         * Rate Limit Overview
         * Rate Limit Overview
         */
        export interface RateLimitOverview {
            resources: {
                core: /* Rate Limit */ RateLimit;
                graphql?: /* Rate Limit */ RateLimit;
                search: /* Rate Limit */ RateLimit;
                source_import?: /* Rate Limit */ RateLimit;
                integration_manifest?: /* Rate Limit */ RateLimit;
                code_scanning_upload?: /* Rate Limit */ RateLimit;
                actions_runner_registration?: /* Rate Limit */ RateLimit;
                scim?: /* Rate Limit */ RateLimit;
            };
            rate: /* Rate Limit */ RateLimit;
        }
        /**
         * Reaction
         * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
         */
        export interface Reaction {
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDg6UmVhY3Rpb24x
             */
            node_id: string;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The reaction to use
             * example:
             * heart
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
            /**
             * example:
             * 2016-05-20T20:09:31Z
             */
            created_at: string; // date-time
        }
        /**
         * Reaction Rollup
         */
        export interface ReactionRollup {
            url: string; // uri
            total_count: number;
            "+1": number;
            "-1": number;
            laugh: number;
            confused: number;
            heart: number;
            hooray: number;
            eyes: number;
            rocket: number;
        }
        /**
         * Referrer Traffic
         * Referrer Traffic
         */
        export interface ReferrerTraffic {
            /**
             * example:
             * Google
             */
            referrer: string;
            /**
             * example:
             * 4
             */
            count: number;
            /**
             * example:
             * 3
             */
            uniques: number;
        }
        /**
         * Release
         * A release.
         */
        export interface Release {
            url: string; // uri
            html_url: string; // uri
            assets_url: string; // uri
            upload_url: string;
            tarball_url: string | null; // uri
            zipball_url: string | null; // uri
            id: number;
            node_id: string;
            /**
             * The name of the tag.
             * example:
             * v1.0.0
             */
            tag_name: string;
            /**
             * Specifies the commitish value that determines where the Git tag is created from.
             * example:
             * master
             */
            target_commitish: string;
            name: string | null;
            body?: string | null;
            /**
             * true to create a draft (unpublished) release, false to create a published one.
             * example:
             * false
             */
            draft: boolean;
            /**
             * Whether to identify the release as a prerelease or a full release.
             * example:
             * false
             */
            prerelease: boolean;
            created_at: string; // date-time
            published_at: string | null; // date-time
            author: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            assets: /**
             * Release Asset
             * Data related to a release.
             */
            ReleaseAsset[];
            body_html?: string;
            body_text?: string;
            mentions_count?: number;
            /**
             * The URL of the release discussion.
             */
            discussion_url?: string; // uri
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Release Asset
         * Data related to a release.
         */
        export interface ReleaseAsset {
            url: string; // uri
            browser_download_url: string; // uri
            id: number;
            node_id: string;
            /**
             * The file name of the asset.
             * example:
             * Team Environment
             */
            name: string;
            label: string | null;
            /**
             * State of the release asset.
             */
            state: "uploaded" | "open";
            content_type: string;
            size: number;
            download_count: number;
            created_at: string; // date-time
            updated_at: string; // date-time
            uploader: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
        }
        /**
         * Generated Release Notes Content
         * Generated name and body describing a release
         */
        export interface ReleaseNotesContent {
            /**
             * The generated name of the release
             * example:
             * Release v1.0.0 is now available!
             */
            name: string;
            /**
             * The generated body describing the contents of the release supporting markdown formatting
             */
            body: string;
        }
        /**
         * Removed from Project Issue Event
         * Removed from Project Issue Event
         */
        export interface RemovedFromProjectIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            project_card?: {
                id: number;
                url: string; // uri
                project_id: number;
                project_url: string; // uri
                column_name: string;
                previous_column_name?: string;
            };
        }
        /**
         * Renamed Issue Event
         * Renamed Issue Event
         */
        export interface RenamedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            rename: {
                from: string;
                to: string;
            };
        }
        /**
         * Codespaces Secret
         * Set repository secrets for GitHub Codespaces.
         */
        export interface RepoCodespacesSecret {
            /**
             * The name of the secret.
             * example:
             * SECRET_TOKEN
             */
            name: string;
            created_at: string; // date-time
            updated_at: string; // date-time
        }
        /**
         * Repo Search Result Item
         * Repo Search Result Item
         */
        export interface RepoSearchResultItem {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            private: boolean;
            html_url: string; // uri
            description: string | null;
            fork: boolean;
            url: string; // uri
            created_at: string; // date-time
            updated_at: string; // date-time
            pushed_at: string; // date-time
            homepage: string | null; // uri
            size: number;
            stargazers_count: number;
            watchers_count: number;
            language: string | null;
            forks_count: number;
            open_issues_count: number;
            master_branch?: string;
            default_branch: string;
            score: number;
            forks_url: string; // uri
            keys_url: string;
            collaborators_url: string;
            teams_url: string; // uri
            hooks_url: string; // uri
            issue_events_url: string;
            events_url: string; // uri
            assignees_url: string;
            branches_url: string;
            tags_url: string; // uri
            blobs_url: string;
            git_tags_url: string;
            git_refs_url: string;
            trees_url: string;
            statuses_url: string;
            languages_url: string; // uri
            stargazers_url: string; // uri
            contributors_url: string; // uri
            subscribers_url: string; // uri
            subscription_url: string; // uri
            commits_url: string;
            git_commits_url: string;
            comments_url: string;
            issue_comment_url: string;
            contents_url: string;
            compare_url: string;
            merges_url: string; // uri
            archive_url: string;
            downloads_url: string; // uri
            issues_url: string;
            pulls_url: string;
            milestones_url: string;
            notifications_url: string;
            labels_url: string;
            releases_url: string;
            deployments_url: string; // uri
            git_url: string;
            ssh_url: string;
            clone_url: string;
            svn_url: string; // uri
            forks: number;
            open_issues: number;
            watchers: number;
            topics?: string[];
            mirror_url: string | null; // uri
            has_issues: boolean;
            has_projects: boolean;
            has_pages: boolean;
            has_wiki: boolean;
            has_downloads: boolean;
            archived: boolean;
            /**
             * Returns whether or not this repository disabled.
             */
            disabled: boolean;
            /**
             * The repository visibility: public, private, or internal.
             */
            visibility?: string;
            license: /**
             * License Simple
             * License Simple
             */
            NullableLicenseSimple;
            permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
            };
            text_matches?: /* Search Result Text Matches */ SearchResultTextMatches;
            temp_clone_token?: string;
            allow_merge_commit?: boolean;
            allow_squash_merge?: boolean;
            allow_rebase_merge?: boolean;
            allow_auto_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_forking?: boolean;
            is_template?: boolean;
        }
        /**
         * Repository
         * A git repository
         */
        export interface Repository {
            /**
             * Unique identifier of the repository
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * The name of the repository.
             * example:
             * Team Environment
             */
            name: string;
            /**
             * example:
             * octocat/Hello-World
             */
            full_name: string;
            license: /**
             * License Simple
             * License Simple
             */
            NullableLicenseSimple;
            organization?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            /**
             * example:
             * https://github.com/octocat/Hello-World
             */
            html_url: string; // uri
            /**
             * example:
             * This your first repo!
             */
            description: string | null;
            fork: boolean;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World
             */
            url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            /**
             * example:
             * git:github.com/octocat/Hello-World.git
             */
            git_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            /**
             * example:
             * git@github.com:octocat/Hello-World.git
             */
            ssh_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World.git
             */
            clone_url: string;
            /**
             * example:
             * git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string; // uri
            /**
             * example:
             * https://svn.github.com/octocat/Hello-World
             */
            svn_url: string; // uri
            /**
             * example:
             * https://github.com
             */
            homepage: string | null; // uri
            language: string | null;
            /**
             * example:
             * 9
             */
            forks_count: number;
            /**
             * example:
             * 80
             */
            stargazers_count: number;
            /**
             * example:
             * 80
             */
            watchers_count: number;
            /**
             * example:
             * 108
             */
            size: number;
            /**
             * The default branch of the repository.
             * example:
             * master
             */
            default_branch: string;
            /**
             * example:
             * 0
             */
            open_issues_count: number;
            /**
             * Whether this repository acts as a template that can be used to generate new repositories.
             * example:
             * true
             */
            is_template?: boolean;
            topics?: string[];
            /**
             * Whether issues are enabled.
             * example:
             * true
             */
            has_issues: boolean;
            /**
             * Whether projects are enabled.
             * example:
             * true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * example:
             * true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * Whether downloads are enabled.
             * example:
             * true
             */
            has_downloads: boolean;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            /**
             * Returns whether or not this repository disabled.
             */
            disabled: boolean;
            /**
             * The repository visibility: public, private, or internal.
             */
            visibility?: string;
            /**
             * example:
             * 2011-01-26T19:06:43Z
             */
            pushed_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:14:43Z
             */
            updated_at: string | null; // date-time
            /**
             * Whether to allow rebase merges for pull requests.
             * example:
             * true
             */
            allow_rebase_merge?: boolean;
            template_repository?: {
                id?: number;
                node_id?: string;
                name?: string;
                full_name?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    avatar_url?: string;
                    gravatar_id?: string;
                    url?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    repos_url?: string;
                    events_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                private?: boolean;
                html_url?: string;
                description?: string;
                fork?: boolean;
                url?: string;
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                downloads_url?: string;
                events_url?: string;
                forks_url?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                notifications_url?: string;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                clone_url?: string;
                mirror_url?: string;
                hooks_url?: string;
                svn_url?: string;
                homepage?: string;
                language?: string;
                forks_count?: number;
                stargazers_count?: number;
                watchers_count?: number;
                size?: number;
                default_branch?: string;
                open_issues_count?: number;
                is_template?: boolean;
                topics?: string[];
                has_issues?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                has_pages?: boolean;
                has_downloads?: boolean;
                archived?: boolean;
                disabled?: boolean;
                visibility?: string;
                pushed_at?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    admin?: boolean;
                    maintain?: boolean;
                    push?: boolean;
                    triage?: boolean;
                    pull?: boolean;
                };
                allow_rebase_merge?: boolean;
                temp_clone_token?: string;
                allow_squash_merge?: boolean;
                allow_auto_merge?: boolean;
                delete_branch_on_merge?: boolean;
                allow_update_branch?: boolean;
                allow_merge_commit?: boolean;
                subscribers_count?: number;
                network_count?: number;
            } | null;
            temp_clone_token?: string;
            /**
             * Whether to allow squash merges for pull requests.
             * example:
             * true
             */
            allow_squash_merge?: boolean;
            /**
             * Whether to allow Auto-merge to be used on pull requests.
             * example:
             * false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to delete head branches when pull requests are merged
             * example:
             * false
             */
            delete_branch_on_merge?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * example:
             * true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow forking this repo
             */
            allow_forking?: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            /**
             * example:
             * "2020-07-09T00:17:42Z"
             */
            starred_at?: string;
        }
        /**
         * Repository Collaborator Permission
         * Repository Collaborator Permission
         */
        export interface RepositoryCollaboratorPermission {
            permission: string;
            /**
             * example:
             * admin
             */
            role_name: string;
            user: /**
             * Collaborator
             * Collaborator
             */
            NullableCollaborator;
        }
        /**
         * Repository Invitation
         * Repository invitations let you manage who you collaborate with.
         */
        export interface RepositoryInvitation {
            /**
             * Unique identifier of the repository invitation.
             * example:
             * 42
             */
            id: number;
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            invitee: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            inviter: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The permission associated with the invitation.
             * example:
             * read
             */
            permissions: "read" | "write" | "admin" | "triage" | "maintain";
            /**
             * example:
             * 2016-06-13T14:52:50-05:00
             */
            created_at: string; // date-time
            /**
             * Whether or not the invitation has expired
             */
            expired?: boolean;
            /**
             * URL for the repository invitation
             * example:
             * https://api.github.com/user/repository-invitations/1
             */
            url: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World/invitations
             */
            html_url: string;
            node_id: string;
        }
        /**
         * Repository Invitation
         * Repository invitations let you manage who you collaborate with.
         */
        export interface RepositorySubscription {
            /**
             * Determines if notifications should be received from this repository.
             * example:
             * true
             */
            subscribed: boolean;
            /**
             * Determines if all notifications should be blocked from this repository.
             */
            ignored: boolean;
            reason: string | null;
            /**
             * example:
             * 2012-10-06T21:34:12Z
             */
            created_at: string; // date-time
            /**
             * example:
             * https://api.github.com/repos/octocat/example/subscription
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/example
             */
            repository_url: string; // uri
        }
        /**
         * Legacy Review Comment
         * Legacy Review Comment
         */
        export interface ReviewComment {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
             */
            url: string; // uri
            /**
             * example:
             * 42
             */
            pull_request_review_id: null | number;
            /**
             * example:
             * 10
             */
            id: number;
            /**
             * example:
             * MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
             */
            node_id: string;
            /**
             * example:
             * @@ -16,33 +16,40 @@ public class Connection : IConnection...
             */
            diff_hunk: string;
            /**
             * example:
             * file1.txt
             */
            path: string;
            /**
             * example:
             * 1
             */
            position: null | number;
            /**
             * example:
             * 4
             */
            original_position: number;
            /**
             * example:
             * 6dcb09b5b57875f334f61aebed695e2e4193db5e
             */
            commit_id: string;
            /**
             * example:
             * 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
             */
            original_commit_id: string;
            /**
             * example:
             * 8
             */
            in_reply_to_id?: number;
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * example:
             * Great stuff
             */
            body: string;
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/1
             */
            pull_request_url: string; // uri
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            _links: {
                self: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                html: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
                pull_request: /**
                 * Link
                 * Hypermedia Link
                 */
                Link;
            };
            body_text?: string;
            body_html?: string;
            reactions?: /* Reaction Rollup */ ReactionRollup;
            /**
             * The side of the first line of the range for a multi-line comment.
             */
            side?: "LEFT" | "RIGHT";
            /**
             * The side of the first line of the range for a multi-line comment.
             */
            start_side?: "LEFT" | "RIGHT";
            /**
             * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * example:
             * 2
             */
            line?: number;
            /**
             * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
             * example:
             * 2
             */
            original_line?: number;
            /**
             * The first line of the range for a multi-line comment.
             * example:
             * 2
             */
            start_line?: null | number;
            /**
             * The original first line of the range for a multi-line comment.
             * example:
             * 2
             */
            original_start_line?: null | number;
        }
        /**
         * Review Dismissed Issue Event
         * Review Dismissed Issue Event
         */
        export interface ReviewDismissedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            dismissed_review: {
                state: string;
                review_id: number;
                dismissal_message: string | null;
                dismissal_commit_id?: string;
            };
        }
        /**
         * Review Request Removed Issue Event
         * Review Request Removed Issue Event
         */
        export interface ReviewRequestRemovedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            review_requester: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            requested_team?: /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            Team;
            requested_reviewer?: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
        }
        /**
         * Review Requested Issue Event
         * Review Requested Issue Event
         */
        export interface ReviewRequestedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            review_requester: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            requested_team?: /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            Team;
            requested_reviewer?: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
        }
        /**
         * Self hosted runners
         * A self hosted runner
         */
        export interface Runner {
            /**
             * The id of the runner.
             * example:
             * 5
             */
            id: number;
            /**
             * The name of the runner.
             * example:
             * iMac
             */
            name: string;
            /**
             * The Operating System of the runner.
             * example:
             * macos
             */
            os: string;
            /**
             * The status of the runner.
             * example:
             * online
             */
            status: string;
            busy: boolean;
            labels: /**
             * Self hosted runner label
             * A label for a self hosted runner
             */
            RunnerLabel[];
        }
        /**
         * Runner Application
         * Runner Application
         */
        export interface RunnerApplication {
            os: string;
            architecture: string;
            download_url: string;
            filename: string;
            /**
             * A short lived bearer token used to download the runner, if needed.
             */
            temp_download_token?: string;
            sha256_checksum?: string;
        }
        export interface RunnerGroupsEnterprise {
            id: number;
            name: string;
            visibility: string;
            default: boolean;
            selected_organizations_url?: string;
            runners_url: string;
            allows_public_repositories: boolean;
            /**
             * If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
             */
            workflow_restrictions_read_only?: boolean;
            /**
             * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
             */
            restricted_to_workflows?: boolean;
            /**
             * List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
             */
            selected_workflows?: string[];
        }
        export interface RunnerGroupsOrg {
            id: number;
            name: string;
            visibility: string;
            default: boolean;
            /**
             * Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
             */
            selected_repositories_url?: string;
            runners_url: string;
            inherited: boolean;
            inherited_allows_public_repositories?: boolean;
            allows_public_repositories: boolean;
            /**
             * If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
             */
            workflow_restrictions_read_only?: boolean;
            /**
             * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
             */
            restricted_to_workflows?: boolean;
            /**
             * List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
             */
            selected_workflows?: string[];
        }
        /**
         * Self hosted runner label
         * A label for a self hosted runner
         */
        export interface RunnerLabel {
            /**
             * Unique identifier of the label.
             */
            id?: number;
            /**
             * Name of the label.
             */
            name: string;
            /**
             * The type of label. Read-only labels are applied automatically when the runner is configured.
             */
            type?: "read-only" | "custom";
        }
        export interface ScimEnterpriseGroup {
            schemas: string[];
            id: string;
            externalId?: string | null;
            displayName?: string;
            members?: {
                value?: string;
                $ref?: string;
                display?: string;
            }[];
            meta?: {
                resourceType?: string;
                created?: string;
                lastModified?: string;
                location?: string;
            };
        }
        export interface ScimEnterpriseUser {
            schemas: string[];
            id: string;
            externalId?: string;
            userName?: string;
            name?: {
                givenName?: string;
                familyName?: string;
            };
            emails?: {
                value?: string;
                type?: string;
                primary?: boolean;
            }[];
            groups?: {
                value?: string;
            }[];
            active?: boolean;
            meta?: {
                resourceType?: string;
                created?: string;
                lastModified?: string;
                location?: string;
            };
        }
        /**
         * Scim Error
         * Scim Error
         */
        export interface ScimError {
            message?: string | null;
            documentation_url?: string | null;
            detail?: string | null;
            status?: number;
            scimType?: string | null;
            schemas?: string[];
        }
        export interface ScimGroupListEnterprise {
            schemas: string[];
            totalResults: number;
            itemsPerPage: number;
            startIndex: number;
            Resources: {
                schemas: string[];
                id: string;
                externalId?: string | null;
                displayName?: string;
                members?: {
                    value?: string;
                    $ref?: string;
                    display?: string;
                }[];
                meta?: {
                    resourceType?: string;
                    created?: string;
                    lastModified?: string;
                    location?: string;
                };
            }[];
        }
        /**
         * SCIM /Users
         * SCIM /Users provisioning endpoints
         */
        export interface ScimUser {
            /**
             * SCIM schema used.
             */
            schemas: [
                string,
                ...string[]
            ];
            /**
             * Unique identifier of an external identity
             * example:
             * 1b78eada-9baa-11e6-9eb6-a431576d590e
             */
            id: string;
            /**
             * The ID of the User.
             * example:
             * a7b0f98395
             */
            externalId: string | null;
            /**
             * Configured by the admin. Could be an email, login, or username
             * example:
             * someone@example.com
             */
            userName: string | null;
            /**
             * The name of the user, suitable for display to end-users
             * example:
             * Jon Doe
             */
            displayName?: string | null;
            /**
             * example:
             * {
             *   "givenName": "Jane",
             *   "familyName": "User"
             * }
             */
            name: {
                givenName: string | null;
                familyName: string | null;
                formatted?: string | null;
            };
            /**
             * user emails
             * example:
             * [
             *   {
             *     "value": "someone@example.com",
             *     "primary": true
             *   },
             *   {
             *     "value": "another@example.com",
             *     "primary": false
             *   }
             * ]
             */
            emails: [
                {
                    value: string;
                    primary?: boolean;
                },
                ...{
                    value: string;
                    primary?: boolean;
                }[]
            ];
            /**
             * The active status of the User.
             * example:
             * true
             */
            active: boolean;
            meta: {
                /**
                 * example:
                 * User
                 */
                resourceType?: string;
                /**
                 * example:
                 * 2019-01-24T22:45:36.000Z
                 */
                created?: string; // date-time
                /**
                 * example:
                 * 2019-01-24T22:45:36.000Z
                 */
                lastModified?: string; // date-time
                /**
                 * example:
                 * https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d
                 */
                location?: string; // uri
            };
            /**
             * The ID of the organization.
             */
            organization_id?: number;
            /**
             * Set of operations to be performed
             * example:
             * [
             *   {
             *     "op": "replace",
             *     "value": {
             *       "active": false
             *     }
             *   }
             * ]
             */
            operations?: [
                {
                    op: "add" | "remove" | "replace";
                    path?: string;
                    value?: string | {
                        [key: string]: any;
                    } | any[];
                },
                ...{
                    op: "add" | "remove" | "replace";
                    path?: string;
                    value?: string | {
                        [key: string]: any;
                    } | any[];
                }[]
            ];
            /**
             * associated groups
             */
            groups?: {
                value?: string;
                display?: string;
            }[];
        }
        /**
         * SCIM User List
         * SCIM User List
         */
        export interface ScimUserList {
            /**
             * SCIM schema used.
             */
            schemas: [
                string,
                ...string[]
            ];
            /**
             * example:
             * 3
             */
            totalResults: number;
            /**
             * example:
             * 10
             */
            itemsPerPage: number;
            /**
             * example:
             * 1
             */
            startIndex: number;
            Resources: /**
             * SCIM /Users
             * SCIM /Users provisioning endpoints
             */
            ScimUser[];
        }
        export interface ScimUserListEnterprise {
            schemas: string[];
            totalResults: number;
            itemsPerPage: number;
            startIndex: number;
            Resources: {
                schemas: string[];
                id: string;
                externalId?: string;
                userName?: string;
                name?: {
                    givenName?: string;
                    familyName?: string;
                };
                emails?: {
                    value?: string;
                    primary?: boolean;
                    type?: string;
                }[];
                groups?: {
                    value?: string;
                }[];
                active?: boolean;
                meta?: {
                    resourceType?: string;
                    created?: string;
                    lastModified?: string;
                    location?: string;
                };
            }[];
        }
        /**
         * Search Result Text Matches
         */
        export type SearchResultTextMatches = {
            object_url?: string;
            object_type?: string | null;
            property?: string;
            fragment?: string;
            matches?: {
                text?: string;
                indices?: number[];
            }[];
        }[];
        export interface SecretScanningAlert {
            number?: /* The security alert number. */ AlertNumber;
            created_at?: /* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertCreatedAt /* date-time */;
            updated_at?: /* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */ AlertUpdatedAt /* date-time */;
            url?: /* The REST API URL of the alert resource. */ AlertUrl /* uri */;
            html_url?: /* The GitHub URL of the alert resource. */ AlertHtmlUrl /* uri */;
            /**
             * The REST API URL of the code locations for this alert.
             */
            locations_url?: string; // uri
            state?: /* Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */ SecretScanningAlertState;
            resolution?: /* **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`. */ SecretScanningAlertResolution;
            /**
             * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            resolved_at?: string | null; // date-time
            resolved_by?: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The type of secret that secret scanning detected.
             */
            secret_type?: string;
            /**
             * User-friendly name for the detected secret, matching the `secret_type`.
             * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
             */
            secret_type_display_name?: string;
            /**
             * The secret that was detected.
             */
            secret?: string;
        }
        /**
         * **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
         */
        export type SecretScanningAlertResolution = null | "false_positive" | "wont_fix" | "revoked" | "used_in_tests";
        /**
         * Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
         */
        export type SecretScanningAlertState = "open" | "resolved";
        export interface SecretScanningLocation {
            /**
             * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
             * example:
             * commit
             */
            type: "commit";
            details: /* Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */ SecretScanningLocationCommit;
        }
        /**
         * Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
         */
        export interface SecretScanningLocationCommit {
            /**
             * The file path in the repository
             * example:
             * /example/secrets.txt
             */
            path: string;
            /**
             * Line number at which the secret starts in the file
             */
            start_line: number;
            /**
             * Line number at which the secret ends in the file
             */
            end_line: number;
            /**
             * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
             */
            start_column: number;
            /**
             * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
             */
            end_column: number;
            /**
             * SHA-1 hash ID of the associated blob
             * example:
             * af5626b4a114abcb82d63db7c8082c3c4756e51b
             */
            blob_sha: string;
            /**
             * The API URL to get the associated blob resource
             */
            blob_url: string;
            /**
             * SHA-1 hash ID of the associated commit
             * example:
             * af5626b4a114abcb82d63db7c8082c3c4756e51b
             */
            commit_sha: string;
            /**
             * The API URL to get the associated commit resource
             */
            commit_url: string;
        }
        export interface SelectedActions {
            /**
             * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
             */
            github_owned_allowed?: boolean;
            /**
             * Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
             */
            verified_allowed?: boolean;
            /**
             * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
             */
            patterns_allowed?: string[];
        }
        /**
         * The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
         */
        export type SelectedActionsUrl = string;
        /**
         * Short Blob
         * Short Blob
         */
        export interface ShortBlob {
            url: string;
            sha: string;
        }
        /**
         * Short Branch
         * Short Branch
         */
        export interface ShortBranch {
            name: string;
            commit: {
                sha: string;
                url: string; // uri
            };
            protected: boolean;
            protection?: /**
             * Branch Protection
             * Branch Protection
             */
            BranchProtection;
            protection_url?: string; // uri
        }
        /**
         * Simple Commit
         * Simple Commit
         */
        export interface SimpleCommit {
            id: string;
            tree_id: string;
            message: string;
            timestamp: string; // date-time
            author: {
                name: string;
                email: string;
            } | null;
            committer: {
                name: string;
                email: string;
            } | null;
        }
        /**
         * Simple Commit Status
         */
        export interface SimpleCommitStatus {
            description: string | null;
            id: number;
            node_id: string;
            state: string;
            context: string;
            target_url: string; // uri
            required?: boolean | null;
            avatar_url: string | null; // uri
            url: string; // uri
            created_at: string; // date-time
            updated_at: string; // date-time
        }
        /**
         * Simple User
         * Simple User
         */
        export interface SimpleUser {
            name?: string | null;
            email?: string | null;
            /**
             * example:
             * octocat
             */
            login: string;
            /**
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDQ6VXNlcjE=
             */
            node_id: string;
            /**
             * example:
             * https://github.com/images/error/octocat_happy.gif
             */
            avatar_url: string; // uri
            /**
             * example:
             * 41d064eb2195891e12d0413f63227ea7
             */
            gravatar_id: string | null;
            /**
             * example:
             * https://api.github.com/users/octocat
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/octocat
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/followers
             */
            followers_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/following{/other_user}
             */
            following_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/gists{/gist_id}
             */
            gists_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/starred{/owner}{/repo}
             */
            starred_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/subscriptions
             */
            subscriptions_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/orgs
             */
            organizations_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/repos
             */
            repos_url: string; // uri
            /**
             * example:
             * https://api.github.com/users/octocat/events{/privacy}
             */
            events_url: string;
            /**
             * example:
             * https://api.github.com/users/octocat/received_events
             */
            received_events_url: string; // uri
            /**
             * example:
             * User
             */
            type: string;
            site_admin: boolean;
            /**
             * example:
             * "2020-07-09T00:17:55Z"
             */
            starred_at?: string;
        }
        /**
         * Stargazer
         * Stargazer
         */
        export interface Stargazer {
            starred_at: string; // date-time
            user: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
        }
        /**
         * Starred Repository
         * Starred Repository
         */
        export interface StarredRepository {
            starred_at: string; // date-time
            repo: /**
             * Repository
             * A git repository
             */
            Repository;
        }
        /**
         * State Change Issue Event
         * State Change Issue Event
         */
        export interface StateChangeIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
        }
        /**
         * Status
         * The status of a commit.
         */
        export interface Status {
            url: string;
            avatar_url: string | null;
            id: number;
            node_id: string;
            state: string;
            description: string;
            target_url: string;
            context: string;
            created_at: string;
            updated_at: string;
            creator: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
        }
        /**
         * Status Check Policy
         * Status Check Policy
         */
        export interface StatusCheckPolicy {
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
             */
            url: string; // uri
            /**
             * example:
             * true
             */
            strict: boolean;
            /**
             * example:
             * [
             *   "continuous-integration/travis-ci"
             * ]
             */
            contexts: string[];
            checks: {
                /**
                 * example:
                 * continuous-integration/travis-ci
                 */
                context: string;
                app_id: null | number;
            }[];
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
             */
            contexts_url: string; // uri
        }
        /**
         * Tag
         * Tag
         */
        export interface Tag {
            /**
             * example:
             * v0.1
             */
            name: string;
            commit: {
                sha: string;
                url: string; // uri
            };
            /**
             * example:
             * https://github.com/octocat/Hello-World/zipball/v0.1
             */
            zipball_url: string; // uri
            /**
             * example:
             * https://github.com/octocat/Hello-World/tarball/v0.1
             */
            tarball_url: string; // uri
            node_id: string;
        }
        /**
         * Tag protection
         * Tag protection
         */
        export interface TagProtection {
            /**
             * example:
             * 2
             */
            id?: number;
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at?: string;
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            updated_at?: string;
            /**
             * example:
             * true
             */
            enabled?: boolean;
            /**
             * example:
             * v1.*
             */
            pattern: string;
        }
        /**
         * Team
         * Groups of organization members that gives permissions on specified repositories.
         */
        export interface Team {
            id: number;
            node_id: string;
            name: string;
            slug: string;
            description: string | null;
            privacy?: string;
            permission: string;
            permissions?: {
                pull: boolean;
                triage: boolean;
                push: boolean;
                maintain: boolean;
                admin: boolean;
            };
            url: string; // uri
            /**
             * example:
             * https://github.com/orgs/rails/teams/core
             */
            html_url: string; // uri
            members_url: string;
            repositories_url: string; // uri
            parent: /**
             * Team Simple
             * Groups of organization members that gives permissions on specified repositories.
             */
            NullableTeamSimple;
        }
        /**
         * Team Discussion
         * A team discussion is a persistent record of a free-form conversation within a team.
         */
        export interface TeamDiscussion {
            author: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The main text of the discussion.
             * example:
             * Please suggest improvements to our workflow in comments.
             */
            body: string;
            /**
             * example:
             * <p>Hi! This is an area for us to collaborate as a team</p>
             */
            body_html: string;
            /**
             * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
             * example:
             * 0307116bbf7ced493b8d8a346c650b71
             */
            body_version: string;
            /**
             * example:
             * 0
             */
            comments_count: number;
            /**
             * example:
             * https://api.github.com/organizations/1/team/2343027/discussions/1/comments
             */
            comments_url: string; // uri
            /**
             * example:
             * 2018-01-25T18:56:31Z
             */
            created_at: string; // date-time
            last_edited_at: string | null; // date-time
            /**
             * example:
             * https://github.com/orgs/github/teams/justice-league/discussions/1
             */
            html_url: string; // uri
            /**
             * example:
             * MDE0OlRlYW1EaXNjdXNzaW9uMQ==
             */
            node_id: string;
            /**
             * The unique sequence number of a team discussion.
             * example:
             * 42
             */
            number: number;
            /**
             * Whether or not this discussion should be pinned for easy retrieval.
             * example:
             * true
             */
            pinned: boolean;
            /**
             * Whether or not this discussion should be restricted to team members and organization administrators.
             * example:
             * true
             */
            private: boolean;
            /**
             * example:
             * https://api.github.com/organizations/1/team/2343027
             */
            team_url: string; // uri
            /**
             * The title of the discussion.
             * example:
             * How can we improve our workflow?
             */
            title: string;
            /**
             * example:
             * 2018-01-25T18:56:31Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * https://api.github.com/organizations/1/team/2343027/discussions/1
             */
            url: string; // uri
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Team Discussion Comment
         * A reply to a discussion within a team.
         */
        export interface TeamDiscussionComment {
            author: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * The main text of the comment.
             * example:
             * I agree with this suggestion.
             */
            body: string;
            /**
             * example:
             * <p>Do you like apples?</p>
             */
            body_html: string;
            /**
             * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
             * example:
             * 0307116bbf7ced493b8d8a346c650b71
             */
            body_version: string;
            /**
             * example:
             * 2018-01-15T23:53:58Z
             */
            created_at: string; // date-time
            last_edited_at: string | null; // date-time
            /**
             * example:
             * https://api.github.com/organizations/1/team/2403582/discussions/1
             */
            discussion_url: string; // uri
            /**
             * example:
             * https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
             */
            html_url: string; // uri
            /**
             * example:
             * MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
             */
            node_id: string;
            /**
             * The unique sequence number of a team discussion comment.
             * example:
             * 42
             */
            number: number;
            /**
             * example:
             * 2018-01-15T23:53:58Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
             */
            url: string; // uri
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Full Team
         * Groups of organization members that gives permissions on specified repositories.
         */
        export interface TeamFull {
            /**
             * Unique identifier of the team
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDQ6VGVhbTE=
             */
            node_id: string;
            /**
             * URL for the team
             * example:
             * https://api.github.com/organizations/1/team/1
             */
            url: string; // uri
            /**
             * example:
             * https://github.com/orgs/rails/teams/core
             */
            html_url: string; // uri
            /**
             * Name of the team
             * example:
             * Developers
             */
            name: string;
            /**
             * example:
             * justice-league
             */
            slug: string;
            /**
             * example:
             * A great team.
             */
            description: string | null;
            /**
             * The level of privacy this team should have
             * example:
             * closed
             */
            privacy?: "closed" | "secret";
            /**
             * Permission that the team will have for its repositories
             * example:
             * push
             */
            permission: string;
            /**
             * example:
             * https://api.github.com/organizations/1/team/1/members{/member}
             */
            members_url: string;
            /**
             * example:
             * https://api.github.com/organizations/1/team/1/repos
             */
            repositories_url: string; // uri
            parent?: /**
             * Team Simple
             * Groups of organization members that gives permissions on specified repositories.
             */
            NullableTeamSimple;
            /**
             * example:
             * 3
             */
            members_count: number;
            /**
             * example:
             * 10
             */
            repos_count: number;
            /**
             * example:
             * 2017-07-14T16:53:42Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2017-08-17T12:37:15Z
             */
            updated_at: string; // date-time
            organization: /**
             * Organization Full
             * Organization Full
             */
            OrganizationFull;
            /**
             * Distinguished Name (DN) that team maps to within LDAP environment
             * example:
             * uid=example,ou=users,dc=github,dc=com
             */
            ldap_dn?: string;
        }
        /**
         * Team Membership
         * Team Membership
         */
        export interface TeamMembership {
            url: string; // uri
            /**
             * The role of the user in the team.
             * example:
             * member
             */
            role: "member" | "maintainer";
            /**
             * The state of the user's membership in the team.
             */
            state: "active" | "pending";
        }
        /**
         * Team Project
         * A team's access to a project.
         */
        export interface TeamProject {
            owner_url: string;
            url: string;
            html_url: string;
            columns_url: string;
            id: number;
            node_id: string;
            name: string;
            body: string | null;
            number: number;
            state: string;
            creator: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            created_at: string;
            updated_at: string;
            /**
             * The organization permission for this project. Only present when owner is an organization.
             */
            organization_permission?: string;
            /**
             * Whether the project is private or not. Only present when owner is an organization.
             */
            private?: boolean;
            permissions: {
                read: boolean;
                write: boolean;
                admin: boolean;
            };
        }
        /**
         * Team Repository
         * A team's access to a repository.
         */
        export interface TeamRepository {
            /**
             * Unique identifier of the repository
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDEwOlJlcG9zaXRvcnkxMjk2MjY5
             */
            node_id: string;
            /**
             * The name of the repository.
             * example:
             * Team Environment
             */
            name: string;
            /**
             * example:
             * octocat/Hello-World
             */
            full_name: string;
            license: /**
             * License Simple
             * License Simple
             */
            NullableLicenseSimple;
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            /**
             * example:
             * admin
             */
            role_name?: string;
            owner: /**
             * Simple User
             * Simple User
             */
            NullableSimpleUser;
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            /**
             * example:
             * https://github.com/octocat/Hello-World
             */
            html_url: string; // uri
            /**
             * example:
             * This your first repo!
             */
            description: string | null;
            fork: boolean;
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World
             */
            url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
             */
            archive_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/assignees{/user}
             */
            assignees_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
             */
            blobs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/branches{/branch}
             */
            branches_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
             */
            collaborators_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/comments{/number}
             */
            comments_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/commits{/sha}
             */
            commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
             */
            compare_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contents/{+path}
             */
            contents_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/contributors
             */
            contributors_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/deployments
             */
            deployments_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/downloads
             */
            downloads_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/events
             */
            events_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/forks
             */
            forks_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
             */
            git_commits_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
             */
            git_refs_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
             */
            git_tags_url: string;
            /**
             * example:
             * git:github.com/octocat/Hello-World.git
             */
            git_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
             */
            issue_comment_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
             */
            issue_events_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/issues{/number}
             */
            issues_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
             */
            keys_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/labels{/name}
             */
            labels_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/languages
             */
            languages_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/merges
             */
            merges_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/milestones{/number}
             */
            milestones_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
             */
            notifications_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/pulls{/number}
             */
            pulls_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/releases{/id}
             */
            releases_url: string;
            /**
             * example:
             * git@github.com:octocat/Hello-World.git
             */
            ssh_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/stargazers
             */
            stargazers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
             */
            statuses_url: string;
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscribers
             */
            subscribers_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/subscription
             */
            subscription_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/tags
             */
            tags_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/teams
             */
            teams_url: string; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
             */
            trees_url: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World.git
             */
            clone_url: string;
            /**
             * example:
             * git:git.example.com/octocat/Hello-World
             */
            mirror_url: string | null; // uri
            /**
             * example:
             * http://api.github.com/repos/octocat/Hello-World/hooks
             */
            hooks_url: string; // uri
            /**
             * example:
             * https://svn.github.com/octocat/Hello-World
             */
            svn_url: string; // uri
            /**
             * example:
             * https://github.com
             */
            homepage: string | null; // uri
            language: string | null;
            /**
             * example:
             * 9
             */
            forks_count: number;
            /**
             * example:
             * 80
             */
            stargazers_count: number;
            /**
             * example:
             * 80
             */
            watchers_count: number;
            /**
             * example:
             * 108
             */
            size: number;
            /**
             * The default branch of the repository.
             * example:
             * master
             */
            default_branch: string;
            /**
             * example:
             * 0
             */
            open_issues_count: number;
            /**
             * Whether this repository acts as a template that can be used to generate new repositories.
             * example:
             * true
             */
            is_template?: boolean;
            topics?: string[];
            /**
             * Whether issues are enabled.
             * example:
             * true
             */
            has_issues: boolean;
            /**
             * Whether projects are enabled.
             * example:
             * true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * example:
             * true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * Whether downloads are enabled.
             * example:
             * true
             */
            has_downloads: boolean;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            /**
             * Returns whether or not this repository disabled.
             */
            disabled: boolean;
            /**
             * The repository visibility: public, private, or internal.
             */
            visibility?: string;
            /**
             * example:
             * 2011-01-26T19:06:43Z
             */
            pushed_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:01:12Z
             */
            created_at: string | null; // date-time
            /**
             * example:
             * 2011-01-26T19:14:43Z
             */
            updated_at: string | null; // date-time
            /**
             * Whether to allow rebase merges for pull requests.
             * example:
             * true
             */
            allow_rebase_merge?: boolean;
            template_repository?: /**
             * Repository
             * A git repository
             */
            NullableRepository;
            temp_clone_token?: string;
            /**
             * Whether to allow squash merges for pull requests.
             * example:
             * true
             */
            allow_squash_merge?: boolean;
            /**
             * Whether to allow Auto-merge to be used on pull requests.
             * example:
             * false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to delete head branches when pull requests are merged
             * example:
             * false
             */
            delete_branch_on_merge?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * example:
             * true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow forking this repo
             * example:
             * false
             */
            allow_forking?: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
        }
        /**
         * Team Simple
         * Groups of organization members that gives permissions on specified repositories.
         */
        export interface TeamSimple {
            /**
             * Unique identifier of the team
             * example:
             * 1
             */
            id: number;
            /**
             * example:
             * MDQ6VGVhbTE=
             */
            node_id: string;
            /**
             * URL for the team
             * example:
             * https://api.github.com/organizations/1/team/1
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/organizations/1/team/1/members{/member}
             */
            members_url: string;
            /**
             * Name of the team
             * example:
             * Justice League
             */
            name: string;
            /**
             * Description of the team
             * example:
             * A great team.
             */
            description: string | null;
            /**
             * Permission that the team will have for its repositories
             * example:
             * admin
             */
            permission: string;
            /**
             * The level of privacy this team should have
             * example:
             * closed
             */
            privacy?: string;
            /**
             * example:
             * https://github.com/orgs/rails/teams/core
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/organizations/1/team/1/repos
             */
            repositories_url: string; // uri
            /**
             * example:
             * justice-league
             */
            slug: string;
            /**
             * Distinguished Name (DN) that team maps to within LDAP environment
             * example:
             * uid=example,ou=users,dc=github,dc=com
             */
            ldap_dn?: string;
        }
        /**
         * Thread
         * Thread
         */
        export interface Thread {
            id: string;
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            subject: {
                title: string;
                url: string;
                latest_comment_url: string;
                type: string;
            };
            reason: string;
            unread: boolean;
            updated_at: string;
            last_read_at: string | null;
            url: string;
            /**
             * example:
             * https://api.github.com/notifications/threads/2/subscription
             */
            subscription_url: string;
        }
        /**
         * Thread Subscription
         * Thread Subscription
         */
        export interface ThreadSubscription {
            /**
             * example:
             * true
             */
            subscribed: boolean;
            ignored: boolean;
            reason: string | null;
            /**
             * example:
             * 2012-10-06T21:34:12Z
             */
            created_at: string | null; // date-time
            /**
             * example:
             * https://api.github.com/notifications/threads/1/subscription
             */
            url: string; // uri
            /**
             * example:
             * https://api.github.com/notifications/threads/1
             */
            thread_url?: string; // uri
            /**
             * example:
             * https://api.github.com/repos/1
             */
            repository_url?: string; // uri
        }
        /**
         * Timeline Assigned Issue Event
         * Timeline Assigned Issue Event
         */
        export interface TimelineAssignedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            assignee: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
        }
        /**
         * Timeline Comment Event
         * Timeline Comment Event
         */
        export interface TimelineCommentEvent {
            event: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * Unique identifier of the issue comment
             * example:
             * 42
             */
            id: number;
            node_id: string;
            /**
             * URL for the issue comment
             * example:
             * https://api.github.com/repositories/42/issues/comments/1
             */
            url: string; // uri
            /**
             * Contents of the issue comment
             * example:
             * What version of Safari were you using when you observed this bug?
             */
            body?: string;
            body_text?: string;
            body_html?: string;
            html_url: string; // uri
            user: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2011-04-14T16:00:49Z
             */
            updated_at: string; // date-time
            issue_url: string; // uri
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
            performed_via_github_app?: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            reactions?: /* Reaction Rollup */ ReactionRollup;
        }
        /**
         * Timeline Commit Commented Event
         * Timeline Commit Commented Event
         */
        export interface TimelineCommitCommentedEvent {
            event?: string;
            node_id?: string;
            commit_id?: string;
            comments?: /**
             * Commit Comment
             * Commit Comment
             */
            CommitComment[];
        }
        /**
         * Timeline Committed Event
         * Timeline Committed Event
         */
        export interface TimelineCommittedEvent {
            event?: string;
            /**
             * SHA for the commit
             * example:
             * 7638417db6d59f3c431d3e1f261cc637155684cd
             */
            sha: string;
            node_id: string;
            url: string; // uri
            /**
             * Identifying information for the git-user
             */
            author: {
                /**
                 * Timestamp of the commit
                 * example:
                 * 2014-08-09T08:02:04+12:00
                 */
                date: string; // date-time
                /**
                 * Git email address of the user
                 * example:
                 * monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * Name of the git user
                 * example:
                 * Monalisa Octocat
                 */
                name: string;
            };
            /**
             * Identifying information for the git-user
             */
            committer: {
                /**
                 * Timestamp of the commit
                 * example:
                 * 2014-08-09T08:02:04+12:00
                 */
                date: string; // date-time
                /**
                 * Git email address of the user
                 * example:
                 * monalisa.octocat@example.com
                 */
                email: string;
                /**
                 * Name of the git user
                 * example:
                 * Monalisa Octocat
                 */
                name: string;
            };
            /**
             * Message describing the purpose of the commit
             * example:
             * Fix #42
             */
            message: string;
            tree: {
                /**
                 * SHA for the commit
                 * example:
                 * 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                url: string; // uri
            };
            parents: {
                /**
                 * SHA for the commit
                 * example:
                 * 7638417db6d59f3c431d3e1f261cc637155684cd
                 */
                sha: string;
                url: string; // uri
                html_url: string; // uri
            }[];
            verification: {
                verified: boolean;
                reason: string;
                signature: string | null;
                payload: string | null;
            };
            html_url: string; // uri
        }
        /**
         * Timeline Cross Referenced Event
         * Timeline Cross Referenced Event
         */
        export interface TimelineCrossReferencedEvent {
            event: string;
            actor?: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            created_at: string; // date-time
            updated_at: string; // date-time
            source: {
                type?: string;
                issue?: /**
                 * Issue
                 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
                 */
                Issue;
            };
        }
        /**
         * Timeline Event
         * Timeline Event
         */
        export type TimelineIssueEvents = /**
         * Timeline Event
         * Timeline Event
         */
        /**
         * Labeled Issue Event
         * Labeled Issue Event
         */
        LabeledIssueEvent | /**
         * Unlabeled Issue Event
         * Unlabeled Issue Event
         */
        UnlabeledIssueEvent | /**
         * Milestoned Issue Event
         * Milestoned Issue Event
         */
        MilestonedIssueEvent | /**
         * Demilestoned Issue Event
         * Demilestoned Issue Event
         */
        DemilestonedIssueEvent | /**
         * Renamed Issue Event
         * Renamed Issue Event
         */
        RenamedIssueEvent | /**
         * Review Requested Issue Event
         * Review Requested Issue Event
         */
        ReviewRequestedIssueEvent | /**
         * Review Request Removed Issue Event
         * Review Request Removed Issue Event
         */
        ReviewRequestRemovedIssueEvent | /**
         * Review Dismissed Issue Event
         * Review Dismissed Issue Event
         */
        ReviewDismissedIssueEvent | /**
         * Locked Issue Event
         * Locked Issue Event
         */
        LockedIssueEvent | /**
         * Added to Project Issue Event
         * Added to Project Issue Event
         */
        AddedToProjectIssueEvent | /**
         * Moved Column in Project Issue Event
         * Moved Column in Project Issue Event
         */
        MovedColumnInProjectIssueEvent | /**
         * Removed from Project Issue Event
         * Removed from Project Issue Event
         */
        RemovedFromProjectIssueEvent | /**
         * Converted Note to Issue Issue Event
         * Converted Note to Issue Issue Event
         */
        ConvertedNoteToIssueIssueEvent | /**
         * Timeline Comment Event
         * Timeline Comment Event
         */
        TimelineCommentEvent | /**
         * Timeline Cross Referenced Event
         * Timeline Cross Referenced Event
         */
        TimelineCrossReferencedEvent | /**
         * Timeline Committed Event
         * Timeline Committed Event
         */
        TimelineCommittedEvent | /**
         * Timeline Reviewed Event
         * Timeline Reviewed Event
         */
        TimelineReviewedEvent | /**
         * Timeline Line Commented Event
         * Timeline Line Commented Event
         */
        TimelineLineCommentedEvent | /**
         * Timeline Commit Commented Event
         * Timeline Commit Commented Event
         */
        TimelineCommitCommentedEvent | /**
         * Timeline Assigned Issue Event
         * Timeline Assigned Issue Event
         */
        TimelineAssignedIssueEvent | /**
         * Timeline Unassigned Issue Event
         * Timeline Unassigned Issue Event
         */
        TimelineUnassignedIssueEvent | /**
         * State Change Issue Event
         * State Change Issue Event
         */
        StateChangeIssueEvent;
        /**
         * Timeline Line Commented Event
         * Timeline Line Commented Event
         */
        export interface TimelineLineCommentedEvent {
            event?: string;
            node_id?: string;
            comments?: /**
             * Pull Request Review Comment
             * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
             */
            PullRequestReviewComment[];
        }
        /**
         * Timeline Reviewed Event
         * Timeline Reviewed Event
         */
        export interface TimelineReviewedEvent {
            event: string;
            /**
             * Unique identifier of the review
             * example:
             * 42
             */
            id: number;
            /**
             * example:
             * MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
             */
            node_id: string;
            user: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * The text of the review.
             * example:
             * This looks great.
             */
            body: string | null;
            /**
             * example:
             * CHANGES_REQUESTED
             */
            state: string;
            /**
             * example:
             * https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
             */
            html_url: string; // uri
            /**
             * example:
             * https://api.github.com/repos/octocat/Hello-World/pulls/12
             */
            pull_request_url: string; // uri
            _links: {
                html: {
                    href: string;
                };
                pull_request: {
                    href: string;
                };
            };
            submitted_at?: string; // date-time
            /**
             * A commit SHA for the review.
             * example:
             * 54bb654c9e6025347f57900a4a5c2313a96b8035
             */
            commit_id: string;
            body_html?: string;
            body_text?: string;
            author_association: /**
             * author_association
             * How the author is associated with the repository.
             * example:
             * OWNER
             */
            AuthorAssociation;
        }
        /**
         * Timeline Unassigned Issue Event
         * Timeline Unassigned Issue Event
         */
        export interface TimelineUnassignedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            assignee: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
        }
        /**
         * Topic
         * A topic aggregates entities that are related to a subject.
         */
        export interface Topic {
            names: string[];
        }
        /**
         * Topic Search Result Item
         * Topic Search Result Item
         */
        export interface TopicSearchResultItem {
            name: string;
            display_name: string | null;
            short_description: string | null;
            description: string | null;
            created_by: string | null;
            released: string | null;
            created_at: string; // date-time
            updated_at: string; // date-time
            featured: boolean;
            curated: boolean;
            score: number;
            repository_count?: null | number;
            logo_url?: string | null; // uri
            text_matches?: /* Search Result Text Matches */ SearchResultTextMatches;
            related?: {
                topic_relation?: {
                    id?: number;
                    name?: string;
                    topic_id?: number;
                    relation_type?: string;
                };
            }[] | null;
            aliases?: {
                topic_relation?: {
                    id?: number;
                    name?: string;
                    topic_id?: number;
                    relation_type?: string;
                };
            }[] | null;
        }
        /**
         * Traffic
         */
        export interface Traffic {
            timestamp: string; // date-time
            uniques: number;
            count: number;
        }
        /**
         * Unassigned Issue Event
         * Unassigned Issue Event
         */
        export interface UnassignedIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            assignee: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            assigner: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
        }
        /**
         * Unlabeled Issue Event
         * Unlabeled Issue Event
         */
        export interface UnlabeledIssueEvent {
            id: number;
            node_id: string;
            url: string;
            actor: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            NullableIntegration;
            label: {
                name: string;
                color: string;
            };
        }
        /**
         * User Marketplace Purchase
         * User Marketplace Purchase
         */
        export interface UserMarketplacePurchase {
            /**
             * example:
             * monthly
             */
            billing_cycle: string;
            /**
             * example:
             * 2017-11-11T00:00:00Z
             */
            next_billing_date: string | null; // date-time
            unit_count: null | number;
            /**
             * example:
             * true
             */
            on_free_trial: boolean;
            /**
             * example:
             * 2017-11-11T00:00:00Z
             */
            free_trial_ends_on: string | null; // date-time
            /**
             * example:
             * 2017-11-02T01:12:12Z
             */
            updated_at: string | null; // date-time
            account: /* Marketplace Account */ MarketplaceAccount;
            plan: /**
             * Marketplace Listing Plan
             * Marketplace Listing Plan
             */
            MarketplaceListingPlan;
        }
        /**
         * User Search Result Item
         * User Search Result Item
         */
        export interface UserSearchResultItem {
            login: string;
            id: number;
            node_id: string;
            avatar_url: string; // uri
            gravatar_id: string | null;
            url: string; // uri
            html_url: string; // uri
            followers_url: string; // uri
            subscriptions_url: string; // uri
            organizations_url: string; // uri
            repos_url: string; // uri
            received_events_url: string; // uri
            type: string;
            score: number;
            following_url: string;
            gists_url: string;
            starred_url: string;
            events_url: string;
            public_repos?: number;
            public_gists?: number;
            followers?: number;
            following?: number;
            created_at?: string; // date-time
            updated_at?: string; // date-time
            name?: string | null;
            bio?: string | null;
            email?: string | null; // email
            location?: string | null;
            site_admin: boolean;
            hireable?: boolean | null;
            text_matches?: /* Search Result Text Matches */ SearchResultTextMatches;
            blog?: string | null;
            company?: string | null;
            suspended_at?: string | null; // date-time
        }
        /**
         * Validation Error
         * Validation Error
         */
        export interface ValidationError {
            message: string;
            documentation_url: string;
            errors?: {
                resource?: string;
                field?: string;
                message?: string;
                code: string;
                index?: number;
                value?: (string | null) | (null | number) | (string[] | null);
            }[];
        }
        /**
         * Validation Error Simple
         * Validation Error Simple
         */
        export interface ValidationErrorSimple {
            message: string;
            documentation_url: string;
            errors?: string[];
        }
        /**
         * Verification
         */
        export interface Verification {
            verified: boolean;
            reason: string;
            payload: string | null;
            signature: string | null;
        }
        /**
         * View Traffic
         * View Traffic
         */
        export interface ViewTraffic {
            /**
             * example:
             * 14850
             */
            count: number;
            /**
             * example:
             * 3782
             */
            uniques: number;
            views: /* Traffic */ Traffic[];
        }
        /**
         * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
         * example:
         * 30
         */
        export type WaitTimer = number;
        /**
         * Webhook Configuration
         * Configuration object of the webhook
         */
        export interface WebhookConfig {
            url?: /**
             * The URL to which the payloads will be delivered.
             * example:
             * https://example.com/webhook
             */
            WebhookConfigUrl /* uri */;
            content_type?: /**
             * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
             * example:
             * "json"
             */
            WebhookConfigContentType;
            secret?: /**
             * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
             * example:
             * "********"
             */
            WebhookConfigSecret;
            insecure_ssl?: WebhookConfigInsecureSsl;
        }
        /**
         * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
         * example:
         * "json"
         */
        export type WebhookConfigContentType = string;
        export type WebhookConfigInsecureSsl = string | number;
        /**
         * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
         * example:
         * "********"
         */
        export type WebhookConfigSecret = string;
        /**
         * The URL to which the payloads will be delivered.
         * example:
         * https://example.com/webhook
         */
        export type WebhookConfigUrl = string; // uri
        /**
         * Workflow
         * A GitHub Actions workflow
         */
        export interface Workflow {
            /**
             * example:
             * 5
             */
            id: number;
            /**
             * example:
             * MDg6V29ya2Zsb3cxMg==
             */
            node_id: string;
            /**
             * example:
             * CI
             */
            name: string;
            /**
             * example:
             * ruby.yaml
             */
            path: string;
            /**
             * example:
             * active
             */
            state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually";
            /**
             * example:
             * 2019-12-06T14:20:20.000Z
             */
            created_at: string; // date-time
            /**
             * example:
             * 2019-12-06T14:20:20.000Z
             */
            updated_at: string; // date-time
            /**
             * example:
             * https://api.github.com/repos/actions/setup-ruby/workflows/5
             */
            url: string;
            /**
             * example:
             * https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml
             */
            html_url: string;
            /**
             * example:
             * https://github.com/actions/setup-ruby/workflows/CI/badge.svg
             */
            badge_url: string;
            /**
             * example:
             * 2019-12-06T14:20:20.000Z
             */
            deleted_at?: string; // date-time
        }
        /**
         * Workflow Run
         * An invocation of a workflow
         */
        export interface WorkflowRun {
            /**
             * The ID of the workflow run.
             * example:
             * 5
             */
            id: number;
            /**
             * The name of the workflow run.
             * example:
             * Build
             */
            name?: string | null;
            /**
             * example:
             * MDEwOkNoZWNrU3VpdGU1
             */
            node_id: string;
            /**
             * The ID of the associated check suite.
             * example:
             * 42
             */
            check_suite_id?: number;
            /**
             * The node ID of the associated check suite.
             * example:
             * MDEwOkNoZWNrU3VpdGU0Mg==
             */
            check_suite_node_id?: string;
            /**
             * example:
             * master
             */
            head_branch: string | null;
            /**
             * The SHA of the head commit that points to the version of the workflow being run.
             * example:
             * 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /**
             * The auto incrementing run number for the workflow run.
             * example:
             * 106
             */
            run_number: number;
            /**
             * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
             * example:
             * 1
             */
            run_attempt?: number;
            /**
             * example:
             * push
             */
            event: string;
            /**
             * example:
             * completed
             */
            status: string | null;
            /**
             * example:
             * neutral
             */
            conclusion: string | null;
            /**
             * The ID of the parent workflow.
             * example:
             * 5
             */
            workflow_id: number;
            /**
             * The URL to the workflow run.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5
             */
            url: string;
            /**
             * example:
             * https://github.com/github/hello-world/suites/4
             */
            html_url: string;
            pull_requests: /* Pull Request Minimal */ PullRequestMinimal[] | null;
            created_at: string; // date-time
            updated_at: string; // date-time
            actor?: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            triggering_actor?: /**
             * Simple User
             * Simple User
             */
            SimpleUser;
            /**
             * The start time of the latest run. Resets on re-run.
             */
            run_started_at?: string; // date-time
            /**
             * The URL to the jobs for the workflow run.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
             */
            jobs_url: string;
            /**
             * The URL to download the logs for the workflow run.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5/logs
             */
            logs_url: string;
            /**
             * The URL to the associated check suite.
             * example:
             * https://api.github.com/repos/github/hello-world/check-suites/12
             */
            check_suite_url: string;
            /**
             * The URL to the artifacts for the workflow run.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
             */
            artifacts_url: string;
            /**
             * The URL to cancel the workflow run.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
             */
            cancel_url: string;
            /**
             * The URL to rerun the workflow run.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
             */
            rerun_url: string;
            /**
             * The URL to the previous attempted run of this workflow, if one exists.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3
             */
            previous_attempt_url?: string | null;
            /**
             * The URL to the workflow.
             * example:
             * https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
             */
            workflow_url: string;
            head_commit: /**
             * Simple Commit
             * Simple Commit
             */
            NullableSimpleCommit;
            repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            head_repository: /**
             * Minimal Repository
             * Minimal Repository
             */
            MinimalRepository;
            /**
             * example:
             * 5
             */
            head_repository_id?: number;
        }
        /**
         * Workflow Run Usage
         * Workflow Run Usage
         */
        export interface WorkflowRunUsage {
            billable: {
                UBUNTU?: {
                    total_ms: number;
                    jobs: number;
                    job_runs?: {
                        job_id: number;
                        duration_ms: number;
                    }[];
                };
                MACOS?: {
                    total_ms: number;
                    jobs: number;
                    job_runs?: {
                        job_id: number;
                        duration_ms: number;
                    }[];
                };
                WINDOWS?: {
                    total_ms: number;
                    jobs: number;
                    job_runs?: {
                        job_id: number;
                        duration_ms: number;
                    }[];
                };
            };
            run_duration_ms?: number;
        }
        /**
         * Workflow Usage
         * Workflow Usage
         */
        export interface WorkflowUsage {
            billable: {
                UBUNTU?: {
                    total_ms?: number;
                };
                MACOS?: {
                    total_ms?: number;
                };
                WINDOWS?: {
                    total_ms?: number;
                };
            };
        }
    }
}
declare namespace slime.external.github.rest.paths {
    namespace ActionsAddCustomLabelsToSelfHostedRunnerForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        export interface RequestBody {
            /**
             * The names of the custom labels to add to the runner.
             */
            labels: [
                string,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?
            ];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ActionsAddCustomLabelsToSelfHostedRunnerForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        export interface RequestBody {
            /**
             * The names of the custom labels to add to the runner.
             */
            labels: [
                string,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?
            ];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsAddSelectedRepoToOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
            export type RepositoryId = number;
        }
        export interface PathParameters {
            repository_id: Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $409 {
            }
        }
    }
    namespace ActionsAddSelfHostedRunnerToGroupForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsApproveWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export type $201 = /**
             * Empty Object
             * An object without any properties.
             */
            slime.external.github.rest.components.Schemas.EmptyObject;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActionsCancelWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export interface $202 {
            }
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
        }
    }
    namespace ActionsCreateOrUpdateEnvironmentSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.RepositoryId;
            export type $1 = slime.external.github.rest.components.Parameters.EnvironmentName;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
             */
            encrypted_value: string; // ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
            /**
             * ID of the key you used to encrypt the secret.
             */
            key_id: string;
        }
        namespace Responses {
            export type $201 = /**
             * Empty Object
             * An object without any properties.
             */
            slime.external.github.rest.components.Schemas.EmptyObject;
            export interface $204 {
            }
        }
    }
    namespace ActionsCreateOrUpdateOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
             */
            encrypted_value?: string; // ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
            /**
             * ID of the key you used to encrypt the secret.
             */
            key_id?: string;
            /**
             * Configures the access that repositories have to the organization secret. Can be one of:
             * \- `all` - All repositories in an organization can access the secret.
             * \- `private` - Private repositories in an organization can access the secret.
             * \- `selected` - Only specific repositories can access the secret.
             */
            visibility: "all" | "private" | "selected";
            /**
             * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
             */
            selected_repository_ids?: string[];
        }
        namespace Responses {
            export type $201 = /**
             * Empty Object
             * An object without any properties.
             */
            slime.external.github.rest.components.Schemas.EmptyObject;
            export interface $204 {
            }
        }
    }
    namespace ActionsCreateOrUpdateRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
             */
            encrypted_value?: string; // ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
            /**
             * ID of the key you used to encrypt the secret.
             */
            key_id?: string;
        }
        namespace Responses {
            export interface $201 {
            }
            export interface $204 {
            }
        }
    }
    namespace ActionsCreateRegistrationTokenForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $201 = /**
             * Authentication Token
             * Authentication Token
             */
            slime.external.github.rest.components.Schemas.AuthenticationToken;
        }
    }
    namespace ActionsCreateRegistrationTokenForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $201 = /**
             * Authentication Token
             * Authentication Token
             */
            slime.external.github.rest.components.Schemas.AuthenticationToken;
        }
    }
    namespace ActionsCreateRemoveTokenForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $201 = /**
             * Authentication Token
             * Authentication Token
             */
            slime.external.github.rest.components.Schemas.AuthenticationToken;
        }
    }
    namespace ActionsCreateRemoveTokenForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $201 = /**
             * Authentication Token
             * Authentication Token
             */
            slime.external.github.rest.components.Schemas.AuthenticationToken;
        }
    }
    namespace ActionsCreateSelfHostedRunnerGroupForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * Name of the runner group.
             */
            name: string;
            /**
             * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
             */
            visibility?: "selected" | "all" | "private";
            /**
             * List of repository IDs that can access the runner group.
             */
            selected_repository_ids?: number[];
            /**
             * List of runner IDs to add to the runner group.
             */
            runners?: number[];
            /**
             * Whether the runner group can be used by `public` repositories.
             */
            allows_public_repositories?: boolean;
            /**
             * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
             */
            restricted_to_workflows?: boolean;
            /**
             * List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
             */
            selected_workflows?: string[];
        }
        namespace Responses {
            export type $201 = slime.external.github.rest.components.Schemas.RunnerGroupsOrg;
        }
    }
    namespace ActionsCreateWorkflowDispatch {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.WorkflowId;
        }
        export interface RequestBody {
            /**
             * The git reference for the workflow. The reference can be a branch or tag name.
             */
            ref: string;
            /**
             * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
             */
            inputs?: {
                [name: string]: string;
            };
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteArtifact {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ArtifactId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteEnvironmentSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.RepositoryId;
            export type $1 = slime.external.github.rest.components.Parameters.EnvironmentName;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteSelfHostedRunnerFromOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteSelfHostedRunnerFromRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteSelfHostedRunnerGroupFromOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDeleteWorkflowRunLogs {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace ActionsDisableSelectedRepositoryGithubActionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDisableWorkflow {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.WorkflowId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsDownloadArtifact {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ArtifactId;
            export type ArchiveFormat = string;
        }
        export interface PathParameters {
            archive_format: Parameters.ArchiveFormat;
        }
        namespace Responses {
            export interface $302 {
            }
        }
    }
    namespace ActionsDownloadJobLogsForWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.JobId;
        }
        namespace Responses {
            export interface $302 {
            }
        }
    }
    namespace ActionsDownloadWorkflowRunAttemptLogs {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
            export type $3 = slime.external.github.rest.components.Parameters.AttemptNumber;
        }
        namespace Responses {
            export interface $302 {
            }
        }
    }
    namespace ActionsDownloadWorkflowRunLogs {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export interface $302 {
            }
        }
    }
    namespace ActionsEnableSelectedRepositoryGithubActionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsEnableWorkflow {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.WorkflowId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsGetActionsCacheUsage {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Actions Cache Usage by repository
             * GitHub Actions Cache Usage by repository.
             */
            slime.external.github.rest.components.Schemas.ActionsCacheUsageByRepository;
        }
    }
    namespace ActionsGetActionsCacheUsageByRepoForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repository_cache_usages: /**
                 * Actions Cache Usage by repository
                 * GitHub Actions Cache Usage by repository.
                 */
                slime.external.github.rest.components.Schemas.ActionsCacheUsageByRepository[];
            }
        }
    }
    namespace ActionsGetActionsCacheUsageForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsCacheUsageOrgEnterprise;
        }
    }
    namespace ActionsGetActionsCacheUsageForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsCacheUsageOrgEnterprise;
        }
    }
    namespace ActionsGetAllowedActionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.SelectedActions;
        }
    }
    namespace ActionsGetAllowedActionsRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.SelectedActions;
        }
    }
    namespace ActionsGetArtifact {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ArtifactId;
        }
        namespace Responses {
            export type $200 = /**
             * Artifact
             * An artifact
             */
            slime.external.github.rest.components.Schemas.Artifact;
        }
    }
    namespace ActionsGetEnvironmentPublicKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.RepositoryId;
            export type $1 = slime.external.github.rest.components.Parameters.EnvironmentName;
        }
        namespace Responses {
            export type $200 = /**
             * ActionsPublicKey
             * The public key used for setting Actions Secrets.
             */
            slime.external.github.rest.components.Schemas.ActionsPublicKey;
        }
    }
    namespace ActionsGetEnvironmentSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.RepositoryId;
            export type $1 = slime.external.github.rest.components.Parameters.EnvironmentName;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export type $200 = /**
             * Actions Secret
             * Set secrets for GitHub Actions.
             */
            slime.external.github.rest.components.Schemas.ActionsSecret;
        }
    }
    namespace ActionsGetGithubActionsDefaultWorkflowPermissionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsGetDefaultWorkflowPermissions;
        }
    }
    namespace ActionsGetGithubActionsDefaultWorkflowPermissionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsGetDefaultWorkflowPermissions;
        }
    }
    namespace ActionsGetGithubActionsDefaultWorkflowPermissionsRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsGetDefaultWorkflowPermissions;
        }
    }
    namespace ActionsGetGithubActionsPermissionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsOrganizationPermissions;
        }
    }
    namespace ActionsGetGithubActionsPermissionsRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsRepositoryPermissions;
        }
    }
    namespace ActionsGetJobForWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.JobId;
        }
        namespace Responses {
            export type $200 = /**
             * Job
             * Information of a job execution in a workflow run
             */
            slime.external.github.rest.components.Schemas.Job;
        }
    }
    namespace ActionsGetOrgPublicKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * ActionsPublicKey
             * The public key used for setting Actions Secrets.
             */
            slime.external.github.rest.components.Schemas.ActionsPublicKey;
        }
    }
    namespace ActionsGetOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export type $200 = /**
             * Actions Secret for an Organization
             * Secrets for GitHub Actions for an organization.
             */
            slime.external.github.rest.components.Schemas.OrganizationActionsSecret;
        }
    }
    namespace ActionsGetPendingDeploymentsForRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export type $200 = /**
             * Pending Deployment
             * Details of a deployment that is waiting for protection rules to pass
             */
            slime.external.github.rest.components.Schemas.PendingDeployment[];
        }
    }
    namespace ActionsGetRepoPublicKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * ActionsPublicKey
             * The public key used for setting Actions Secrets.
             */
            slime.external.github.rest.components.Schemas.ActionsPublicKey;
        }
    }
    namespace ActionsGetRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export type $200 = /**
             * Actions Secret
             * Set secrets for GitHub Actions.
             */
            slime.external.github.rest.components.Schemas.ActionsSecret;
        }
    }
    namespace ActionsGetReviewsForRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export type $200 = /**
             * Environment Approval
             * An entry in the reviews log for environment deployments
             */
            slime.external.github.rest.components.Schemas.EnvironmentApprovals[];
        }
    }
    namespace ActionsGetSelfHostedRunnerForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = /**
             * Self hosted runners
             * A self hosted runner
             */
            slime.external.github.rest.components.Schemas.Runner;
        }
    }
    namespace ActionsGetSelfHostedRunnerForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = /**
             * Self hosted runners
             * A self hosted runner
             */
            slime.external.github.rest.components.Schemas.Runner;
        }
    }
    namespace ActionsGetSelfHostedRunnerGroupForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.RunnerGroupsOrg;
        }
    }
    namespace ActionsGetWorkflow {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.WorkflowId;
        }
        namespace Responses {
            export type $200 = /**
             * Workflow
             * A GitHub Actions workflow
             */
            slime.external.github.rest.components.Schemas.Workflow;
        }
    }
    namespace ActionsGetWorkflowAccessToRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsWorkflowAccessToRepository;
        }
    }
    namespace ActionsGetWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
            export type $3 = slime.external.github.rest.components.Parameters.ExcludePullRequests;
        }
        namespace Responses {
            export type $200 = /**
             * Workflow Run
             * An invocation of a workflow
             */
            slime.external.github.rest.components.Schemas.WorkflowRun;
        }
    }
    namespace ActionsGetWorkflowRunAttempt {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
            export type $3 = slime.external.github.rest.components.Parameters.AttemptNumber;
            export type $4 = slime.external.github.rest.components.Parameters.ExcludePullRequests;
        }
        namespace Responses {
            export type $200 = /**
             * Workflow Run
             * An invocation of a workflow
             */
            slime.external.github.rest.components.Schemas.WorkflowRun;
        }
    }
    namespace ActionsGetWorkflowRunUsage {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export type $200 = /**
             * Workflow Run Usage
             * Workflow Run Usage
             */
            slime.external.github.rest.components.Schemas.WorkflowRunUsage;
        }
    }
    namespace ActionsGetWorkflowUsage {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.WorkflowId;
        }
        namespace Responses {
            export type $200 = /**
             * Workflow Usage
             * Workflow Usage
             */
            slime.external.github.rest.components.Schemas.WorkflowUsage;
        }
    }
    namespace ActionsListArtifactsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                artifacts: /**
                 * Artifact
                 * An artifact
                 */
                slime.external.github.rest.components.Schemas.Artifact[];
            }
        }
    }
    namespace ActionsListEnvironmentSecrets {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.RepositoryId;
            export type $1 = slime.external.github.rest.components.Parameters.EnvironmentName;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                secrets: /**
                 * Actions Secret
                 * Set secrets for GitHub Actions.
                 */
                slime.external.github.rest.components.Schemas.ActionsSecret[];
            }
        }
    }
    namespace ActionsListJobsForWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Filter = "latest" | "all";
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                jobs: /**
                 * Job
                 * Information of a job execution in a workflow run
                 */
                slime.external.github.rest.components.Schemas.Job[];
            }
        }
    }
    namespace ActionsListJobsForWorkflowRunAttempt {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
            export type $3 = slime.external.github.rest.components.Parameters.AttemptNumber;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                jobs: /**
                 * Job
                 * Information of a job execution in a workflow run
                 */
                slime.external.github.rest.components.Schemas.Job[];
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActionsListLabelsForSelfHostedRunnerForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActionsListLabelsForSelfHostedRunnerForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActionsListOrgSecrets {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                secrets: /**
                 * Actions Secret for an Organization
                 * Secrets for GitHub Actions for an organization.
                 */
                slime.external.github.rest.components.Schemas.OrganizationActionsSecret[];
            }
        }
    }
    namespace ActionsListRepoAccessToSelfHostedRunnerGroupInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repositories: /**
                 * Minimal Repository
                 * Minimal Repository
                 */
                slime.external.github.rest.components.Schemas.MinimalRepository[];
            }
        }
    }
    namespace ActionsListRepoSecrets {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                secrets: /**
                 * Actions Secret
                 * Set secrets for GitHub Actions.
                 */
                slime.external.github.rest.components.Schemas.ActionsSecret[];
            }
        }
    }
    namespace ActionsListRepoWorkflows {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                workflows: /**
                 * Workflow
                 * A GitHub Actions workflow
                 */
                slime.external.github.rest.components.Schemas.Workflow[];
            }
        }
    }
    namespace ActionsListRunnerApplicationsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * Runner Application
             * Runner Application
             */
            slime.external.github.rest.components.Schemas.RunnerApplication[];
        }
    }
    namespace ActionsListRunnerApplicationsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Runner Application
             * Runner Application
             */
            slime.external.github.rest.components.Schemas.RunnerApplication[];
        }
    }
    namespace ActionsListSelectedReposForOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repositories: /**
                 * Minimal Repository
                 * Minimal Repository
                 */
                slime.external.github.rest.components.Schemas.MinimalRepository[];
            }
        }
    }
    namespace ActionsListSelectedRepositoriesEnabledGithubActionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repositories: /**
                 * Repository
                 * A git repository
                 */
                slime.external.github.rest.components.Schemas.Repository[];
            }
        }
    }
    namespace ActionsListSelfHostedRunnerGroupsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.VisibleToRepository;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                runner_groups: slime.external.github.rest.components.Schemas.RunnerGroupsOrg[];
            }
        }
    }
    namespace ActionsListSelfHostedRunnersForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                runners: /**
                 * Self hosted runners
                 * A self hosted runner
                 */
                slime.external.github.rest.components.Schemas.Runner[];
            }
        }
    }
    namespace ActionsListSelfHostedRunnersForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                runners: /**
                 * Self hosted runners
                 * A self hosted runner
                 */
                slime.external.github.rest.components.Schemas.Runner[];
            }
        }
    }
    namespace ActionsListSelfHostedRunnersInGroupForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                runners: /**
                 * Self hosted runners
                 * A self hosted runner
                 */
                slime.external.github.rest.components.Schemas.Runner[];
            }
        }
    }
    namespace ActionsListWorkflowRunArtifacts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                artifacts: /**
                 * Artifact
                 * An artifact
                 */
                slime.external.github.rest.components.Schemas.Artifact[];
            }
        }
    }
    namespace ActionsListWorkflowRuns {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $10 = slime.external.github.rest.components.Parameters.ExcludePullRequests;
            export type $11 = slime.external.github.rest.components.Parameters.WorkflowRunCheckSuiteId;
            export type $2 = slime.external.github.rest.components.Parameters.WorkflowId;
            export type $3 = slime.external.github.rest.components.Parameters.Actor;
            export type $4 = slime.external.github.rest.components.Parameters.WorkflowRunBranch;
            export type $5 = slime.external.github.rest.components.Parameters.Event;
            export type $6 = slime.external.github.rest.components.Parameters.WorkflowRunStatus;
            export type $7 = slime.external.github.rest.components.Parameters.PerPage;
            export type $8 = slime.external.github.rest.components.Parameters.Page;
            export type $9 = slime.external.github.rest.components.Parameters.Created /* date-time */;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                workflow_runs: /**
                 * Workflow Run
                 * An invocation of a workflow
                 */
                slime.external.github.rest.components.Schemas.WorkflowRun[];
            }
        }
    }
    namespace ActionsListWorkflowRunsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $10 = slime.external.github.rest.components.Parameters.WorkflowRunCheckSuiteId;
            export type $2 = slime.external.github.rest.components.Parameters.Actor;
            export type $3 = slime.external.github.rest.components.Parameters.WorkflowRunBranch;
            export type $4 = slime.external.github.rest.components.Parameters.Event;
            export type $5 = slime.external.github.rest.components.Parameters.WorkflowRunStatus;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Page;
            export type $8 = slime.external.github.rest.components.Parameters.Created /* date-time */;
            export type $9 = slime.external.github.rest.components.Parameters.ExcludePullRequests;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                workflow_runs: /**
                 * Workflow Run
                 * An invocation of a workflow
                 */
                slime.external.github.rest.components.Schemas.WorkflowRun[];
            }
        }
    }
    namespace ActionsReRunJobForWorkflowRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.JobId;
        }
        namespace Responses {
            export type $201 = /**
             * Empty Object
             * An object without any properties.
             */
            slime.external.github.rest.components.Schemas.EmptyObject;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActionsReRunWorkflow {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export interface $201 {
            }
        }
    }
    namespace ActionsReRunWorkflowFailedJobs {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        namespace Responses {
            export type $201 = /**
             * Empty Object
             * An object without any properties.
             */
            slime.external.github.rest.components.Schemas.EmptyObject;
        }
    }
    namespace ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabelsReadonly;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabelsReadonly;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerLabelName;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
            export type $3 = slime.external.github.rest.components.Parameters.RunnerLabelName;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsRemoveSelectedRepoFromOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
            export type RepositoryId = number;
        }
        export interface PathParameters {
            repository_id: Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $409 {
            }
        }
    }
    namespace ActionsRemoveSelfHostedRunnerFromGroupForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsReviewPendingDeploymentsForRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunId;
        }
        export interface RequestBody {
            /**
             * The list of environment ids to approve or reject
             * example:
             * [
             *   161171787,
             *   161171795
             * ]
             */
            environment_ids: number[];
            /**
             * Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected`
             * example:
             * approved
             */
            state: "approved" | "rejected";
            /**
             * A comment to accompany the deployment review
             * example:
             * Ship it!
             */
            comment: string;
        }
        namespace Responses {
            export type $200 = /**
             * Deployment
             * A request for a specific ref(branch,sha,tag) to be deployed
             */
            slime.external.github.rest.components.Schemas.Deployment[];
        }
    }
    namespace ActionsSetAllowedActionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export type RequestBody = slime.external.github.rest.components.Schemas.SelectedActions;
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetAllowedActionsRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = slime.external.github.rest.components.Schemas.SelectedActions;
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetCustomLabelsForSelfHostedRunnerForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        export interface RequestBody {
            /**
             * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
             */
            labels: [
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?
            ];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ActionsSetCustomLabelsForSelfHostedRunnerForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        export interface RequestBody {
            /**
             * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
             */
            labels: [
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?
            ];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ActionsSetGithubActionsDefaultWorkflowPermissionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        export type RequestBody = slime.external.github.rest.components.Schemas.ActionsSetDefaultWorkflowPermissions;
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetGithubActionsDefaultWorkflowPermissionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export type RequestBody = slime.external.github.rest.components.Schemas.ActionsSetDefaultWorkflowPermissions;
        namespace Responses {
            export interface $204 {
            }
            export interface $409 {
            }
        }
    }
    namespace ActionsSetGithubActionsDefaultWorkflowPermissionsRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = slime.external.github.rest.components.Schemas.ActionsSetDefaultWorkflowPermissions;
        namespace Responses {
            export interface $204 {
            }
            export interface $409 {
            }
        }
    }
    namespace ActionsSetGithubActionsPermissionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            enabled_repositories: /* The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */ slime.external.github.rest.components.Schemas.EnabledRepositories;
            allowed_actions?: /* The permissions policy that controls the actions and reusable workflows that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */ slime.external.github.rest.components.Schemas.AllowedActions;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetGithubActionsPermissionsRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            enabled: /* Whether GitHub Actions is enabled on the repository. */ slime.external.github.rest.components.Schemas.ActionsEnabled;
            allowed_actions?: /* The permissions policy that controls the actions and reusable workflows that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */ slime.external.github.rest.components.Schemas.AllowedActions;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        export interface RequestBody {
            /**
             * List of repository IDs that can access the runner group.
             */
            selected_repository_ids: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetSelectedReposForOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
             */
            selected_repository_ids: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * List of repository IDs to enable for GitHub Actions.
             */
            selected_repository_ids: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetSelfHostedRunnersInGroupForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        export interface RequestBody {
            /**
             * List of runner IDs to add to the runner group.
             */
            runners: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsSetWorkflowAccessToRepository {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = slime.external.github.rest.components.Schemas.ActionsWorkflowAccessToRepository;
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActionsUpdateSelfHostedRunnerGroupForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        export interface RequestBody {
            /**
             * Name of the runner group.
             */
            name: string;
            /**
             * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
             */
            visibility?: "selected" | "all" | "private";
            /**
             * Whether the runner group can be used by `public` repositories.
             */
            allows_public_repositories?: boolean;
            /**
             * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
             */
            restricted_to_workflows?: boolean;
            /**
             * List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
             */
            selected_workflows?: string[];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.RunnerGroupsOrg;
        }
    }
    namespace ActivityCheckRepoIsStarredByAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace ActivityDeleteRepoSubscription {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ActivityDeleteThreadSubscription {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ThreadId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivityGetFeeds {
        namespace Responses {
            export type $200 = /**
             * Feed
             * Feed
             */
            slime.external.github.rest.components.Schemas.Feed;
        }
    }
    namespace ActivityGetRepoSubscription {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Repository Invitation
             * Repository invitations let you manage who you collaborate with.
             */
            slime.external.github.rest.components.Schemas.RepositorySubscription;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export interface $404 {
            }
        }
    }
    namespace ActivityGetThread {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ThreadId;
        }
        namespace Responses {
            export type $200 = /**
             * Thread
             * Thread
             */
            slime.external.github.rest.components.Schemas.Thread;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivityGetThreadSubscriptionForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ThreadId;
        }
        namespace Responses {
            export type $200 = /**
             * Thread Subscription
             * Thread Subscription
             */
            slime.external.github.rest.components.Schemas.ThreadSubscription;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivityListEventsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
        }
    }
    namespace ActivityListNotificationsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.All;
            export type $1 = slime.external.github.rest.components.Parameters.Participating;
            export type $2 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $3 = slime.external.github.rest.components.Parameters.Before /* date-time */;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Thread
             * Thread
             */
            slime.external.github.rest.components.Schemas.Thread[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ActivityListOrgEventsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.Org;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
        }
    }
    namespace ActivityListPublicEvents {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace ActivityListPublicEventsForRepoNetwork {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActivityListPublicEventsForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
        }
    }
    namespace ActivityListPublicOrgEvents {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
        }
    }
    namespace ActivityListReceivedEventsForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
        }
    }
    namespace ActivityListReceivedPublicEventsForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
        }
    }
    namespace ActivityListRepoEvents {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Event
             * Event
             */
            slime.external.github.rest.components.Schemas.Event[];
        }
    }
    namespace ActivityListRepoNotificationsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.All;
            export type $3 = slime.external.github.rest.components.Parameters.Participating;
            export type $4 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $5 = slime.external.github.rest.components.Parameters.Before /* date-time */;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Thread
             * Thread
             */
            slime.external.github.rest.components.Schemas.Thread[];
        }
    }
    namespace ActivityListReposStarredByAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Sort;
            export type $1 = slime.external.github.rest.components.Parameters.Direction;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Repository
             * A git repository
             */
            slime.external.github.rest.components.Schemas.Repository[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivityListReposStarredByUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.Sort;
            export type $2 = slime.external.github.rest.components.Parameters.Direction;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Starred Repository
             * Starred Repository
             */
            slime.external.github.rest.components.Schemas.StarredRepository[] | /**
             * Repository
             * A git repository
             */
            slime.external.github.rest.components.Schemas.Repository[];
        }
    }
    namespace ActivityListReposWatchedByUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
        }
    }
    namespace ActivityListStargazersForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[] | /**
             * Stargazer
             * Stargazer
             */
            slime.external.github.rest.components.Schemas.Stargazer[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ActivityListWatchedReposForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivityListWatchersForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
        }
    }
    namespace ActivityMarkNotificationsAsRead {
        export interface RequestBody {
            /**
             * Describes the last point that notifications were checked.
             */
            last_read_at?: string; // date-time
            /**
             * Whether the notification has been read.
             */
            read?: boolean;
        }
        namespace Responses {
            export interface $202 {
                message?: string;
            }
            export interface $205 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivityMarkRepoNotificationsAsRead {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
             */
            last_read_at?: string; // date-time
        }
        namespace Responses {
            export interface $202 {
                message?: string;
                url?: string;
            }
            export interface $205 {
            }
        }
    }
    namespace ActivityMarkThreadAsRead {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ThreadId;
        }
        namespace Responses {
            export interface $205 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivitySetRepoSubscription {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * Determines if notifications should be received from this repository.
             */
            subscribed?: boolean;
            /**
             * Determines if all notifications should be blocked from this repository.
             */
            ignored?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Repository Invitation
             * Repository invitations let you manage who you collaborate with.
             */
            slime.external.github.rest.components.Schemas.RepositorySubscription;
        }
    }
    namespace ActivitySetThreadSubscription {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ThreadId;
        }
        export interface RequestBody {
            /**
             * Whether to block all notifications from a thread.
             */
            ignored?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Thread Subscription
             * Thread Subscription
             */
            slime.external.github.rest.components.Schemas.ThreadSubscription;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ActivityStarRepoForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ActivityUnstarRepoForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsAddRepoToInstallationForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
            export type $1 = slime.external.github.rest.components.Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsCheckToken {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ClientId;
        }
        export interface RequestBody {
            /**
             * The access_token of the OAuth application.
             */
            access_token: string;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsCreateFromManifest {
        namespace Parameters {
            export type Code = string;
        }
        export interface PathParameters {
            code: Parameters.Code;
        }
        namespace Responses {
            /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            export interface $201 {
                [name: string]: any;
                /**
                 * Unique identifier of the GitHub app
                 * example:
                 * 37
                 */
                id: number;
                /**
                 * The slug name of the GitHub app
                 * example:
                 * probot-owners
                 */
                slug?: string;
                /**
                 * example:
                 * MDExOkludGVncmF0aW9uMQ==
                 */
                node_id: string;
                owner: /**
                 * Simple User
                 * Simple User
                 */
                slime.external.github.rest.components.Schemas.NullableSimpleUser;
                /**
                 * The name of the GitHub app
                 * example:
                 * Probot Owners
                 */
                name: string;
                /**
                 * example:
                 * The description of the app.
                 */
                description: string | null;
                /**
                 * example:
                 * https://example.com
                 */
                external_url: string; // uri
                /**
                 * example:
                 * https://github.com/apps/super-ci
                 */
                html_url: string; // uri
                /**
                 * example:
                 * 2017-07-08T16:18:44-04:00
                 */
                created_at: string; // date-time
                /**
                 * example:
                 * 2017-07-08T16:18:44-04:00
                 */
                updated_at: string; // date-time
                /**
                 * The set of permissions for the GitHub app
                 * example:
                 * {
                 *   "issues": "read",
                 *   "deployments": "write"
                 * }
                 */
                permissions: {
                    [name: string]: string;
                    issues?: string;
                    checks?: string;
                    metadata?: string;
                    contents?: string;
                    deployments?: string;
                };
                /**
                 * The list of events for the GitHub app
                 * example:
                 * [
                 *   "label",
                 *   "deployment"
                 * ]
                 */
                events: string[];
                /**
                 * The number of installations associated with the GitHub app
                 * example:
                 * 5
                 */
                installations_count?: number;
                /**
                 * example:
                 * "Iv1.25b5d1e65ffc4022"
                 */
                client_id: string;
                /**
                 * example:
                 * "1d4b2097ac622ba702d19de498f005747a8b21d3"
                 */
                client_secret: string;
                /**
                 * example:
                 * "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
                 */
                webhook_secret: string | null;
                /**
                 * example:
                 * "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
                 */
                pem: string;
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace AppsCreateInstallationAccessToken {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
        }
        export interface RequestBody {
            /**
             * List of repository names that the token should have access to
             */
            repositories?: string[];
            /**
             * List of repository IDs that the token should have access to
             * example:
             * [
             *   1
             * ]
             */
            repository_ids?: number[];
            permissions?: /**
             * App Permissions
             * The permissions granted to the user-to-server access token.
             * example:
             * {
             *   "contents": "read",
             *   "issues": "read",
             *   "deployments": "write",
             *   "single_file": "read"
             * }
             */
            slime.external.github.rest.components.Schemas.AppPermissions;
        }
        namespace Responses {
            export type $201 = /**
             * Installation Token
             * Authentication token for a GitHub App installed on a user or org.
             */
            slime.external.github.rest.components.Schemas.InstallationToken;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsDeleteAuthorization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ClientId;
        }
        export interface RequestBody {
            /**
             * The OAuth access token used to authenticate to the GitHub API.
             */
            access_token: string;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsDeleteInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsDeleteToken {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ClientId;
        }
        export interface RequestBody {
            /**
             * The OAuth access token used to authenticate to the GitHub API.
             */
            access_token: string;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsGetAuthenticated {
        namespace Responses {
            export type $200 = /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            slime.external.github.rest.components.Schemas.Integration;
        }
    }
    namespace AppsGetBySlug {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.AppSlug;
        }
        namespace Responses {
            export type $200 = /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            slime.external.github.rest.components.Schemas.Integration;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsGetInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
        }
        namespace Responses {
            export type $200 = /**
             * Installation
             * Installation
             */
            slime.external.github.rest.components.Schemas.Installation;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsGetOrgInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * Installation
             * Installation
             */
            slime.external.github.rest.components.Schemas.Installation;
        }
    }
    namespace AppsGetRepoInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Installation
             * Installation
             */
            slime.external.github.rest.components.Schemas.Installation;
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsGetSubscriptionPlanForAccount {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.AccountId;
        }
        namespace Responses {
            export type $200 = /**
             * Marketplace Purchase
             * Marketplace Purchase
             */
            slime.external.github.rest.components.Schemas.MarketplacePurchase;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace AppsGetSubscriptionPlanForAccountStubbed {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.AccountId;
        }
        namespace Responses {
            export type $200 = /**
             * Marketplace Purchase
             * Marketplace Purchase
             */
            slime.external.github.rest.components.Schemas.MarketplacePurchase;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export interface $404 {
            }
        }
    }
    namespace AppsGetUserInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Installation
             * Installation
             */
            slime.external.github.rest.components.Schemas.Installation;
        }
    }
    namespace AppsGetWebhookConfigForApp {
        namespace Responses {
            export type $200 = /**
             * Webhook Configuration
             * Configuration object of the webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfig;
        }
    }
    namespace AppsGetWebhookDelivery {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.DeliveryId;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook delivery
             * Delivery made by a webhook.
             */
            slime.external.github.rest.components.Schemas.HookDelivery;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsListAccountsForPlan {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PlanId;
            export type $1 = slime.external.github.rest.components.Parameters.Sort;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
        }
        export interface QueryParameters {
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Marketplace Purchase
             * Marketplace Purchase
             */
            slime.external.github.rest.components.Schemas.MarketplacePurchase[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsListAccountsForPlanStubbed {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PlanId;
            export type $1 = slime.external.github.rest.components.Parameters.Sort;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
        }
        export interface QueryParameters {
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Marketplace Purchase
             * Marketplace Purchase
             */
            slime.external.github.rest.components.Schemas.MarketplacePurchase[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
        }
    }
    namespace AppsListInstallationReposForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repository_selection?: string;
                repositories: /**
                 * Repository
                 * A git repository
                 */
                slime.external.github.rest.components.Schemas.Repository[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsListInstallations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
            export type $2 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type Outdated = string;
        }
        export interface QueryParameters {
            outdated?: Parameters.Outdated;
        }
        namespace Responses {
            export type $200 = /**
             * Installation
             * Installation
             */
            slime.external.github.rest.components.Schemas.Installation[];
        }
    }
    namespace AppsListInstallationsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                installations: /**
                 * Installation
                 * Installation
                 */
                slime.external.github.rest.components.Schemas.Installation[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace AppsListPlans {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Marketplace Listing Plan
             * Marketplace Listing Plan
             */
            slime.external.github.rest.components.Schemas.MarketplaceListingPlan[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsListPlansStubbed {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Marketplace Listing Plan
             * Marketplace Listing Plan
             */
            slime.external.github.rest.components.Schemas.MarketplaceListingPlan[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
        }
    }
    namespace AppsListReposAccessibleToInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repositories: /**
                 * Repository
                 * A git repository
                 */
                slime.external.github.rest.components.Schemas.Repository[];
                /**
                 * example:
                 * selected
                 */
                repository_selection?: string;
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace AppsListSubscriptionsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * User Marketplace Purchase
             * User Marketplace Purchase
             */
            slime.external.github.rest.components.Schemas.UserMarketplacePurchase[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsListSubscriptionsForAuthenticatedUserStubbed {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * User Marketplace Purchase
             * User Marketplace Purchase
             */
            slime.external.github.rest.components.Schemas.UserMarketplacePurchase[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
        }
    }
    namespace AppsListWebhookDeliveries {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Cursor;
        }
        namespace Responses {
            export type $200 = /**
             * Simple webhook delivery
             * Delivery made by a webhook, without request and response information.
             */
            slime.external.github.rest.components.Schemas.HookDeliveryItem[];
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsRedeliverWebhookDelivery {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.DeliveryId;
        }
        namespace Responses {
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsRemoveRepoFromInstallationForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
            export type $1 = slime.external.github.rest.components.Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsResetToken {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ClientId;
        }
        export interface RequestBody {
            /**
             * The access_token of the OAuth application.
             */
            access_token: string;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsRevokeInstallationAccessToken {
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace AppsScopeToken {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ClientId;
        }
        export interface RequestBody {
            /**
             * The OAuth access token used to authenticate to the GitHub API.
             * example:
             * e72e16c7e42f292c6912e7710c838347ae178b4a
             */
            access_token: string;
            /**
             * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
             * example:
             * octocat
             */
            target?: string;
            /**
             * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
             * example:
             * 1
             */
            target_id?: number;
            /**
             * The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
             */
            repositories?: string[];
            /**
             * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
             * example:
             * [
             *   1
             * ]
             */
            repository_ids?: number[];
            permissions?: /**
             * App Permissions
             * The permissions granted to the user-to-server access token.
             * example:
             * {
             *   "contents": "read",
             *   "issues": "read",
             *   "deployments": "write",
             *   "single_file": "read"
             * }
             */
            slime.external.github.rest.components.Schemas.AppPermissions;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace AppsSuspendInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsUnsuspendInstallation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InstallationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace AppsUpdateWebhookConfigForApp {
        export interface RequestBody {
            url?: /**
             * The URL to which the payloads will be delivered.
             * example:
             * https://example.com/webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfigUrl /* uri */;
            content_type?: /**
             * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
             * example:
             * "json"
             */
            slime.external.github.rest.components.Schemas.WebhookConfigContentType;
            secret?: /**
             * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
             * example:
             * "********"
             */
            slime.external.github.rest.components.Schemas.WebhookConfigSecret;
            insecure_ssl?: slime.external.github.rest.components.Schemas.WebhookConfigInsecureSsl;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook Configuration
             * Configuration object of the webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfig;
        }
    }
    namespace BillingGetGithubActionsBillingGhe {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsBillingUsage;
        }
    }
    namespace BillingGetGithubActionsBillingOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsBillingUsage;
        }
    }
    namespace BillingGetGithubActionsBillingUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsBillingUsage;
        }
    }
    namespace BillingGetGithubAdvancedSecurityBillingGhe {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.AdvancedSecurityActiveCommitters;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
        }
    }
    namespace BillingGetGithubAdvancedSecurityBillingOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.AdvancedSecurityActiveCommitters;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
        }
    }
    namespace BillingGetGithubPackagesBillingGhe {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.PackagesBillingUsage;
        }
    }
    namespace BillingGetGithubPackagesBillingOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.PackagesBillingUsage;
        }
    }
    namespace BillingGetGithubPackagesBillingUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.PackagesBillingUsage;
        }
    }
    namespace BillingGetSharedStorageBillingGhe {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CombinedBillingUsage;
        }
    }
    namespace BillingGetSharedStorageBillingOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CombinedBillingUsage;
        }
    }
    namespace BillingGetSharedStorageBillingUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CombinedBillingUsage;
        }
    }
    namespace ChecksCreate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = {
            [name: string]: any;
            /**
             * The current status. Can be one of `queued`, `in_progress`, or `completed`.
             */
            status: "completed" | "queued" | "in_progress" | "completed";
            /**
             * The name of the check. For example, "code-coverage".
             */
            name: string;
            /**
             * The SHA of the commit.
             */
            head_sha: string;
            /**
             * The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
             */
            details_url?: string;
            /**
             * A reference for the run on the integrator's system.
             */
            external_id?: string;
            /**
             * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            started_at?: string; // date-time
            /**
             * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.
             * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
             */
            conclusion: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out";
            /**
             * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            completed_at?: string; // date-time
            /**
             * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object) description.
             */
            output?: {
                /**
                 * The title of the check run.
                 */
                title: string;
                /**
                 * The summary of the check run. This parameter supports Markdown.
                 */
                summary: string;
                /**
                 * The details of the check run. This parameter supports Markdown.
                 */
                text?: string;
                /**
                 * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/rest/reference/checks#annotations-object) description for details about how to use this parameter.
                 */
                annotations?: [
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?
                ];
                /**
                 * Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/rest/reference/checks#images-object) description for details.
                 */
                images?: {
                    /**
                     * The alternative text for the image.
                     */
                    alt: string;
                    /**
                     * The full URL of the image.
                     */
                    image_url: string;
                    /**
                     * A short image description.
                     */
                    caption?: string;
                }[];
            };
            /**
             * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
             */
            actions?: [
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?
            ];
        } | {
            [name: string]: any;
            /**
             * The current status. Can be one of `queued`, `in_progress`, or `completed`.
             */
            status?: "queued" | "in_progress" | "queued" | "in_progress" | "completed";
            /**
             * The name of the check. For example, "code-coverage".
             */
            name: string;
            /**
             * The SHA of the commit.
             */
            head_sha: string;
            /**
             * The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
             */
            details_url?: string;
            /**
             * A reference for the run on the integrator's system.
             */
            external_id?: string;
            /**
             * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            started_at?: string; // date-time
            /**
             * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.
             * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
             */
            conclusion?: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out";
            /**
             * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            completed_at?: string; // date-time
            /**
             * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object) description.
             */
            output?: {
                /**
                 * The title of the check run.
                 */
                title: string;
                /**
                 * The summary of the check run. This parameter supports Markdown.
                 */
                summary: string;
                /**
                 * The details of the check run. This parameter supports Markdown.
                 */
                text?: string;
                /**
                 * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/rest/reference/checks#annotations-object) description for details about how to use this parameter.
                 */
                annotations?: [
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?
                ];
                /**
                 * Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/rest/reference/checks#images-object) description for details.
                 */
                images?: {
                    /**
                     * The alternative text for the image.
                     */
                    alt: string;
                    /**
                     * The full URL of the image.
                     */
                    image_url: string;
                    /**
                     * A short image description.
                     */
                    caption?: string;
                }[];
            };
            /**
             * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
             */
            actions?: [
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?
            ];
        };
        namespace Responses {
            export type $201 = /**
             * CheckRun
             * A check performed on the code of a given code change
             */
            slime.external.github.rest.components.Schemas.CheckRun;
        }
    }
    namespace ChecksCreateSuite {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The sha of the head commit.
             */
            head_sha: string;
        }
        namespace Responses {
            export type $200 = /**
             * CheckSuite
             * A suite of checks performed on the code of a given code change
             */
            slime.external.github.rest.components.Schemas.CheckSuite;
            export type $201 = /**
             * CheckSuite
             * A suite of checks performed on the code of a given code change
             */
            slime.external.github.rest.components.Schemas.CheckSuite;
        }
    }
    namespace ChecksGet {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CheckRunId;
        }
        namespace Responses {
            export type $200 = /**
             * CheckRun
             * A check performed on the code of a given code change
             */
            slime.external.github.rest.components.Schemas.CheckRun;
        }
    }
    namespace ChecksGetSuite {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CheckSuiteId;
        }
        namespace Responses {
            export type $200 = /**
             * CheckSuite
             * A suite of checks performed on the code of a given code change
             */
            slime.external.github.rest.components.Schemas.CheckSuite;
        }
    }
    namespace ChecksListAnnotations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CheckRunId;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Check Annotation
             * Check Annotation
             */
            slime.external.github.rest.components.Schemas.CheckAnnotation[];
        }
    }
    namespace ChecksListForRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.CheckName;
            export type $4 = slime.external.github.rest.components.Parameters.Status;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Page;
            export type AppId = number;
            export type Filter = "latest" | "all";
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
            app_id?: Parameters.AppId;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                check_runs: /**
                 * CheckRun
                 * A check performed on the code of a given code change
                 */
                slime.external.github.rest.components.Schemas.CheckRun[];
            }
        }
    }
    namespace ChecksListForSuite {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CheckSuiteId;
            export type $3 = slime.external.github.rest.components.Parameters.CheckName;
            export type $4 = slime.external.github.rest.components.Parameters.Status;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Page;
            export type Filter = "latest" | "all";
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                check_runs: /**
                 * CheckRun
                 * A check performed on the code of a given code change
                 */
                slime.external.github.rest.components.Schemas.CheckRun[];
            }
        }
    }
    namespace ChecksListSuitesForRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $4 = slime.external.github.rest.components.Parameters.CheckName;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type $6 = slime.external.github.rest.components.Parameters.Page;
            export type AppId = number;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        export interface QueryParameters {
            app_id?: Parameters.AppId;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                check_suites: /**
                 * CheckSuite
                 * A suite of checks performed on the code of a given code change
                 */
                slime.external.github.rest.components.Schemas.CheckSuite[];
            }
        }
    }
    namespace ChecksRerequestRun {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CheckRunId;
        }
        namespace Responses {
            export interface $201 {
            }
            export type $403 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace ChecksRerequestSuite {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CheckSuiteId;
        }
        namespace Responses {
            export interface $201 {
            }
        }
    }
    namespace ChecksSetSuitesPreferences {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
             */
            auto_trigger_checks?: {
                /**
                 * The `id` of the GitHub App.
                 */
                app_id: number;
                /**
                 * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
                 */
                setting: boolean;
            }[];
        }
        namespace Responses {
            export type $200 = /**
             * Check Suite Preference
             * Check suite configuration preferences for a repository.
             */
            slime.external.github.rest.components.Schemas.CheckSuitePreference;
        }
    }
    namespace ChecksUpdate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CheckRunId;
        }
        export type RequestBody = {
            [name: string]: any;
            /**
             * The current status. Can be one of `queued`, `in_progress`, or `completed`.
             */
            status?: "completed" | "queued" | "in_progress" | "completed";
            /**
             * The name of the check. For example, "code-coverage".
             */
            name?: string;
            /**
             * The URL of the integrator's site that has the full details of the check.
             */
            details_url?: string;
            /**
             * A reference for the run on the integrator's system.
             */
            external_id?: string;
            /**
             * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            started_at?: string; // date-time
            /**
             * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.
             * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
             */
            conclusion: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out";
            /**
             * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            completed_at?: string; // date-time
            /**
             * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object-1) description.
             */
            output?: {
                /**
                 * **Required**.
                 */
                title?: string;
                /**
                 * Can contain Markdown.
                 */
                summary: string;
                /**
                 * Can contain Markdown.
                 */
                text?: string;
                /**
                 * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
                 */
                annotations?: [
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?
                ];
                /**
                 * Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
                 */
                images?: {
                    /**
                     * The alternative text for the image.
                     */
                    alt: string;
                    /**
                     * The full URL of the image.
                     */
                    image_url: string;
                    /**
                     * A short image description.
                     */
                    caption?: string;
                }[];
            };
            /**
             * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
             */
            actions?: [
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?
            ];
        } | {
            [name: string]: any;
            /**
             * The current status. Can be one of `queued`, `in_progress`, or `completed`.
             */
            status?: "queued" | "in_progress" | "queued" | "in_progress" | "completed";
            /**
             * The name of the check. For example, "code-coverage".
             */
            name?: string;
            /**
             * The URL of the integrator's site that has the full details of the check.
             */
            details_url?: string;
            /**
             * A reference for the run on the integrator's system.
             */
            external_id?: string;
            /**
             * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            started_at?: string; // date-time
            /**
             * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.
             * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
             */
            conclusion?: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out";
            /**
             * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            completed_at?: string; // date-time
            /**
             * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object-1) description.
             */
            output?: {
                /**
                 * **Required**.
                 */
                title?: string;
                /**
                 * Can contain Markdown.
                 */
                summary: string;
                /**
                 * Can contain Markdown.
                 */
                text?: string;
                /**
                 * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
                 */
                annotations?: [
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?,
                    {
                        /**
                         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
                         */
                        path: string;
                        /**
                         * The start line of the annotation.
                         */
                        start_line: number;
                        /**
                         * The end line of the annotation.
                         */
                        end_line: number;
                        /**
                         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        start_column?: number;
                        /**
                         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                         */
                        end_column?: number;
                        /**
                         * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                         */
                        annotation_level: "notice" | "warning" | "failure";
                        /**
                         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
                         */
                        message: string;
                        /**
                         * The title that represents the annotation. The maximum size is 255 characters.
                         */
                        title?: string;
                        /**
                         * Details about this annotation. The maximum size is 64 KB.
                         */
                        raw_details?: string;
                    }?
                ];
                /**
                 * Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
                 */
                images?: {
                    /**
                     * The alternative text for the image.
                     */
                    alt: string;
                    /**
                     * The full URL of the image.
                     */
                    image_url: string;
                    /**
                     * A short image description.
                     */
                    caption?: string;
                }[];
            };
            /**
             * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
             */
            actions?: [
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?,
                {
                    /**
                     * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                     */
                    label: string;
                    /**
                     * A short explanation of what this action would do. The maximum size is 40 characters.
                     */
                    description: string;
                    /**
                     * A reference for the action on the integrator's system. The maximum size is 20 characters.
                     */
                    identifier: string;
                }?
            ];
        };
        namespace Responses {
            export type $200 = /**
             * CheckRun
             * A check performed on the code of a given code change
             */
            slime.external.github.rest.components.Schemas.CheckRun;
        }
    }
    namespace CodeScanningDeleteAnalysis {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type AnalysisId = number;
            export type ConfirmDelete = string | null;
        }
        export interface PathParameters {
            analysis_id: Parameters.AnalysisId;
        }
        export interface QueryParameters {
            confirm_delete?: Parameters.ConfirmDelete;
        }
        namespace Responses {
            export type $200 = /**
             * Analysis deletion
             * Successful deletion of a code scanning analysis
             */
            slime.external.github.rest.components.Schemas.CodeScanningAnalysisDeletion;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenWrite;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningGetAlert {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AlertNumber;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningAlert;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningGetAnalysis {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type AnalysisId = number;
        }
        export interface PathParameters {
            analysis_id: Parameters.AnalysisId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningAnalysis;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningGetSarif {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type SarifId = string;
        }
        export interface PathParameters {
            sarif_id: Parameters.SarifId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningSarifsStatus;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
            export interface $404 {
            }
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningListAlertInstances {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AlertNumber;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.GitRef;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningAlertInstance[];
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningListAlertsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.ToolName;
            export type $2 = slime.external.github.rest.components.Parameters.ToolGuid;
            export type $3 = slime.external.github.rest.components.Parameters.PaginationBefore;
            export type $4 = slime.external.github.rest.components.Parameters.PaginationAfter;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Direction;
            export type Sort = "created" | "updated";
            export type State = /* State of a code scanning alert. */ slime.external.github.rest.components.Schemas.CodeScanningAlertState;
        }
        export interface QueryParameters {
            state?: Parameters.State;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningOrganizationAlertItems[];
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningListAlertsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ToolName;
            export type $3 = slime.external.github.rest.components.Parameters.ToolGuid;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type $6 = slime.external.github.rest.components.Parameters.GitRef;
            export type $7 = slime.external.github.rest.components.Parameters.Direction;
            export type Sort = "created" | "updated" | "number";
            export type State = /* State of a code scanning alert. */ slime.external.github.rest.components.Schemas.CodeScanningAlertState;
        }
        export interface QueryParameters {
            sort?: Parameters.Sort;
            state?: Parameters.State;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningAlertItems[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningListRecentAnalyses {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ToolName;
            export type $3 = slime.external.github.rest.components.Parameters.ToolGuid;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type Ref = /**
             * The full Git reference, formatted as `refs/heads/<branch name>`,
             * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
             */
            slime.external.github.rest.components.Schemas.CodeScanningRef;
            export type SarifId = /**
             * An identifier for the upload.
             * example:
             * 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
             */
            slime.external.github.rest.components.Schemas.CodeScanningAnalysisSarifId;
        }
        export interface QueryParameters {
            ref?: Parameters.Ref;
            sarif_id?: Parameters.SarifId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningAnalysis[];
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenRead;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningUpdateAlert {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AlertNumber;
        }
        export interface RequestBody {
            state: /* Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`. */ slime.external.github.rest.components.Schemas.CodeScanningAlertSetState;
            dismissed_reason?: /* **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */ slime.external.github.rest.components.Schemas.CodeScanningAlertDismissedReason;
            dismissed_note?: /* The dismissal note associated with the dismissal of the alert. */ slime.external.github.rest.components.Schemas.CodeScanningAlertDismissedNote;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.CodeScanningAlert;
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenWrite;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodeScanningUploadSarif {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            commit_sha: /* The SHA of the commit to which the analysis you are uploading relates. */ slime.external.github.rest.components.Schemas.CodeScanningAnalysisCommitSha /* ^[0-9a-fA-F]+$ */;
            ref: /**
             * The full Git reference, formatted as `refs/heads/<branch name>`,
             * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
             */
            slime.external.github.rest.components.Schemas.CodeScanningRef;
            sarif: /* A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)." */ slime.external.github.rest.components.Schemas.CodeScanningAnalysisSarifFile;
            /**
             * The base directory used in the analysis, as it appears in the SARIF file.
             * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
             * example:
             * file:///github/workspace/
             */
            checkout_uri?: string; // uri
            /**
             * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            started_at?: string; // date-time
            /**
             * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
             */
            tool_name?: string;
        }
        namespace Responses {
            export type $202 = slime.external.github.rest.components.Schemas.CodeScanningSarifsReceipt;
            export interface $400 {
            }
            export type $403 = slime.external.github.rest.components.Responses.CodeScanningForbiddenWrite;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export interface $413 {
            }
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace CodesOfConductGetAllCodesOfConduct {
        namespace Responses {
            export type $200 = /**
             * Code Of Conduct
             * Code Of Conduct
             */
            slime.external.github.rest.components.Schemas.CodeOfConduct[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace CodesOfConductGetConductCode {
        namespace Parameters {
            export type Key = string;
        }
        export interface PathParameters {
            key: Parameters.Key;
        }
        namespace Responses {
            export type $200 = /**
             * Code Of Conduct
             * Code Of Conduct
             */
            slime.external.github.rest.components.Schemas.CodeOfConduct;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace CodespacesAddRepositoryForSecretForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SecretName;
            export type RepositoryId = number;
        }
        export interface PathParameters {
            repository_id: Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesCodespaceMachinesForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                machines: /**
                 * Codespace machine
                 * A description of the machine powering a codespace.
                 */
                slime.external.github.rest.components.Schemas.CodespaceMachine[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesCreateForAuthenticatedUser {
        export type RequestBody = {
            /**
             * Repository id for this codespace
             */
            repository_id: number;
            /**
             * Git ref (typically a branch name) for this codespace
             */
            ref?: string;
            /**
             * Location for this codespace. Assigned by IP if not provided
             */
            location?: string;
            /**
             * Machine type to use for this codespace
             */
            machine?: string;
            /**
             * Working directory for this codespace
             */
            working_directory?: string;
            /**
             * Time in minutes before codespace stops from inactivity
             */
            idle_timeout_minutes?: number;
            /**
             * Display name for this codespace
             */
            display_name?: string;
        } | {
            /**
             * Pull request number for this codespace
             */
            pull_request: {
                /**
                 * Pull request number
                 */
                pull_request_number: number;
                /**
                 * Repository id for this codespace
                 */
                repository_id: number;
            };
            /**
             * Location for this codespace. Assigned by IP if not provided
             */
            location?: string;
            /**
             * Machine type to use for this codespace
             */
            machine?: string;
            /**
             * Working directory for this codespace
             */
            working_directory?: string;
            /**
             * Time in minutes before codespace stops from inactivity
             */
            idle_timeout_minutes?: number;
        };
        namespace Responses {
            export type $201 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $202 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace CodespacesCreateOrUpdateRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.
             */
            encrypted_value?: string; // ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
            /**
             * ID of the key you used to encrypt the secret.
             */
            key_id?: string;
        }
        namespace Responses {
            export interface $201 {
            }
            export interface $204 {
            }
        }
    }
    namespace CodespacesCreateOrUpdateSecretForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
             */
            encrypted_value?: string; // ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
            /**
             * ID of the key you used to encrypt the secret.
             */
            key_id: string;
            /**
             * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
             */
            selected_repository_ids?: string[];
        }
        namespace Responses {
            export interface $201 {
            }
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace CodespacesCreateWithPrForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export type RequestBody = {
            /**
             * Location for this codespace. Assigned by IP if not provided
             */
            location?: string;
            /**
             * Machine type to use for this codespace
             */
            machine?: string;
            /**
             * Working directory for this codespace
             */
            working_directory?: string;
            /**
             * Time in minutes before codespace stops from inactivity
             */
            idle_timeout_minutes?: number;
            /**
             * Display name for this codespace
             */
            display_name?: string;
        } | null;
        namespace Responses {
            export type $201 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $202 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace CodespacesCreateWithRepoForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = {
            /**
             * Git ref (typically a branch name) for this codespace
             */
            ref?: string;
            /**
             * Location for this codespace. Assigned by IP if not provided
             */
            location?: string;
            /**
             * Machine type to use for this codespace
             */
            machine?: string;
            /**
             * Working directory for this codespace
             */
            working_directory?: string;
            /**
             * Time in minutes before codespace stops from inactivity
             */
            idle_timeout_minutes?: number;
            /**
             * Display name for this codespace
             */
            display_name?: string;
        } | null;
        namespace Responses {
            export type $201 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $202 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace CodespacesDeleteForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
        }
        namespace Responses {
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesDeleteRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace CodespacesDeleteSecretForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace CodespacesExportForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
        }
        namespace Responses {
            export type $202 = /**
             * Fetches information about an export of a codespace.
             * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
             */
            slime.external.github.rest.components.Schemas.CodespaceExportDetails;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesGetExportDetailsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
            export type $1 = slime.external.github.rest.components.Parameters.ExportId;
        }
        namespace Responses {
            export type $200 = /**
             * Fetches information about an export of a codespace.
             * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
             */
            slime.external.github.rest.components.Schemas.CodespaceExportDetails;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace CodespacesGetForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
        }
        namespace Responses {
            export type $200 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesGetPublicKeyForAuthenticatedUser {
        namespace Responses {
            export type $200 = /**
             * CodespacesUserPublicKey
             * The public key used for setting user Codespaces' Secrets.
             */
            slime.external.github.rest.components.Schemas.CodespacesUserPublicKey;
        }
    }
    namespace CodespacesGetRepoPublicKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * CodespacesPublicKey
             * The public key used for setting Codespaces secrets.
             */
            slime.external.github.rest.components.Schemas.CodespacesPublicKey;
        }
    }
    namespace CodespacesGetRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export type $200 = /**
             * Codespaces Secret
             * Set repository secrets for GitHub Codespaces.
             */
            slime.external.github.rest.components.Schemas.RepoCodespacesSecret;
        }
    }
    namespace CodespacesGetSecretForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export type $200 = /**
             * Codespaces Secret
             * Secrets for a GitHub Codespace.
             */
            slime.external.github.rest.components.Schemas.CodespacesSecret;
        }
    }
    namespace CodespacesListForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
            export type $2 = slime.external.github.rest.components.Parameters.RepositoryIdInQuery;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                codespaces: /**
                 * Codespace
                 * A codespace.
                 */
                slime.external.github.rest.components.Schemas.Codespace[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesListInRepositoryForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
            export type $2 = slime.external.github.rest.components.Parameters.Owner;
            export type $3 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                codespaces: /**
                 * Codespace
                 * A codespace.
                 */
                slime.external.github.rest.components.Schemas.Codespace[];
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesListRepoSecrets {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                secrets: /**
                 * Codespaces Secret
                 * Set repository secrets for GitHub Codespaces.
                 */
                slime.external.github.rest.components.Schemas.RepoCodespacesSecret[];
            }
        }
    }
    namespace CodespacesListRepositoriesForSecretForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repositories: /**
                 * Minimal Repository
                 * Minimal Repository
                 */
                slime.external.github.rest.components.Schemas.MinimalRepository[];
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesListSecretsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                secrets: /**
                 * Codespaces Secret
                 * Secrets for a GitHub Codespace.
                 */
                slime.external.github.rest.components.Schemas.CodespacesSecret[];
            }
        }
    }
    namespace CodespacesRemoveRepositoryForSecretForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SecretName;
            export type RepositoryId = number;
        }
        export interface PathParameters {
            repository_id: Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesRepoMachinesForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            /**
             * example:
             * WestUs2
             */
            export type Location = string;
        }
        export interface QueryParameters {
            location?: /**
             * example:
             * WestUs2
             */
            Parameters.Location;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                machines: /**
                 * Codespace machine
                 * A description of the machine powering a codespace.
                 */
                slime.external.github.rest.components.Schemas.CodespaceMachine[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesSetRepositoriesForSecretForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
             */
            selected_repository_ids: number[];
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesStartForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
        }
        namespace Responses {
            export type $200 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $402 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesStopForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
        }
        namespace Responses {
            export type $200 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace CodespacesUpdateForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CodespaceName;
        }
        export interface RequestBody {
            /**
             * A valid machine to transition this codespace to.
             */
            machine?: string;
            /**
             * Display name for this codespace
             */
            display_name?: string;
            /**
             * Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
             */
            recent_folders?: string[];
        }
        namespace Responses {
            export type $200 = /**
             * Codespace
             * A codespace.
             */
            slime.external.github.rest.components.Schemas.Codespace;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace DependabotAddSelectedRepoToOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
            export type RepositoryId = number;
        }
        export interface PathParameters {
            repository_id: Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $409 {
            }
        }
    }
    namespace DependabotCreateOrUpdateOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
             */
            encrypted_value?: string; // ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
            /**
             * ID of the key you used to encrypt the secret.
             */
            key_id?: string;
            /**
             * Configures the access that repositories have to the organization secret. Can be one of:
             * \- `all` - All repositories in an organization can access the secret.
             * \- `private` - Private repositories in an organization can access the secret.
             * \- `selected` - Only specific repositories can access the secret.
             */
            visibility: "all" | "private" | "selected";
            /**
             * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
             */
            selected_repository_ids?: string[];
        }
        namespace Responses {
            export type $201 = /**
             * Empty Object
             * An object without any properties.
             */
            slime.external.github.rest.components.Schemas.EmptyObject;
            export interface $204 {
            }
        }
    }
    namespace DependabotCreateOrUpdateRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.
             */
            encrypted_value?: string; // ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
            /**
             * ID of the key you used to encrypt the secret.
             */
            key_id?: string;
        }
        namespace Responses {
            export interface $201 {
            }
            export interface $204 {
            }
        }
    }
    namespace DependabotDeleteOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace DependabotDeleteRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace DependabotGetOrgPublicKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * DependabotPublicKey
             * The public key used for setting Dependabot Secrets.
             */
            slime.external.github.rest.components.Schemas.DependabotPublicKey;
        }
    }
    namespace DependabotGetOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export type $200 = /**
             * Dependabot Secret for an Organization
             * Secrets for GitHub Dependabot for an organization.
             */
            slime.external.github.rest.components.Schemas.OrganizationDependabotSecret;
        }
    }
    namespace DependabotGetRepoPublicKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * DependabotPublicKey
             * The public key used for setting Dependabot Secrets.
             */
            slime.external.github.rest.components.Schemas.DependabotPublicKey;
        }
    }
    namespace DependabotGetRepoSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretName;
        }
        namespace Responses {
            export type $200 = /**
             * Dependabot Secret
             * Set secrets for Dependabot.
             */
            slime.external.github.rest.components.Schemas.DependabotSecret;
        }
    }
    namespace DependabotListOrgSecrets {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                secrets: /**
                 * Dependabot Secret for an Organization
                 * Secrets for GitHub Dependabot for an organization.
                 */
                slime.external.github.rest.components.Schemas.OrganizationDependabotSecret[];
            }
        }
    }
    namespace DependabotListRepoSecrets {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                secrets: /**
                 * Dependabot Secret
                 * Set secrets for Dependabot.
                 */
                slime.external.github.rest.components.Schemas.DependabotSecret[];
            }
        }
    }
    namespace DependabotListSelectedReposForOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                repositories: /**
                 * Minimal Repository
                 * Minimal Repository
                 */
                slime.external.github.rest.components.Schemas.MinimalRepository[];
            }
        }
    }
    namespace DependabotRemoveSelectedRepoFromOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
            export type RepositoryId = number;
        }
        export interface PathParameters {
            repository_id: Parameters.RepositoryId;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $409 {
            }
        }
    }
    namespace DependabotSetSelectedReposForOrgSecret {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretName;
        }
        export interface RequestBody {
            /**
             * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
             */
            selected_repository_ids: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace DependencyGraphDiffRange {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.ManifestPath;
            export type Basehead = string;
        }
        export interface PathParameters {
            basehead: Parameters.Basehead;
        }
        namespace Responses {
            export type $200 = /**
             * Dependency Graph Diff
             * A diff of the dependencies between two commits.
             */
            slime.external.github.rest.components.Schemas.DependencyGraphDiff;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace EmojisGet {
        namespace Responses {
            export interface $200 {
                [name: string]: string;
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        export interface RequestBody {
            /**
             * The names of the custom labels to add to the runner.
             */
            labels: [
                string,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?
            ];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.OrgId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminCreateRegistrationTokenForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $201 = /**
             * Authentication Token
             * Authentication Token
             */
            slime.external.github.rest.components.Schemas.AuthenticationToken;
        }
    }
    namespace EnterpriseAdminCreateRemoveTokenForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $201 = /**
             * Authentication Token
             * Authentication Token
             */
            slime.external.github.rest.components.Schemas.AuthenticationToken;
        }
    }
    namespace EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        export interface RequestBody {
            /**
             * Name of the runner group.
             */
            name: string;
            /**
             * Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
             */
            visibility?: "selected" | "all";
            /**
             * List of organization IDs that can access the runner group.
             */
            selected_organization_ids?: number[];
            /**
             * List of runner IDs to add to the runner group.
             */
            runners?: number[];
            /**
             * Whether the runner group can be used by `public` repositories.
             */
            allows_public_repositories?: boolean;
            /**
             * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
             */
            restricted_to_workflows?: boolean;
            /**
             * List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
             */
            selected_workflows?: string[];
        }
        namespace Responses {
            export type $201 = slime.external.github.rest.components.Schemas.RunnerGroupsEnterprise;
        }
    }
    namespace EnterpriseAdminDeleteScimGroupFromEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimGroupId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminDeleteUserFromEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.OrgId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.OrgId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminGetAllowedActionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.SelectedActions;
        }
    }
    namespace EnterpriseAdminGetAuditLog {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.AuditLogPhrase;
            export type $2 = slime.external.github.rest.components.Parameters.AuditLogInclude;
            export type $3 = slime.external.github.rest.components.Parameters.AuditLogAfter;
            export type $4 = slime.external.github.rest.components.Parameters.AuditLogBefore;
            export type $5 = slime.external.github.rest.components.Parameters.AuditLogOrder;
            export type $6 = slime.external.github.rest.components.Parameters.Page;
            export type $7 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.AuditLogEvent[];
        }
    }
    namespace EnterpriseAdminGetGithubActionsPermissionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ActionsEnterprisePermissions;
        }
    }
    namespace EnterpriseAdminGetProvisioningInformationForEnterpriseGroup {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimGroupId;
            export type ExcludedAttributes = string;
        }
        export interface QueryParameters {
            excludedAttributes?: Parameters.ExcludedAttributes;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimEnterpriseGroup;
        }
    }
    namespace EnterpriseAdminGetProvisioningInformationForEnterpriseUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimEnterpriseUser;
        }
    }
    namespace EnterpriseAdminGetSelfHostedRunnerForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = /**
             * Self hosted runners
             * A self hosted runner
             */
            slime.external.github.rest.components.Schemas.Runner;
        }
    }
    namespace EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.RunnerGroupsEnterprise;
        }
    }
    namespace EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                organizations: /**
                 * Organization Simple
                 * Organization Simple
                 */
                slime.external.github.rest.components.Schemas.OrganizationSimple[];
            }
        }
    }
    namespace EnterpriseAdminListProvisionedGroupsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.StartIndex;
            export type $2 = slime.external.github.rest.components.Parameters.Count;
            export type ExcludedAttributes = string;
            export type Filter = string;
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
            excludedAttributes?: Parameters.ExcludedAttributes;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimGroupListEnterprise;
        }
    }
    namespace EnterpriseAdminListProvisionedIdentitiesEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.StartIndex;
            export type $2 = slime.external.github.rest.components.Parameters.Count;
            export type Filter = string;
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimUserListEnterprise;
        }
    }
    namespace EnterpriseAdminListRunnerApplicationsForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        namespace Responses {
            export type $200 = /**
             * Runner Application
             * Runner Application
             */
            slime.external.github.rest.components.Schemas.RunnerApplication[];
        }
    }
    namespace EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                organizations: /**
                 * Organization Simple
                 * Organization Simple
                 */
                slime.external.github.rest.components.Schemas.OrganizationSimple[];
            }
        }
    }
    namespace EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.VisibleToOrganization;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                runner_groups: slime.external.github.rest.components.Schemas.RunnerGroupsEnterprise[];
            }
        }
    }
    namespace EnterpriseAdminListSelfHostedRunnersForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count?: number;
                runners?: /**
                 * Self hosted runners
                 * A self hosted runner
                 */
                slime.external.github.rest.components.Schemas.Runner[];
            }
        }
    }
    namespace EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                runners: /**
                 * Self hosted runners
                 * A self hosted runner
                 */
                slime.external.github.rest.components.Schemas.Runner[];
            }
        }
    }
    namespace EnterpriseAdminProvisionAndInviteEnterpriseGroup {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        export interface RequestBody {
            /**
             * The SCIM schema URIs.
             */
            schemas: string[];
            /**
             * The name of the SCIM group. This must match the GitHub organization that the group maps to.
             */
            displayName: string;
            members?: {
                /**
                 * The SCIM user ID for a user.
                 */
                value: string;
            }[];
        }
        namespace Responses {
            export type $201 = slime.external.github.rest.components.Schemas.ScimEnterpriseGroup;
        }
    }
    namespace EnterpriseAdminProvisionAndInviteEnterpriseUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        export interface RequestBody {
            /**
             * The SCIM schema URIs.
             */
            schemas: string[];
            /**
             * The username for the user.
             */
            userName: string;
            name: {
                /**
                 * The first name of the user.
                 */
                givenName: string;
                /**
                 * The last name of the user.
                 */
                familyName: string;
            };
            /**
             * List of user emails.
             */
            emails: {
                /**
                 * The email address.
                 */
                value: string;
                /**
                 * The type of email address.
                 */
                type: string;
                /**
                 * Whether this email address is the primary address.
                 */
                primary: boolean;
            }[];
            /**
             * List of SCIM group IDs the user is a member of.
             */
            groups?: {
                value?: string;
            }[];
        }
        namespace Responses {
            export type $201 = slime.external.github.rest.components.Schemas.ScimEnterpriseUser;
        }
    }
    namespace EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabelsReadonly;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerLabelName;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.OrgId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
            export type $2 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminSetAllowedActionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        export type RequestBody = slime.external.github.rest.components.Schemas.SelectedActions;
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerId;
        }
        export interface RequestBody {
            /**
             * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
             */
            labels: [
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?,
                string?
            ];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Responses.ActionsRunnerLabels;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace EnterpriseAdminSetGithubActionsPermissionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        export interface RequestBody {
            enabled_organizations: /* The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */ slime.external.github.rest.components.Schemas.EnabledOrganizations;
            allowed_actions?: /* The permissions policy that controls the actions and reusable workflows that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */ slime.external.github.rest.components.Schemas.AllowedActions;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminSetInformationForProvisionedEnterpriseGroup {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimGroupId;
        }
        export interface RequestBody {
            /**
             * The SCIM schema URIs.
             */
            schemas: string[];
            /**
             * The name of the SCIM group. This must match the GitHub organization that the group maps to.
             */
            displayName: string;
            members?: {
                /**
                 * The SCIM user ID for a user.
                 */
                value: string;
            }[];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimEnterpriseGroup;
        }
    }
    namespace EnterpriseAdminSetInformationForProvisionedEnterpriseUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        export interface RequestBody {
            /**
             * The SCIM schema URIs.
             */
            schemas: string[];
            /**
             * The username for the user.
             */
            userName: string;
            name: {
                /**
                 * The first name of the user.
                 */
                givenName: string;
                /**
                 * The last name of the user.
                 */
                familyName: string;
            };
            /**
             * List of user emails.
             */
            emails: {
                /**
                 * The email address.
                 */
                value: string;
                /**
                 * The type of email address.
                 */
                type: string;
                /**
                 * Whether this email address is the primary address.
                 */
                primary: boolean;
            }[];
            /**
             * List of SCIM group IDs the user is a member of.
             */
            groups?: {
                value?: string;
            }[];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimEnterpriseUser;
        }
    }
    namespace EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        export interface RequestBody {
            /**
             * List of organization IDs that can access the runner group.
             */
            selected_organization_ids: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
        }
        export interface RequestBody {
            /**
             * List of organization IDs to enable for GitHub Actions.
             */
            selected_organization_ids: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        export interface RequestBody {
            /**
             * List of runner IDs to add to the runner group.
             */
            runners: number[];
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace EnterpriseAdminUpdateAttributeForEnterpriseGroup {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimGroupId;
        }
        export interface RequestBody {
            /**
             * The SCIM schema URIs.
             */
            schemas: string[];
            /**
             * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
             */
            Operations: [
                {
                    op: "add" | "Add" | "remove" | "Remove" | "replace" | "Replace";
                    path?: string;
                    /**
                     * Can be any value - string, number, array or object.
                     */
                    value?: any;
                },
                ...{
                    op: "add" | "Add" | "remove" | "Remove" | "replace" | "Replace";
                    path?: string;
                    /**
                     * Can be any value - string, number, array or object.
                     */
                    value?: any;
                }[]
            ];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimEnterpriseGroup;
        }
    }
    namespace EnterpriseAdminUpdateAttributeForEnterpriseUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        export interface RequestBody {
            /**
             * The SCIM schema URIs.
             */
            schemas: string[];
            /**
             * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
             */
            Operations: {
                [key: string]: any;
            }[];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.ScimEnterpriseUser;
        }
    }
    namespace EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.RunnerGroupId;
        }
        export interface RequestBody {
            /**
             * Name of the runner group.
             */
            name?: string;
            /**
             * Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
             */
            visibility?: "selected" | "all";
            /**
             * Whether the runner group can be used by `public` repositories.
             */
            allows_public_repositories?: boolean;
            /**
             * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
             */
            restricted_to_workflows?: boolean;
            /**
             * List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
             */
            selected_workflows?: string[];
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.RunnerGroupsEnterprise;
        }
    }
    namespace GistsCheckIsStarred {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export interface $404 {
            }
        }
    }
    namespace GistsCreate {
        export interface RequestBody {
            /**
             * Description of the gist
             * example:
             * Example Ruby script
             */
            description?: string;
            /**
             * Names and content for the files that make up the gist
             * example:
             * {
             *   "hello.rb": {
             *     "content": "puts \"Hello, World!\""
             *   }
             * }
             */
            files: {
                [name: string]: {
                    /**
                     * Content of the file
                     */
                    content: string;
                };
            };
            public?: boolean | ("true" | "false");
        }
        namespace Responses {
            export type $201 = /**
             * Gist Simple
             * Gist Simple
             */
            slime.external.github.rest.components.Schemas.GistSimple;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GistsCreateComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        export interface RequestBody {
            /**
             * The comment text.
             * example:
             * Body of the attachment
             */
            body: string;
        }
        namespace Responses {
            export type $201 = /**
             * Gist Comment
             * A comment made to a gist.
             */
            slime.external.github.rest.components.Schemas.GistComment;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsDelete {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsDeleteComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
            export type $1 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsFork {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        namespace Responses {
            export type $201 = /**
             * Base Gist
             * Base Gist
             */
            slime.external.github.rest.components.Schemas.BaseGist;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GistsGet {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        namespace Responses {
            export type $200 = /**
             * Gist Simple
             * Gist Simple
             */
            slime.external.github.rest.components.Schemas.GistSimple;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.ForbiddenGist;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsGetComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
            export type $1 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export type $200 = /**
             * Gist Comment
             * A comment made to a gist.
             */
            slime.external.github.rest.components.Schemas.GistComment;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.ForbiddenGist;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsGetRevision {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
            export type Sha = string;
        }
        export interface PathParameters {
            sha: Parameters.Sha;
        }
        namespace Responses {
            export type $200 = /**
             * Gist Simple
             * Gist Simple
             */
            slime.external.github.rest.components.Schemas.GistSimple;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GistsList {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Base Gist
             * Base Gist
             */
            slime.external.github.rest.components.Schemas.BaseGist[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace GistsListComments {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Gist Comment
             * A comment made to a gist.
             */
            slime.external.github.rest.components.Schemas.GistComment[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsListCommits {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Gist Commit
             * Gist Commit
             */
            slime.external.github.rest.components.Schemas.GistCommit[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsListForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Base Gist
             * Base Gist
             */
            slime.external.github.rest.components.Schemas.BaseGist[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GistsListForks {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Gist Simple
             * Gist Simple
             */
            slime.external.github.rest.components.Schemas.GistSimple[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsListPublic {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Base Gist
             * Base Gist
             */
            slime.external.github.rest.components.Schemas.BaseGist[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GistsListStarred {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Base Gist
             * Base Gist
             */
            slime.external.github.rest.components.Schemas.BaseGist[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace GistsStar {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsUnstar {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GistsUpdate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
        }
        export type RequestBody = {
            /**
             * Description of the gist
             * example:
             * Example Ruby script
             */
            description: string;
            /**
             * Names of files to be updated
             * example:
             * {
             *   "hello.rb": {
             *     "content": "blah",
             *     "filename": "goodbye.rb"
             *   }
             * }
             */
            files?: {
                [name: string]: {
                    /**
                     * The new content of the file
                     */
                    content: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                };
            };
        } | {
            /**
             * Description of the gist
             * example:
             * Example Ruby script
             */
            description?: string;
            /**
             * Names of files to be updated
             * example:
             * {
             *   "hello.rb": {
             *     "content": "blah",
             *     "filename": "goodbye.rb"
             *   }
             * }
             */
            files: {
                [name: string]: {
                    /**
                     * The new content of the file
                     */
                    content: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                };
            };
        } | {
            /**
             * Description of the gist
             * example:
             * Example Ruby script
             */
            description?: string;
            /**
             * Names of files to be updated
             * example:
             * {
             *   "hello.rb": {
             *     "content": "blah",
             *     "filename": "goodbye.rb"
             *   }
             * }
             */
            files?: {
                [name: string]: {
                    /**
                     * The new content of the file
                     */
                    content: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                };
            };
        };
        namespace Responses {
            export type $200 = /**
             * Gist Simple
             * Gist Simple
             */
            slime.external.github.rest.components.Schemas.GistSimple;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GistsUpdateComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GistId;
            export type $1 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The comment text.
             * example:
             * Body of the attachment
             */
            body: string;
        }
        namespace Responses {
            export type $200 = /**
             * Gist Comment
             * A comment made to a gist.
             */
            slime.external.github.rest.components.Schemas.GistComment;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GitCreateBlob {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The new blob's content.
             */
            content: string;
            /**
             * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
             */
            encoding?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Short Blob
             * Short Blob
             */
            slime.external.github.rest.components.Schemas.ShortBlob;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitCreateCommit {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The commit message
             */
            message: string;
            /**
             * The SHA of the tree object this commit points to
             */
            tree: string;
            /**
             * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
             */
            parents?: string[];
            /**
             * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
             */
            author?: {
                /**
                 * The name of the author (or committer) of the commit
                 */
                name: string;
                /**
                 * The email of the author (or committer) of the commit
                 */
                email: string;
                /**
                 * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                 */
                date?: string; // date-time
            };
            /**
             * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
             */
            committer?: {
                /**
                 * The name of the author (or committer) of the commit
                 */
                name?: string;
                /**
                 * The email of the author (or committer) of the commit
                 */
                email?: string;
                /**
                 * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                 */
                date?: string; // date-time
            };
            /**
             * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
             */
            signature?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Git Commit
             * Low-level Git commit operations within a repository
             */
            slime.external.github.rest.components.Schemas.GitCommit;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitCreateRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
             */
            ref: string;
            /**
             * The SHA1 value for this reference.
             */
            sha: string;
            /**
             * example:
             * "refs/heads/newbranch"
             */
            key?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Git Reference
             * Git references within a repository
             */
            slime.external.github.rest.components.Schemas.GitRef;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitCreateTag {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The tag's name. This is typically a version (e.g., "v0.0.1").
             */
            tag: string;
            /**
             * The tag message.
             */
            message: string;
            /**
             * The SHA of the git object this is tagging.
             */
            object: string;
            /**
             * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
             */
            type: "commit" | "tree" | "blob";
            /**
             * An object with information about the individual creating the tag.
             */
            tagger?: {
                /**
                 * The name of the author of the tag
                 */
                name: string;
                /**
                 * The email of the author of the tag
                 */
                email: string;
                /**
                 * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                 */
                date?: string; // date-time
            };
        }
        namespace Responses {
            export type $201 = /**
             * Git Tag
             * Metadata for a Git tag
             */
            slime.external.github.rest.components.Schemas.GitTag;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitCreateTree {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
             */
            tree: {
                /**
                 * The file referenced in the tree.
                 */
                path?: string;
                /**
                 * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
                 */
                mode?: "100644" | "100755" | "040000" | "160000" | "120000";
                /**
                 * Either `blob`, `tree`, or `commit`.
                 */
                type?: "blob" | "tree" | "commit";
                /**
                 * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
                 *
                 * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
                 */
                sha?: string | null;
                /**
                 * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
                 *
                 * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
                 */
                content?: string;
            }[];
            /**
             * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
             * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
             *
             */
            base_tree?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Git Tree
             * The hierarchy between files in a Git repository.
             */
            slime.external.github.rest.components.Schemas.GitTree;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitDeleteRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitGetBlob {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type FileSha = string;
        }
        export interface PathParameters {
            file_sha: Parameters.FileSha;
        }
        namespace Responses {
            export type $200 = /**
             * Blob
             * Blob
             */
            slime.external.github.rest.components.Schemas.Blob;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitGetCommit {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommitSha;
        }
        namespace Responses {
            export type $200 = /**
             * Git Commit
             * Low-level Git commit operations within a repository
             */
            slime.external.github.rest.components.Schemas.GitCommit;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GitGetRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Git Reference
             * Git references within a repository
             */
            slime.external.github.rest.components.Schemas.GitRef;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GitGetTag {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type TagSha = string;
        }
        export interface PathParameters {
            tag_sha: Parameters.TagSha;
        }
        namespace Responses {
            export type $200 = /**
             * Git Tag
             * Metadata for a Git tag
             */
            slime.external.github.rest.components.Schemas.GitTag;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace GitGetTree {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Recursive = string;
            export type TreeSha = string;
        }
        export interface PathParameters {
            tree_sha: Parameters.TreeSha;
        }
        export interface QueryParameters {
            recursive?: Parameters.Recursive;
        }
        namespace Responses {
            export type $200 = /**
             * Git Tree
             * The hierarchy between files in a Git repository.
             */
            slime.external.github.rest.components.Schemas.GitTree;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitListMatchingRefs {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Git Reference
             * Git references within a repository
             */
            slime.external.github.rest.components.Schemas.GitRef[];
        }
    }
    namespace GitUpdateRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        export interface RequestBody {
            /**
             * The SHA1 value to set this reference to
             */
            sha: string;
            /**
             * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
             */
            force?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Git Reference
             * Git references within a repository
             */
            slime.external.github.rest.components.Schemas.GitRef;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace GitignoreGetAllTemplates {
        namespace Responses {
            export type $200 = string[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace GitignoreGetTemplate {
        namespace Parameters {
            export type Name = string;
        }
        export interface PathParameters {
            name: Parameters.Name;
        }
        namespace Responses {
            export type $200 = /**
             * Gitignore Template
             * Gitignore Template
             */
            slime.external.github.rest.components.Schemas.GitignoreTemplate;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace InteractionsGetRestrictionsForAuthenticatedUser {
        namespace Responses {
            export type $200 = /**
             * Interaction Limits
             * Interaction limit settings.
             */
            slime.external.github.rest.components.Schemas.InteractionLimitResponse | {
                [key: string]: any;
            };
            export interface $204 {
            }
        }
    }
    namespace InteractionsGetRestrictionsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * Interaction Limits
             * Interaction limit settings.
             */
            slime.external.github.rest.components.Schemas.InteractionLimitResponse | {
                [key: string]: any;
            };
        }
    }
    namespace InteractionsGetRestrictionsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Interaction Limits
             * Interaction limit settings.
             */
            slime.external.github.rest.components.Schemas.InteractionLimitResponse | {
                [key: string]: any;
            };
        }
    }
    namespace InteractionsRemoveRestrictionsForAuthenticatedUser {
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace InteractionsRemoveRestrictionsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace InteractionsRemoveRestrictionsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $409 {
            }
        }
    }
    namespace InteractionsSetRestrictionsForAuthenticatedUser {
        export type RequestBody = /**
         * Interaction Restrictions
         * Limit interactions to a specific type of user for a specified duration
         */
        slime.external.github.rest.components.Schemas.InteractionLimit;
        namespace Responses {
            export type $200 = /**
             * Interaction Limits
             * Interaction limit settings.
             */
            slime.external.github.rest.components.Schemas.InteractionLimitResponse;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace InteractionsSetRestrictionsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export type RequestBody = /**
         * Interaction Restrictions
         * Limit interactions to a specific type of user for a specified duration
         */
        slime.external.github.rest.components.Schemas.InteractionLimit;
        namespace Responses {
            export type $200 = /**
             * Interaction Limits
             * Interaction limit settings.
             */
            slime.external.github.rest.components.Schemas.InteractionLimitResponse;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace InteractionsSetRestrictionsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = /**
         * Interaction Restrictions
         * Limit interactions to a specific type of user for a specified duration
         */
        slime.external.github.rest.components.Schemas.InteractionLimit;
        namespace Responses {
            export type $200 = /**
             * Interaction Limits
             * Interaction limit settings.
             */
            slime.external.github.rest.components.Schemas.InteractionLimitResponse;
            export interface $409 {
            }
        }
    }
    namespace IssuesAddAssignees {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export interface RequestBody {
            /**
             * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
             */
            assignees?: string[];
        }
        namespace Responses {
            export type $201 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue;
        }
    }
    namespace IssuesAddLabels {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export type RequestBody = {
            /**
             * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."
             */
            labels?: [
                string,
                ...string[]
            ];
        } | [
            string,
            ...string[]
        ] | {
            labels?: [
                {
                    name: string;
                },
                ...{
                    name: string;
                }[]
            ];
        } | [
            {
                name: string;
            },
            ...{
                name: string;
            }[]
        ] | string;
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label[];
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesCheckUserCanBeAssigned {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Assignee = string;
        }
        export interface PathParameters {
            assignee: Parameters.Assignee;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace IssuesCreate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The title of the issue.
             */
            title: /* The title of the issue. */ string | number;
            /**
             * The contents of the issue.
             */
            body?: string;
            /**
             * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
             */
            assignee?: string | null;
            milestone?: null | null;
            /**
             * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
             */
            labels?: (string | {
                id?: number;
                name?: string;
                description?: string | null;
                color?: string | null;
            })[];
            /**
             * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
             */
            assignees?: string[];
        }
        namespace Responses {
            export type $201 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace IssuesCreateComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export interface RequestBody {
            /**
             * The contents of the comment.
             */
            body: string;
        }
        namespace Responses {
            export type $201 = /**
             * Issue Comment
             * Comments provide a way for people to collaborate on an issue.
             */
            slime.external.github.rest.components.Schemas.IssueComment;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesCreateLabel {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
             */
            name: string;
            /**
             * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
             */
            color?: string;
            /**
             * A short description of the label. Must be 100 characters or fewer.
             */
            description?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesCreateMilestone {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The title of the milestone.
             */
            title: string;
            /**
             * The state of the milestone. Either `open` or `closed`.
             */
            state?: "open" | "closed";
            /**
             * A description of the milestone.
             */
            description?: string;
            /**
             * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            due_on?: string; // date-time
        }
        namespace Responses {
            export type $201 = /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            slime.external.github.rest.components.Schemas.Milestone;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesDeleteComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace IssuesDeleteLabel {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Name = string;
        }
        export interface PathParameters {
            name: Parameters.Name;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace IssuesDeleteMilestone {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.MilestoneNumber;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesGet {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        namespace Responses {
            export type $200 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue;
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesGetComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export type $200 = /**
             * Issue Comment
             * Comments provide a way for people to collaborate on an issue.
             */
            slime.external.github.rest.components.Schemas.IssueComment;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesGetEvent {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type EventId = number;
        }
        export interface PathParameters {
            event_id: Parameters.EventId;
        }
        namespace Responses {
            export type $200 = /**
             * Issue Event
             * Issue Event
             */
            slime.external.github.rest.components.Schemas.IssueEvent;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesGetLabel {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Name = string;
        }
        export interface PathParameters {
            name: Parameters.Name;
        }
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesGetMilestone {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.MilestoneNumber;
        }
        namespace Responses {
            export type $200 = /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            slime.external.github.rest.components.Schemas.Milestone;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesList {
        namespace Parameters {
            export type $10 = slime.external.github.rest.components.Parameters.PerPage;
            export type $11 = slime.external.github.rest.components.Parameters.Page;
            export type $2 = slime.external.github.rest.components.Parameters.Labels;
            export type $4 = slime.external.github.rest.components.Parameters.Direction;
            export type $5 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type Collab = boolean;
            export type Filter = "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
            export type Orgs = boolean;
            export type Owned = boolean;
            export type Pulls = boolean;
            export type Sort = "created" | "updated" | "comments";
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
            state?: Parameters.State;
            sort?: Parameters.Sort;
            collab?: Parameters.Collab;
            orgs?: Parameters.Orgs;
            owned?: Parameters.Owned;
            pulls?: Parameters.Pulls;
        }
        namespace Responses {
            export type $200 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesListAssignees {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesListComments {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
            export type $3 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Issue Comment
             * Comments provide a way for people to collaborate on an issue.
             */
            slime.external.github.rest.components.Schemas.IssueComment[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesListCommentsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Sort;
            export type $4 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type $6 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
        }
        export interface QueryParameters {
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Issue Comment
             * Comments provide a way for people to collaborate on an issue.
             */
            slime.external.github.rest.components.Schemas.IssueComment[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesListEvents {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Issue Event for Issue
             * Issue Event for Issue
             */
            slime.external.github.rest.components.Schemas.IssueEventForIssue[];
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesListEventsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Issue Event
             * Issue Event
             */
            slime.external.github.rest.components.Schemas.IssueEvent[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesListEventsForTimeline {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Timeline Event
             * Timeline Event
             */
            slime.external.github.rest.components.Schemas.TimelineIssueEvents[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesListForAuthenticatedUser {
        namespace Parameters {
            export type $2 = slime.external.github.rest.components.Parameters.Labels;
            export type $4 = slime.external.github.rest.components.Parameters.Direction;
            export type $5 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Page;
            export type Filter = "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
            export type Sort = "created" | "updated" | "comments";
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
            state?: Parameters.State;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export type $200 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesListForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $3 = slime.external.github.rest.components.Parameters.Labels;
            export type $5 = slime.external.github.rest.components.Parameters.Direction;
            export type $6 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $7 = slime.external.github.rest.components.Parameters.PerPage;
            export type $8 = slime.external.github.rest.components.Parameters.Page;
            export type Filter = "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
            export type Sort = "created" | "updated" | "comments";
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
            state?: Parameters.State;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export type $200 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesListForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $10 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $11 = slime.external.github.rest.components.Parameters.PerPage;
            export type $12 = slime.external.github.rest.components.Parameters.Page;
            export type $7 = slime.external.github.rest.components.Parameters.Labels;
            export type $9 = slime.external.github.rest.components.Parameters.Direction;
            export type Assignee = string;
            export type Creator = string;
            export type Mentioned = string;
            export type Milestone = string;
            export type Sort = "created" | "updated" | "comments";
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            milestone?: Parameters.Milestone;
            state?: Parameters.State;
            assignee?: Parameters.Assignee;
            creator?: Parameters.Creator;
            mentioned?: Parameters.Mentioned;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export type $200 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue[];
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesListLabelsForMilestone {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.MilestoneNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label[];
        }
    }
    namespace IssuesListLabelsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesListLabelsOnIssue {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label[];
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesListMilestones {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type $6 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
            export type Sort = "due_on" | "completeness";
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            state?: Parameters.State;
            sort?: Parameters.Sort;
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            slime.external.github.rest.components.Schemas.Milestone[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesLock {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export type RequestBody = {
            /**
             * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
             * \* `off-topic`
             * \* `too heated`
             * \* `resolved`
             * \* `spam`
             */
            lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
        } | null;
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesRemoveAllLabels {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesRemoveAssignees {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export interface RequestBody {
            /**
             * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
             */
            assignees?: string[];
        }
        namespace Responses {
            export type $200 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue;
        }
    }
    namespace IssuesRemoveLabel {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
            export type Name = string;
        }
        export interface PathParameters {
            name: Parameters.Name;
        }
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace IssuesSetLabels {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export type RequestBody = {
            /**
             * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."
             */
            labels?: [
                string,
                ...string[]
            ];
        } | [
            string,
            ...string[]
        ] | {
            labels?: [
                {
                    name: string;
                },
                ...{
                    name: string;
                }[]
            ];
        } | [
            {
                name: string;
            },
            ...{
                name: string;
            }[]
        ] | string;
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label[];
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesUnlock {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace IssuesUpdate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export interface RequestBody {
            /**
             * The title of the issue.
             */
            title?: /* The title of the issue. */ null | null;
            /**
             * The contents of the issue.
             */
            body?: string | null;
            /**
             * Login for the user that this issue should be assigned to. **This field is deprecated.**
             */
            assignee?: string | null;
            /**
             * State of the issue. Either `open` or `closed`.
             */
            state?: "open" | "closed";
            milestone?: null | null;
            /**
             * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
             */
            labels?: (string | {
                id?: number;
                name?: string;
                description?: string | null;
                color?: string | null;
            })[];
            /**
             * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
             */
            assignees?: string[];
        }
        namespace Responses {
            export type $200 = /**
             * Issue
             * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
             */
            slime.external.github.rest.components.Schemas.Issue;
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace IssuesUpdateComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The contents of the comment.
             */
            body: string;
        }
        namespace Responses {
            export type $200 = /**
             * Issue Comment
             * Comments provide a way for people to collaborate on an issue.
             */
            slime.external.github.rest.components.Schemas.IssueComment;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace IssuesUpdateLabel {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Name = string;
        }
        export interface PathParameters {
            name: Parameters.Name;
        }
        export interface RequestBody {
            /**
             * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
             */
            new_name?: string;
            /**
             * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
             */
            color?: string;
            /**
             * A short description of the label. Must be 100 characters or fewer.
             */
            description?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Label
             * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
             */
            slime.external.github.rest.components.Schemas.Label;
        }
    }
    namespace IssuesUpdateMilestone {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.MilestoneNumber;
        }
        export interface RequestBody {
            /**
             * The title of the milestone.
             */
            title?: string;
            /**
             * The state of the milestone. Either `open` or `closed`.
             */
            state?: "open" | "closed";
            /**
             * A description of the milestone.
             */
            description?: string;
            /**
             * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            due_on?: string; // date-time
        }
        namespace Responses {
            export type $200 = /**
             * Milestone
             * A collection of related issues and pull requests.
             */
            slime.external.github.rest.components.Schemas.Milestone;
        }
    }
    namespace LicensesGet {
        namespace Parameters {
            export type License = string;
        }
        export interface PathParameters {
            license: Parameters.License;
        }
        namespace Responses {
            export type $200 = /**
             * License
             * License
             */
            slime.external.github.rest.components.Schemas.License;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace LicensesGetAllCommonlyUsed {
        namespace Parameters {
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type Featured = boolean;
        }
        export interface QueryParameters {
            featured?: Parameters.Featured;
        }
        namespace Responses {
            export type $200 = /**
             * License Simple
             * License Simple
             */
            slime.external.github.rest.components.Schemas.LicenseSimple[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace LicensesGetForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * License Content
             * License Content
             */
            slime.external.github.rest.components.Schemas.LicenseContent;
        }
    }
    namespace MarkdownRender {
        export interface RequestBody {
            /**
             * The Markdown text to render in HTML.
             */
            text: string;
            /**
             * The rendering mode. Can be either `markdown` or `gfm`.
             * example:
             * markdown
             */
            mode?: "markdown" | "gfm";
            /**
             * The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
             */
            context?: string;
        }
        namespace Responses {
            export type $200 = string;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace MarkdownRenderRaw {
        export type RequestBody = string;
        namespace Responses {
            export type $200 = string;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace MetaGet {
        namespace Responses {
            export type $200 = /**
             * Api Overview
             * Api Overview
             */
            slime.external.github.rest.components.Schemas.ApiOverview;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace MetaGetOctocat {
        namespace Parameters {
            export type S = string;
        }
        export interface QueryParameters {
            s?: Parameters.S;
        }
    }
    namespace MetaGetZen {
        namespace Responses {
            export type $200 = string;
        }
    }
    namespace MetaRoot {
        namespace Responses {
            export interface $200 {
                current_user_url: string; // uri-template
                current_user_authorizations_html_url: string; // uri-template
                authorizations_url: string; // uri-template
                code_search_url: string; // uri-template
                commit_search_url: string; // uri-template
                emails_url: string; // uri-template
                emojis_url: string; // uri-template
                events_url: string; // uri-template
                feeds_url: string; // uri-template
                followers_url: string; // uri-template
                following_url: string; // uri-template
                gists_url: string; // uri-template
                hub_url: string; // uri-template
                issue_search_url: string; // uri-template
                issues_url: string; // uri-template
                keys_url: string; // uri-template
                label_search_url: string; // uri-template
                notifications_url: string; // uri-template
                organization_url: string; // uri-template
                organization_repositories_url: string; // uri-template
                organization_teams_url: string; // uri-template
                public_gists_url: string; // uri-template
                rate_limit_url: string; // uri-template
                repository_url: string; // uri-template
                repository_search_url: string; // uri-template
                current_user_repositories_url: string; // uri-template
                starred_url: string; // uri-template
                starred_gists_url: string; // uri-template
                topic_search_url?: string; // uri-template
                user_url: string; // uri-template
                user_organizations_url: string; // uri-template
                user_repositories_url: string; // uri-template
                user_search_url: string; // uri-template
            }
        }
    }
    namespace MigrationsCancelImport {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace MigrationsDeleteArchiveForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.MigrationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsDeleteArchiveForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.MigrationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsDownloadArchiveForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.MigrationId;
        }
        namespace Responses {
            export interface $302 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsGetArchiveForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.MigrationId;
        }
        namespace Responses {
            export interface $302 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace MigrationsGetCommitAuthors {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SinceUser;
        }
        namespace Responses {
            export type $200 = /**
             * Porter Author
             * Porter Author
             */
            slime.external.github.rest.components.Schemas.PorterAuthor[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsGetImportStatus {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Import
             * A repository import from an external source.
             */
            slime.external.github.rest.components.Schemas.Import;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsGetLargeFiles {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Porter Large File
             * Porter Large File
             */
            slime.external.github.rest.components.Schemas.PorterLargeFile[];
        }
    }
    namespace MigrationsGetStatusForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.MigrationId;
            export type Exclude = string[];
        }
        export interface QueryParameters {
            exclude?: Parameters.Exclude;
        }
        namespace Responses {
            export type $200 = /**
             * Migration
             * A migration.
             */
            slime.external.github.rest.components.Schemas.Migration;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsGetStatusForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.MigrationId;
            export type Exclude = ("repositories")[];
        }
        export interface QueryParameters {
            exclude?: Parameters.Exclude;
        }
        namespace Responses {
            export type $200 = /**
             * Migration
             * A migration.
             */
            slime.external.github.rest.components.Schemas.Migration;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsListForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Migration
             * A migration.
             */
            slime.external.github.rest.components.Schemas.Migration[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace MigrationsListForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type Exclude = ("repositories")[];
        }
        export interface QueryParameters {
            exclude?: Parameters.Exclude;
        }
        namespace Responses {
            export type $200 = /**
             * Migration
             * A migration.
             */
            slime.external.github.rest.components.Schemas.Migration[];
        }
    }
    namespace MigrationsListReposForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.MigrationId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsListReposForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.MigrationId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsMapCommitAuthor {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type AuthorId = number;
        }
        export interface PathParameters {
            author_id: Parameters.AuthorId;
        }
        export interface RequestBody {
            /**
             * The new Git author email.
             */
            email?: string;
            /**
             * The new Git author name.
             */
            name?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Porter Author
             * Porter Author
             */
            slime.external.github.rest.components.Schemas.PorterAuthor;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace MigrationsSetLfsPreference {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
             */
            use_lfs: "opt_in" | "opt_out";
        }
        namespace Responses {
            export type $200 = /**
             * Import
             * A repository import from an external source.
             */
            slime.external.github.rest.components.Schemas.Import;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace MigrationsStartForAuthenticatedUser {
        export interface RequestBody {
            /**
             * Lock the repositories being migrated at the start of the migration
             * example:
             * true
             */
            lock_repositories?: boolean;
            /**
             * Do not include attachments in the migration
             * example:
             * true
             */
            exclude_attachments?: boolean;
            /**
             * Do not include releases in the migration
             * example:
             * true
             */
            exclude_releases?: boolean;
            /**
             * Indicates whether projects owned by the organization or users should be excluded.
             * example:
             * true
             */
            exclude_owner_projects?: boolean;
            /**
             * Exclude attributes from the API response to improve performance
             * example:
             * [
             *   "repositories"
             * ]
             */
            exclude?: ("repositories")[];
            repositories: string[];
        }
        namespace Responses {
            export type $201 = /**
             * Migration
             * A migration.
             */
            slime.external.github.rest.components.Schemas.Migration;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace MigrationsStartForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * A list of arrays indicating which repositories should be migrated.
             */
            repositories: string[];
            /**
             * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
             * example:
             * true
             */
            lock_repositories?: boolean;
            /**
             * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
             * example:
             * true
             */
            exclude_attachments?: boolean;
            /**
             * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
             * example:
             * true
             */
            exclude_releases?: boolean;
            /**
             * Indicates whether projects owned by the organization or users should be excluded. from the migration.
             * example:
             * true
             */
            exclude_owner_projects?: boolean;
            exclude?: ("repositories")[];
        }
        namespace Responses {
            export type $201 = /**
             * Migration
             * A migration.
             */
            slime.external.github.rest.components.Schemas.Migration;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace MigrationsStartImport {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The URL of the originating repository.
             */
            vcs_url: string;
            /**
             * The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
             */
            vcs?: "subversion" | "git" | "mercurial" | "tfvc";
            /**
             * If authentication is required, the username to provide to `vcs_url`.
             */
            vcs_username?: string;
            /**
             * If authentication is required, the password to provide to `vcs_url`.
             */
            vcs_password?: string;
            /**
             * For a tfvc import, the name of the project that is being imported.
             */
            tfvc_project?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Import
             * A repository import from an external source.
             */
            slime.external.github.rest.components.Schemas.Import;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace MigrationsUnlockRepoForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.MigrationId;
            export type $1 = slime.external.github.rest.components.Parameters.RepoName;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsUnlockRepoForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.MigrationId;
            export type $2 = slime.external.github.rest.components.Parameters.RepoName;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace MigrationsUpdateImport {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = {
            /**
             * The username to provide to the originating repository.
             */
            vcs_username?: string;
            /**
             * The password to provide to the originating repository.
             */
            vcs_password?: string;
            /**
             * The type of version control system you are migrating from.
             * example:
             * "git"
             */
            vcs?: "subversion" | "tfvc" | "git" | "mercurial";
            /**
             * For a tfvc import, the name of the project that is being imported.
             * example:
             * "project1"
             */
            tfvc_project?: string;
        } | null;
        namespace Responses {
            export type $200 = /**
             * Import
             * A repository import from an external source.
             */
            slime.external.github.rest.components.Schemas.Import;
        }
    }
    namespace OauthAuthorizationsCreateAuthorization {
        export interface RequestBody {
            /**
             * A list of scopes that this authorization is in.
             * example:
             * [
             *   "public_repo",
             *   "user"
             * ]
             */
            scopes?: string[] | null;
            /**
             * A note to remind you what the OAuth token is for.
             * example:
             * Update all gems
             */
            note?: string;
            /**
             * A URL to remind you what app the OAuth token is for.
             */
            note_url?: string;
            /**
             * The OAuth app client key for which to create the token.
             */
            client_id?: string;
            /**
             * The OAuth app client secret for which to create the token.
             */
            client_secret?: string;
            /**
             * A unique string to distinguish an authorization from others created for the same client ID and user.
             */
            fingerprint?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OauthAuthorizationsDeleteAuthorization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.AuthorizationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace OauthAuthorizationsDeleteGrant {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GrantId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace OauthAuthorizationsGetAuthorization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.AuthorizationId;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace OauthAuthorizationsGetGrant {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GrantId;
        }
        namespace Responses {
            export type $200 = /**
             * Application Grant
             * The authorization associated with an OAuth Access.
             */
            slime.external.github.rest.components.Schemas.ApplicationGrant;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace OauthAuthorizationsGetOrCreateAuthorizationForApp {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ClientId;
        }
        export interface RequestBody {
            /**
             * The OAuth app client secret for which to create the token.
             */
            client_secret: string;
            /**
             * A list of scopes that this authorization is in.
             * example:
             * [
             *   "public_repo",
             *   "user"
             * ]
             */
            scopes?: string[] | null;
            /**
             * A note to remind you what the OAuth token is for.
             * example:
             * Update all gems
             */
            note?: string;
            /**
             * A URL to remind you what app the OAuth token is for.
             */
            note_url?: string;
            /**
             * A unique string to distinguish an authorization from others created for the same client ID and user.
             */
            fingerprint?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $201 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ClientId;
            export type Fingerprint = string;
        }
        export interface PathParameters {
            fingerprint: Parameters.Fingerprint;
        }
        export interface RequestBody {
            /**
             * The OAuth app client secret for which to create the token.
             */
            client_secret: string;
            /**
             * A list of scopes that this authorization is in.
             * example:
             * [
             *   "public_repo",
             *   "user"
             * ]
             */
            scopes?: string[] | null;
            /**
             * A note to remind you what the OAuth token is for.
             * example:
             * Update all gems
             */
            note?: string;
            /**
             * A URL to remind you what app the OAuth token is for.
             */
            note_url?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $201 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OauthAuthorizationsListAuthorizations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
            export type ClientId = string;
        }
        export interface QueryParameters {
            client_id?: Parameters.ClientId;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OauthAuthorizationsListGrants {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
            export type ClientId = string;
        }
        export interface QueryParameters {
            client_id?: Parameters.ClientId;
        }
        namespace Responses {
            export type $200 = /**
             * Application Grant
             * The authorization associated with an OAuth Access.
             */
            slime.external.github.rest.components.Schemas.ApplicationGrant[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OauthAuthorizationsUpdateAuthorization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.AuthorizationId;
        }
        export interface RequestBody {
            /**
             * A list of scopes that this authorization is in.
             * example:
             * [
             *   "public_repo",
             *   "user"
             * ]
             */
            scopes?: string[] | null;
            /**
             * A list of scopes to add to this authorization.
             */
            add_scopes?: string[];
            /**
             * A list of scopes to remove from this authorization.
             */
            remove_scopes?: string[];
            /**
             * A note to remind you what the OAuth token is for.
             * example:
             * Update all gems
             */
            note?: string;
            /**
             * A URL to remind you what app the OAuth token is for.
             */
            note_url?: string;
            /**
             * A unique string to distinguish an authorization from others created for the same client ID and user.
             */
            fingerprint?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Authorization
             * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
             */
            slime.external.github.rest.components.Schemas.Authorization;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsBlockUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsCancelInvitation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.InvitationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsCheckBlockedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace OrgsCheckMembershipForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $302 {
            }
            export interface $404 {
            }
        }
    }
    namespace OrgsCheckPublicMembershipForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace OrgsConvertMemberToOutsideCollaborator {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $202 {
            }
            export interface $204 {
            }
            export interface $403 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsCreateInvitation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
             */
            invitee_id?: number;
            /**
             * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
             */
            email?: string;
            /**
             * Specify role for new member. Can be one of:
             * \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
             * \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
             * \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
             */
            role?: "admin" | "direct_member" | "billing_manager";
            /**
             * Specify IDs for the teams you want to invite new members to.
             */
            team_ids?: number[];
        }
        namespace Responses {
            export type $201 = /**
             * Organization Invitation
             * Organization Invitation
             */
            slime.external.github.rest.components.Schemas.OrganizationInvitation;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsCreateWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * Must be passed as "web".
             */
            name: string;
            /**
             * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
             */
            config: {
                url: /**
                 * The URL to which the payloads will be delivered.
                 * example:
                 * https://example.com/webhook
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigUrl /* uri */;
                content_type?: /**
                 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                 * example:
                 * "json"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigContentType;
                secret?: /**
                 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                 * example:
                 * "********"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigSecret;
                insecure_ssl?: slime.external.github.rest.components.Schemas.WebhookConfigInsecureSsl;
                /**
                 * example:
                 * "kdaigle"
                 */
                username?: string;
                /**
                 * example:
                 * "password"
                 */
                password?: string;
            };
            /**
             * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
             */
            events?: string[];
            /**
             * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
             */
            active?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Org Hook
             * Org Hook
             */
            slime.external.github.rest.components.Schemas.OrgHook;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsDeleteWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsGet {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Full
             * Organization Full
             */
            slime.external.github.rest.components.Schemas.OrganizationFull;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsGetAuditLog {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.AuditLogPhrase;
            export type $2 = slime.external.github.rest.components.Parameters.AuditLogInclude;
            export type $3 = slime.external.github.rest.components.Parameters.AuditLogAfter;
            export type $4 = slime.external.github.rest.components.Parameters.AuditLogBefore;
            export type $5 = slime.external.github.rest.components.Parameters.AuditLogOrder;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.AuditLogEvent[];
        }
    }
    namespace OrgsGetMembershipForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * Org Membership
             * Org Membership
             */
            slime.external.github.rest.components.Schemas.OrgMembership;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsGetMembershipForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Org Membership
             * Org Membership
             */
            slime.external.github.rest.components.Schemas.OrgMembership;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsGetWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export type $200 = /**
             * Org Hook
             * Org Hook
             */
            slime.external.github.rest.components.Schemas.OrgHook;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsGetWebhookConfigForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook Configuration
             * Configuration object of the webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfig;
        }
    }
    namespace OrgsGetWebhookDelivery {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
            export type $2 = slime.external.github.rest.components.Parameters.DeliveryId;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook delivery
             * Delivery made by a webhook.
             */
            slime.external.github.rest.components.Schemas.HookDelivery;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsList {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SinceOrg;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Simple
             * Organization Simple
             */
            slime.external.github.rest.components.Schemas.OrganizationSimple[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace OrgsListAppInstallations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                installations: /**
                 * Installation
                 * Installation
                 */
                slime.external.github.rest.components.Schemas.Installation[];
            }
        }
    }
    namespace OrgsListBlockedUsers {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
        }
    }
    namespace OrgsListCustomRoles {
        namespace Parameters {
            export type OrganizationId = string;
        }
        export interface PathParameters {
            organization_id: Parameters.OrganizationId;
        }
        namespace Responses {
            export interface $200 {
                /**
                 * The number of custom roles in this organization
                 * example:
                 * 3
                 */
                total_count?: number;
                custom_roles?: /**
                 * Organization Custom Repository Role
                 * Custom repository roles created by organization administrators
                 */
                slime.external.github.rest.components.Schemas.OrganizationCustomRepositoryRole[];
            }
        }
    }
    namespace OrgsListFailedInvitations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Invitation
             * Organization Invitation
             */
            slime.external.github.rest.components.Schemas.OrganizationInvitation[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsListForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Simple
             * Organization Simple
             */
            slime.external.github.rest.components.Schemas.OrganizationSimple[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace OrgsListForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Simple
             * Organization Simple
             */
            slime.external.github.rest.components.Schemas.OrganizationSimple[];
        }
    }
    namespace OrgsListInvitationTeams {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.InvitationId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsListMembers {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Filter = "2fa_disabled" | "all";
            export type Role = "all" | "admin" | "member";
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
            role?: Parameters.Role;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export interface $302 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsListMembershipsForAuthenticatedUser {
        namespace Parameters {
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type State = "active" | "pending";
        }
        export interface QueryParameters {
            state?: Parameters.State;
        }
        namespace Responses {
            export type $200 = /**
             * Org Membership
             * Org Membership
             */
            slime.external.github.rest.components.Schemas.OrgMembership[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsListOutsideCollaborators {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type Filter = "2fa_disabled" | "all";
        }
        export interface QueryParameters {
            filter?: Parameters.Filter;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
        }
    }
    namespace OrgsListPendingInvitations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Invitation
             * Organization Invitation
             */
            slime.external.github.rest.components.Schemas.OrganizationInvitation[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsListPublicMembers {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
        }
    }
    namespace OrgsListSamlSsoAuthorizations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type Login = string;
            export type Page = number;
        }
        export interface QueryParameters {
            page?: Parameters.Page;
            login?: Parameters.Login;
        }
        namespace Responses {
            export type $200 = /**
             * Credential Authorization
             * Credential Authorization
             */
            slime.external.github.rest.components.Schemas.CredentialAuthorization[];
        }
    }
    namespace OrgsListWebhookDeliveries {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Cursor;
        }
        namespace Responses {
            export type $200 = /**
             * Simple webhook delivery
             * Delivery made by a webhook, without request and response information.
             */
            slime.external.github.rest.components.Schemas.HookDeliveryItem[];
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsListWebhooks {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Org Hook
             * Org Hook
             */
            slime.external.github.rest.components.Schemas.OrgHook[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsPingWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsRedeliverWebhookDelivery {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
            export type $2 = slime.external.github.rest.components.Parameters.DeliveryId;
        }
        namespace Responses {
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsRemoveMember {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace OrgsRemoveMembershipForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsRemoveOutsideCollaborator {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $422 {
                message?: string;
                documentation_url?: string;
            }
        }
    }
    namespace OrgsRemovePublicMembershipForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace OrgsRemoveSamlSsoAuthorization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type CredentialId = number;
        }
        export interface PathParameters {
            credential_id: Parameters.CredentialId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace OrgsSetMembershipForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        export interface RequestBody {
            /**
             * The role to give the user in the organization. Can be one of:
             * \* `admin` - The user will become an owner of the organization.
             * \* `member` - The user will become a non-owner member of the organization.
             */
            role?: "admin" | "member";
        }
        namespace Responses {
            export type $200 = /**
             * Org Membership
             * Org Membership
             */
            slime.external.github.rest.components.Schemas.OrgMembership;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsSetPublicMembershipForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace OrgsUnblockUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace OrgsUpdate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * Billing email address. This address is not publicized.
             */
            billing_email?: string;
            /**
             * The company name.
             */
            company?: string;
            /**
             * The publicly visible email address.
             */
            email?: string;
            /**
             * The Twitter username of the company.
             */
            twitter_username?: string;
            /**
             * The location.
             */
            location?: string;
            /**
             * The shorthand name of the company.
             */
            name?: string;
            /**
             * The description of the company.
             */
            description?: string;
            /**
             * Toggles whether an organization can use organization projects.
             */
            has_organization_projects?: boolean;
            /**
             * Toggles whether repositories that belong to the organization can use repository projects.
             */
            has_repository_projects?: boolean;
            /**
             * Default permission level members have for organization repositories:
             * \* `read` - can pull, but not push to or administer this repository.
             * \* `write` - can pull and push, but not administer this repository.
             * \* `admin` - can pull, push, and administer this repository.
             * \* `none` - no permissions granted by default.
             */
            default_repository_permission?: "read" | "write" | "admin" | "none";
            /**
             * Toggles the ability of non-admin organization members to create repositories. Can be one of:
             * \* `true` - all organization members can create repositories.
             * \* `false` - only organization owners can create repositories.
             * Default: `true`
             * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
             */
            members_can_create_repositories?: boolean;
            /**
             * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
             * \* `true` - all organization members can create internal repositories.
             * \* `false` - only organization owners can create internal repositories.
             * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
             */
            members_can_create_internal_repositories?: boolean;
            /**
             * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
             * \* `true` - all organization members can create private repositories.
             * \* `false` - only organization owners can create private repositories.
             * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
             */
            members_can_create_private_repositories?: boolean;
            /**
             * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
             * \* `true` - all organization members can create public repositories.
             * \* `false` - only organization owners can create public repositories.
             * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
             */
            members_can_create_public_repositories?: boolean;
            /**
             * Specifies which types of repositories non-admin organization members can create. Can be one of:
             * \* `all` - all organization members can create public and private repositories.
             * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
             * \* `none` - only admin members can create repositories.
             * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
             */
            members_allowed_repository_creation_type?: "all" | "private" | "none";
            /**
             * Toggles whether organization members can create GitHub Pages sites. Can be one of:
             * \* `true` - all organization members can create GitHub Pages sites.
             * \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
             */
            members_can_create_pages?: boolean;
            /**
             * Toggles whether organization members can create public GitHub Pages sites. Can be one of:
             * \* `true` - all organization members can create public GitHub Pages sites.
             * \* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
             */
            members_can_create_public_pages?: boolean;
            /**
             * Toggles whether organization members can create private GitHub Pages sites. Can be one of:
             * \* `true` - all organization members can create private GitHub Pages sites.
             * \* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
             */
            members_can_create_private_pages?: boolean;
            /**
             * Toggles whether organization members can fork private organization repositories. Can be one of:
             * \* `true` - all organization members can fork private repositories within the organization.
             * \* `false` - no organization members can fork private repositories within the organization.
             */
            members_can_fork_private_repositories?: boolean;
            /**
             * example:
             * "http://github.blog"
             */
            blog?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Full
             * Organization Full
             */
            slime.external.github.rest.components.Schemas.OrganizationFull;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
            export type $422 = /**
             * Validation Error
             * Validation Error
             */
            slime.external.github.rest.components.Schemas.ValidationError | /**
             * Validation Error Simple
             * Validation Error Simple
             */
            slime.external.github.rest.components.Schemas.ValidationErrorSimple;
        }
    }
    namespace OrgsUpdateMembershipForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * The state that the membership should be in. Only `"active"` will be accepted.
             */
            state: "active";
        }
        namespace Responses {
            export type $200 = /**
             * Org Membership
             * Org Membership
             */
            slime.external.github.rest.components.Schemas.OrgMembership;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsUpdateWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
        }
        export interface RequestBody {
            /**
             * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
             */
            config?: {
                url: /**
                 * The URL to which the payloads will be delivered.
                 * example:
                 * https://example.com/webhook
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigUrl /* uri */;
                content_type?: /**
                 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                 * example:
                 * "json"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigContentType;
                secret?: /**
                 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                 * example:
                 * "********"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigSecret;
                insecure_ssl?: slime.external.github.rest.components.Schemas.WebhookConfigInsecureSsl;
            };
            /**
             * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
             */
            events?: string[];
            /**
             * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
             */
            active?: boolean;
            /**
             * example:
             * "web"
             */
            name?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Org Hook
             * Org Hook
             */
            slime.external.github.rest.components.Schemas.OrgHook;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace OrgsUpdateWebhookConfigForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.HookId;
        }
        /**
         * example:
         * {
         *   "content_type": "json",
         *   "insecure_ssl": "0",
         *   "secret": "********",
         *   "url": "https://example.com/webhook"
         * }
         */
        export interface RequestBody {
            url?: /**
             * The URL to which the payloads will be delivered.
             * example:
             * https://example.com/webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfigUrl /* uri */;
            content_type?: /**
             * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
             * example:
             * "json"
             */
            slime.external.github.rest.components.Schemas.WebhookConfigContentType;
            secret?: /**
             * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
             * example:
             * "********"
             */
            slime.external.github.rest.components.Schemas.WebhookConfigSecret;
            insecure_ssl?: slime.external.github.rest.components.Schemas.WebhookConfigInsecureSsl;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook Configuration
             * Configuration object of the webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfig;
        }
    }
    namespace PackagesDeletePackageForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesDeletePackageForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesDeletePackageForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesDeletePackageVersionForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesDeletePackageVersionForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Org;
            export type $3 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesDeletePackageVersionForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
            export type $3 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type State = "active" | "deleted";
        }
        export interface QueryParameters {
            state?: Parameters.State;
        }
        namespace Responses {
            export type $200 = /**
             * Package Version
             * A version of a software package
             */
            slime.external.github.rest.components.Schemas.PackageVersion[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesGetAllPackageVersionsForPackageOwnedByOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Org;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type State = "active" | "deleted";
        }
        export interface QueryParameters {
            state?: Parameters.State;
        }
        namespace Responses {
            export type $200 = /**
             * Package Version
             * A version of a software package
             */
            slime.external.github.rest.components.Schemas.PackageVersion[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesGetAllPackageVersionsForPackageOwnedByUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Package Version
             * A version of a software package
             */
            slime.external.github.rest.components.Schemas.PackageVersion[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesGetPackageForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
        }
        namespace Responses {
            export type $200 = /**
             * Package
             * A software package
             */
            slime.external.github.rest.components.Schemas.Package;
        }
    }
    namespace PackagesGetPackageForOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Org;
        }
        namespace Responses {
            export type $200 = /**
             * Package
             * A software package
             */
            slime.external.github.rest.components.Schemas.Package;
        }
    }
    namespace PackagesGetPackageForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Package
             * A software package
             */
            slime.external.github.rest.components.Schemas.Package;
        }
    }
    namespace PackagesGetPackageVersionForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export type $200 = /**
             * Package Version
             * A version of a software package
             */
            slime.external.github.rest.components.Schemas.PackageVersion;
        }
    }
    namespace PackagesGetPackageVersionForOrganization {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Org;
            export type $3 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export type $200 = /**
             * Package Version
             * A version of a software package
             */
            slime.external.github.rest.components.Schemas.PackageVersion;
        }
    }
    namespace PackagesGetPackageVersionForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.PackageVersionId;
            export type $3 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Package Version
             * A version of a software package
             */
            slime.external.github.rest.components.Schemas.PackageVersion;
        }
    }
    namespace PackagesListPackagesForAuthenticatedUser {
        namespace Parameters {
            export type $1 = slime.external.github.rest.components.Parameters.PackageVisibility;
            export type PackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        }
        export interface QueryParameters {
            package_type: Parameters.PackageType;
        }
        namespace Responses {
            export type $200 = /**
             * Package
             * A software package
             */
            slime.external.github.rest.components.Schemas.Package[];
        }
    }
    namespace PackagesListPackagesForOrganization {
        namespace Parameters {
            export type $1 = slime.external.github.rest.components.Parameters.Org;
            export type $2 = slime.external.github.rest.components.Parameters.PackageVisibility;
            export type PackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        }
        export interface QueryParameters {
            package_type: Parameters.PackageType;
        }
        namespace Responses {
            export type $200 = /**
             * Package
             * A software package
             */
            slime.external.github.rest.components.Schemas.Package[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace PackagesListPackagesForUser {
        namespace Parameters {
            export type $1 = slime.external.github.rest.components.Parameters.PackageVisibility;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
            export type PackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        }
        export interface QueryParameters {
            package_type: Parameters.PackageType;
        }
        namespace Responses {
            export type $200 = /**
             * Package
             * A software package
             */
            slime.external.github.rest.components.Schemas.Package[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace PackagesRestorePackageForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type Token = string;
        }
        export interface QueryParameters {
            token?: Parameters.Token;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesRestorePackageForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Org;
            export type Token = string;
        }
        export interface QueryParameters {
            token?: Parameters.Token;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesRestorePackageForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
            export type Token = string;
        }
        export interface QueryParameters {
            token?: Parameters.Token;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesRestorePackageVersionForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesRestorePackageVersionForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Org;
            export type $3 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PackagesRestorePackageVersionForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PackageType;
            export type $1 = slime.external.github.rest.components.Parameters.PackageName;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
            export type $3 = slime.external.github.rest.components.Parameters.PackageVersionId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ProjectsAddCollaborator {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        export type RequestBody = {
            /**
             * The permission to grant the collaborator.
             * example:
             * write
             */
            permission?: "read" | "write" | "admin";
        } | null;
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ProjectsCreateCard {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ColumnId;
        }
        export type RequestBody = {
            /**
             * The project card's note
             * example:
             * Update all gems
             */
            note: string | null;
        } | {
            /**
             * The unique identifier of the content associated with the card
             * example:
             * 42
             */
            content_id: number;
            /**
             * The piece of content associated with the card
             * example:
             * PullRequest
             */
            content_type: string;
        };
        namespace Responses {
            export type $201 = /**
             * Project Card
             * Project cards represent a scope of work.
             */
            slime.external.github.rest.components.Schemas.ProjectCard;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = /**
             * Validation Error
             * Validation Error
             */
            slime.external.github.rest.components.Schemas.ValidationError | /**
             * Validation Error Simple
             * Validation Error Simple
             */
            slime.external.github.rest.components.Schemas.ValidationErrorSimple;
            export interface $503 {
                code?: string;
                message?: string;
                documentation_url?: string;
                errors?: {
                    code?: string;
                    message?: string;
                }[];
            }
        }
    }
    namespace ProjectsCreateColumn {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        export interface RequestBody {
            /**
             * Name of the project column
             * example:
             * Remaining tasks
             */
            name: string;
        }
        namespace Responses {
            export type $201 = /**
             * Project Column
             * Project columns contain cards of work.
             */
            slime.external.github.rest.components.Schemas.ProjectColumn;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsCreateForAuthenticatedUser {
        export interface RequestBody {
            /**
             * Name of the project
             * example:
             * Week One Sprint
             */
            name: string;
            /**
             * Body of the project
             * example:
             * This project represents the sprint of the first week in January
             */
            body?: string | null;
        }
        namespace Responses {
            export type $201 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsCreateForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * The name of the project.
             */
            name: string;
            /**
             * The description of the project.
             */
            body?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsCreateForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The name of the project.
             */
            name: string;
            /**
             * The description of the project.
             */
            body?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsDelete {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export interface $403 {
                message?: string;
                documentation_url?: string;
                errors?: string[];
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace ProjectsDeleteCard {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CardId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export interface $403 {
                message?: string;
                documentation_url?: string;
                errors?: string[];
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ProjectsDeleteColumn {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ColumnId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ProjectsGet {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        namespace Responses {
            export type $200 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ProjectsGetCard {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CardId;
        }
        namespace Responses {
            export type $200 = /**
             * Project Card
             * Project cards represent a scope of work.
             */
            slime.external.github.rest.components.Schemas.ProjectCard;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ProjectsGetColumn {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ColumnId;
        }
        namespace Responses {
            export type $200 = /**
             * Project Column
             * Project columns contain cards of work.
             */
            slime.external.github.rest.components.Schemas.ProjectColumn;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ProjectsGetPermissionForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Project Collaborator Permission
             * Project Collaborator Permission
             */
            slime.external.github.rest.components.Schemas.ProjectCollaboratorPermission;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ProjectsListCards {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ColumnId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type ArchivedState = "all" | "archived" | "not_archived";
        }
        export interface QueryParameters {
            archived_state?: Parameters.ArchivedState;
        }
        namespace Responses {
            export type $200 = /**
             * Project Card
             * Project cards represent a scope of work.
             */
            slime.external.github.rest.components.Schemas.ProjectCard[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ProjectsListCollaborators {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type Affiliation = "outside" | "direct" | "all";
        }
        export interface QueryParameters {
            affiliation?: Parameters.Affiliation;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ProjectsListColumns {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Project Column
             * Project columns contain cards of work.
             */
            slime.external.github.rest.components.Schemas.ProjectColumn[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ProjectsListForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            state?: Parameters.State;
        }
        namespace Responses {
            export type $200 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsListForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            state?: Parameters.State;
        }
        namespace Responses {
            export type $200 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project[];
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsListForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            state?: Parameters.State;
        }
        namespace Responses {
            export type $200 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ProjectsMoveCard {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CardId;
        }
        export interface RequestBody {
            /**
             * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
             * example:
             * bottom
             */
            position: string; // ^(?:top|bottom|after:\d+)$
            /**
             * The unique identifier of the column the card should be moved to
             * example:
             * 42
             */
            column_id?: number;
        }
        namespace Responses {
            export interface $201 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export interface $403 {
                message?: string;
                documentation_url?: string;
                errors?: {
                    code?: string;
                    message?: string;
                    resource?: string;
                    field?: string;
                }[];
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export interface $503 {
                code?: string;
                message?: string;
                documentation_url?: string;
                errors?: {
                    code?: string;
                    message?: string;
                }[];
            }
        }
    }
    namespace ProjectsMoveColumn {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ColumnId;
        }
        export interface RequestBody {
            /**
             * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
             * example:
             * last
             */
            position: string; // ^(?:first|last|after:\d+)$
        }
        namespace Responses {
            export interface $201 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsRemoveCollaborator {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ProjectsUpdate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        export interface RequestBody {
            /**
             * Name of the project
             * example:
             * Week One Sprint
             */
            name?: string;
            /**
             * Body of the project
             * example:
             * This project represents the sprint of the first week in January
             */
            body?: string | null;
            /**
             * State of the project; either 'open' or 'closed'
             * example:
             * open
             */
            state?: string;
            /**
             * The baseline permission that all organization members have on this project
             */
            organization_permission?: "read" | "write" | "admin" | "none";
            /**
             * Whether or not this project can be seen by everyone.
             */
            private?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Project
             * Projects are a way to organize columns and cards of work.
             */
            slime.external.github.rest.components.Schemas.Project;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export interface $403 {
                message?: string;
                documentation_url?: string;
                errors?: string[];
            }
            export interface $404 {
            }
            export type $410 = slime.external.github.rest.components.Responses.Gone;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsUpdateCard {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.CardId;
        }
        export interface RequestBody {
            /**
             * The project card's note
             * example:
             * Update all gems
             */
            note?: string | null;
            /**
             * Whether or not the card is archived
             * example:
             * false
             */
            archived?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Project Card
             * Project cards represent a scope of work.
             */
            slime.external.github.rest.components.Schemas.ProjectCard;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ProjectsUpdateColumn {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.ColumnId;
        }
        export interface RequestBody {
            /**
             * Name of the project column
             * example:
             * Remaining tasks
             */
            name: string;
        }
        namespace Responses {
            export type $200 = /**
             * Project Column
             * Project columns contain cards of work.
             */
            slime.external.github.rest.components.Schemas.ProjectColumn;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace PullsCheckIfMerged {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace PullsCreate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The title of the new pull request.
             */
            title?: string;
            /**
             * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
             */
            head: string;
            /**
             * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
             */
            base: string;
            /**
             * The contents of the pull request.
             */
            body?: string;
            /**
             * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
             */
            maintainer_can_modify?: boolean;
            /**
             * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
             */
            draft?: boolean;
            /**
             * example:
             * 1
             */
            issue?: number;
        }
        namespace Responses {
            export type $201 = /**
             * Pull Request
             * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
             */
            slime.external.github.rest.components.Schemas.PullRequest;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace PullsCreateReplyForReviewComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The text of the review comment.
             */
            body: string;
        }
        namespace Responses {
            export type $201 = /**
             * Pull Request Review Comment
             * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
             */
            slime.external.github.rest.components.Schemas.PullRequestReviewComment;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PullsCreateReview {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export interface RequestBody {
            /**
             * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
             */
            commit_id?: string;
            /**
             * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
             */
            body?: string;
            /**
             * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
             */
            event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
            /**
             * Use the following table to specify the location, destination, and contents of the draft review comment.
             */
            comments?: {
                /**
                 * The relative path to the file that necessitates a review comment.
                 */
                path: string;
                /**
                 * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
                 */
                position?: number;
                /**
                 * Text of the review comment.
                 */
                body: string;
                /**
                 * example:
                 * 28
                 */
                line?: number;
                /**
                 * example:
                 * RIGHT
                 */
                side?: string;
                /**
                 * example:
                 * 26
                 */
                start_line?: number;
                /**
                 * example:
                 * LEFT
                 */
                start_side?: string;
            }[];
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review
             * Pull Request Reviews are reviews on pull requests.
             */
            slime.external.github.rest.components.Schemas.PullRequestReview;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace PullsCreateReviewComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export interface RequestBody {
            /**
             * The text of the review comment.
             */
            body: string;
            /**
             * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
             */
            commit_id?: string;
            /**
             * The relative path to the file that necessitates a comment.
             */
            path?: string;
            /**
             * **This paramter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
             */
            position?: number;
            /**
             * In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
             */
            side?: "LEFT" | "RIGHT";
            /**
             * The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
             */
            line?: number;
            /**
             * **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
             */
            start_line?: number;
            /**
             * **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
             */
            start_side?: "LEFT" | "RIGHT" | "side";
            /**
             * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
             * example:
             * 2
             */
            in_reply_to?: number;
        }
        namespace Responses {
            export type $201 = /**
             * Pull Request Review Comment
             * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
             */
            slime.external.github.rest.components.Schemas.PullRequestReviewComment;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace PullsDeletePendingReview {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReviewId;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review
             * Pull Request Reviews are reviews on pull requests.
             */
            slime.external.github.rest.components.Schemas.PullRequestReview;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace PullsDeleteReviewComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PullsDismissReview {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReviewId;
        }
        export interface RequestBody {
            /**
             * The message for the pull request review dismissal
             */
            message: string;
            /**
             * example:
             * "APPROVE"
             */
            event?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review
             * Pull Request Reviews are reviews on pull requests.
             */
            slime.external.github.rest.components.Schemas.PullRequestReview;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace PullsGet {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request
             * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
             */
            slime.external.github.rest.components.Schemas.PullRequest;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace PullsGetReview {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReviewId;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review
             * Pull Request Reviews are reviews on pull requests.
             */
            slime.external.github.rest.components.Schemas.PullRequestReview;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PullsGetReviewComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review Comment
             * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
             */
            slime.external.github.rest.components.Schemas.PullRequestReviewComment;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PullsList {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $7 = slime.external.github.rest.components.Parameters.PerPage;
            export type $8 = slime.external.github.rest.components.Parameters.Page;
            export type Base = string;
            export type Direction = "asc" | "desc";
            export type Head = string;
            export type Sort = "created" | "updated" | "popularity" | "long-running";
            export type State = "open" | "closed" | "all";
        }
        export interface QueryParameters {
            state?: Parameters.State;
            head?: Parameters.Head;
            base?: Parameters.Base;
            sort?: Parameters.Sort;
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Simple
             * Pull Request Simple
             */
            slime.external.github.rest.components.Schemas.PullRequestSimple[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace PullsListCommentsForReview {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReviewId;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Legacy Review Comment
             * Legacy Review Comment
             */
            slime.external.github.rest.components.Schemas.ReviewComment[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace PullsListCommits {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Commit
             * Commit
             */
            slime.external.github.rest.components.Schemas.Commit[];
        }
    }
    namespace PullsListFiles {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Diff Entry
             * Diff Entry
             */
            slime.external.github.rest.components.Schemas.DiffEntry[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace PullsListRequestedReviewers {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review Request
             * Pull Request Review Request
             */
            slime.external.github.rest.components.Schemas.PullRequestReviewRequest;
        }
    }
    namespace PullsListReviewComments {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.Sort;
            export type $5 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
        }
        export interface QueryParameters {
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review Comment
             * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
             */
            slime.external.github.rest.components.Schemas.PullRequestReviewComment[];
        }
    }
    namespace PullsListReviewCommentsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $4 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type $6 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
            export type Sort = "created" | "updated" | "created_at";
        }
        export interface QueryParameters {
            sort?: Parameters.Sort;
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review Comment
             * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
             */
            slime.external.github.rest.components.Schemas.PullRequestReviewComment[];
        }
    }
    namespace PullsListReviews {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review
             * Pull Request Reviews are reviews on pull requests.
             */
            slime.external.github.rest.components.Schemas.PullRequestReview[];
        }
    }
    namespace PullsMerge {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export type RequestBody = {
            /**
             * Title for the automatic commit message.
             */
            commit_title?: string;
            /**
             * Extra detail to append to automatic commit message.
             */
            commit_message?: string;
            /**
             * SHA that pull request head must match to allow merge.
             */
            sha?: string;
            /**
             * Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
             */
            merge_method?: "merge" | "squash" | "rebase";
        } | null;
        namespace Responses {
            export type $200 = /**
             * Pull Request Merge Result
             * Pull Request Merge Result
             */
            slime.external.github.rest.components.Schemas.PullRequestMergeResult;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export interface $405 {
                message?: string;
                documentation_url?: string;
            }
            export interface $409 {
                message?: string;
                documentation_url?: string;
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace PullsRemoveRequestedReviewers {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export interface RequestBody {
            /**
             * An array of user `login`s that will be removed.
             */
            reviewers: string[];
            /**
             * An array of team `slug`s that will be removed.
             */
            team_reviewers?: string[];
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Simple
             * Pull Request Simple
             */
            slime.external.github.rest.components.Schemas.PullRequestSimple;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace PullsRequestReviewers {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export type RequestBody = {
            /**
             * An array of user `login`s that will be requested.
             */
            reviewers: string[];
            /**
             * An array of team `slug`s that will be requested.
             */
            team_reviewers?: string[];
        } | {
            /**
             * An array of user `login`s that will be requested.
             */
            reviewers?: string[];
            /**
             * An array of team `slug`s that will be requested.
             */
            team_reviewers: string[];
        };
        namespace Responses {
            export type $201 = /**
             * Pull Request Simple
             * Pull Request Simple
             */
            slime.external.github.rest.components.Schemas.PullRequestSimple;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export interface $422 {
            }
        }
    }
    namespace PullsSubmitReview {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReviewId;
        }
        export interface RequestBody {
            /**
             * The body text of the pull request review
             */
            body?: string;
            /**
             * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
             */
            event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review
             * Pull Request Reviews are reviews on pull requests.
             */
            slime.external.github.rest.components.Schemas.PullRequestReview;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace PullsUpdate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export interface RequestBody {
            /**
             * The title of the pull request.
             */
            title?: string;
            /**
             * The contents of the pull request.
             */
            body?: string;
            /**
             * State of this Pull Request. Either `open` or `closed`.
             */
            state?: "open" | "closed";
            /**
             * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
             */
            base?: string;
            /**
             * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
             */
            maintainer_can_modify?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request
             * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
             */
            slime.external.github.rest.components.Schemas.PullRequest;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace PullsUpdateBranch {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
        }
        export type RequestBody = {
            /**
             * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
             */
            expected_head_sha?: string;
        } | null;
        namespace Responses {
            export interface $202 {
                message?: string;
                url?: string;
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace PullsUpdateReview {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PullNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReviewId;
        }
        export interface RequestBody {
            /**
             * The body text of the pull request review.
             */
            body: string;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review
             * Pull Request Reviews are reviews on pull requests.
             */
            slime.external.github.rest.components.Schemas.PullRequestReview;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace PullsUpdateReviewComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The text of the reply to the review comment.
             */
            body: string;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Review Comment
             * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
             */
            slime.external.github.rest.components.Schemas.PullRequestReviewComment;
        }
    }
    namespace RateLimitGet {
        namespace Responses {
            export type $200 = /**
             * Rate Limit Overview
             * Rate Limit Overview
             */
            slime.external.github.rest.components.Schemas.RateLimitOverview;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReactionsCreateForCommitComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReactionsCreateForIssue {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReactionsCreateForIssueComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReactionsCreateForPullRequestReviewComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReactionsCreateForRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
             */
            content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReactionsCreateForTeamDiscussionCommentInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
        }
    }
    namespace ReactionsCreateForTeamDiscussionCommentLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $2 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
        }
    }
    namespace ReactionsCreateForTeamDiscussionInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
        }
    }
    namespace ReactionsCreateForTeamDiscussionLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        export interface RequestBody {
            /**
             * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        namespace Responses {
            export type $201 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction;
        }
    }
    namespace ReactionsDeleteForCommitComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
            export type $3 = slime.external.github.rest.components.Parameters.ReactionId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReactionsDeleteForIssue {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReactionId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReactionsDeleteForIssueComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
            export type $3 = slime.external.github.rest.components.Parameters.ReactionId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReactionsDeleteForPullRequestComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
            export type $3 = slime.external.github.rest.components.Parameters.ReactionId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReactionsDeleteForRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
            export type $3 = slime.external.github.rest.components.Parameters.ReactionId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReactionsDeleteForTeamDiscussion {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.ReactionId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReactionsDeleteForTeamDiscussionComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.CommentNumber;
            export type $4 = slime.external.github.rest.components.Parameters.ReactionId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReactionsListForCommitComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReactionsListForIssue {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.IssueNumber;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $410 = slime.external.github.rest.components.Responses.Gone;
        }
    }
    namespace ReactionsListForIssueComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReactionsListForPullRequestReviewComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReactionsListForRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReactionsListForTeamDiscussionCommentInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.CommentNumber;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type $6 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
        }
    }
    namespace ReactionsListForTeamDiscussionCommentLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $2 = slime.external.github.rest.components.Parameters.CommentNumber;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
        }
    }
    namespace ReactionsListForTeamDiscussionInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
        }
    }
    namespace ReactionsListForTeamDiscussionLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Content = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        }
        export interface QueryParameters {
            content?: Parameters.Content;
        }
        namespace Responses {
            export type $200 = /**
             * Reaction
             * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
             */
            slime.external.github.rest.components.Schemas.Reaction[];
        }
    }
    namespace ReposAcceptInvitationForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InvitationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
        }
    }
    namespace ReposAddAppAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * apps parameter
             */
            apps: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            slime.external.github.rest.components.Schemas.Integration[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposAddCollaborator {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        export interface RequestBody {
            /**
             * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
             * \* `pull` - can pull, but not push to or administer this repository.
             * \* `push` - can pull and push, but not administer this repository.
             * \* `admin` - can pull, push and administer this repository.
             * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
             * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
             * \* custom repository role name - A custom repository role, if the owning organization has defined any.
             */
            permission?: "pull" | "push" | "admin" | "maintain" | "triage";
            /**
             * example:
             * "push"
             */
            permissions?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Repository Invitation
             * Repository invitations let you manage who you collaborate with.
             */
            slime.external.github.rest.components.Schemas.RepositoryInvitation;
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposAddStatusCheckContexts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * contexts parameter
             */
            contexts: string[];
        } | string[];
        namespace Responses {
            export type $200 = string[];
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposAddTeamAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * teams parameter
             */
            teams: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposAddUserAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * users parameter
             */
            users: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCheckCollaborator {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace ReposCheckVulnerabilityAlerts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace ReposCodeownersErrors {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Ref = string;
        }
        export interface QueryParameters {
            ref?: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * CODEOWNERS errors
             * A list of errors found in a repo's CODEOWNERS file
             */
            slime.external.github.rest.components.Schemas.CodeownersErrors;
            export interface $404 {
            }
        }
    }
    namespace ReposCompareCommits {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type Basehead = string;
        }
        export interface PathParameters {
            basehead: Parameters.Basehead;
        }
        namespace Responses {
            export type $200 = /**
             * Commit Comparison
             * Commit Comparison
             */
            slime.external.github.rest.components.Schemas.CommitComparison;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace ReposCreateAutolink {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.
             */
            key_prefix: string;
            /**
             * The URL must contain <num> for the reference number.
             */
            url_template: string;
        }
        namespace Responses {
            export type $201 = /**
             * Autolink reference
             * An autolink reference.
             */
            slime.external.github.rest.components.Schemas.Autolink;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateCommitComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommitSha;
        }
        export interface RequestBody {
            /**
             * The contents of the comment.
             */
            body: string;
            /**
             * Relative path of the file to comment on.
             */
            path?: string;
            /**
             * Line index in the diff to comment on.
             */
            position?: number;
            /**
             * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
             */
            line?: number;
        }
        namespace Responses {
            export type $201 = /**
             * Commit Comment
             * Commit Comment
             */
            slime.external.github.rest.components.Schemas.CommitComment;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateCommitSignatureProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Protected Branch Admin Enforced
             * Protected Branch Admin Enforced
             */
            slime.external.github.rest.components.Schemas.ProtectedBranchAdminEnforced;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposCreateCommitStatus {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Sha = string;
        }
        export interface PathParameters {
            sha: Parameters.Sha;
        }
        export interface RequestBody {
            /**
             * The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
             */
            state: "error" | "failure" | "pending" | "success";
            /**
             * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
             * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
             * `http://ci.example.com/user/repo/build/sha`
             */
            target_url?: string;
            /**
             * A short description of the status.
             */
            description?: string;
            /**
             * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
             */
            context?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Status
             * The status of a commit.
             */
            slime.external.github.rest.components.Schemas.Status;
        }
    }
    namespace ReposCreateDeployKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * A name for the key.
             */
            title?: string;
            /**
             * The contents of the key.
             */
            key: string;
            /**
             * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
             *
             * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
             */
            read_only?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Deploy Key
             * An SSH key granting access to a single repository.
             */
            slime.external.github.rest.components.Schemas.DeployKey;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateDeployment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The ref to deploy. This can be a branch, tag, or SHA.
             */
            ref: string;
            /**
             * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
             */
            task?: string;
            /**
             * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
             */
            auto_merge?: boolean;
            /**
             * The [status](https://docs.github.com/rest/reference/commits#commit-statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
             */
            required_contexts?: string[];
            payload?: {
                [name: string]: any;
            } | string;
            /**
             * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
             */
            environment?: string;
            /**
             * Short description of the deployment.
             */
            description?: string | null;
            /**
             * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
             */
            transient_environment?: boolean;
            /**
             * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
             */
            production_environment?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Deployment
             * A request for a specific ref(branch,sha,tag) to be deployed
             */
            slime.external.github.rest.components.Schemas.Deployment;
            export interface $202 {
                message?: string;
            }
            export interface $409 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateDeploymentStatus {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.DeploymentId;
        }
        export interface RequestBody {
            /**
             * The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
             */
            state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
            /**
             * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
             */
            target_url?: string;
            /**
             * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
             */
            log_url?: string;
            /**
             * A short description of the status. The maximum description length is 140 characters.
             */
            description?: string;
            /**
             * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
             */
            environment?: "production" | "staging" | "qa";
            /**
             * Sets the URL for accessing your environment. Default: `""`
             */
            environment_url?: string;
            /**
             * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
             */
            auto_inactive?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Deployment Status
             * The status of a deployment.
             */
            slime.external.github.rest.components.Schemas.DeploymentStatus;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateDispatchEvent {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * A custom webhook event name. Must be 100 characters or fewer.
             */
            event_type: string;
            /**
             * JSON payload with extra information about the webhook event that your action or worklow may use.
             */
            client_payload?: {
                [name: string]: any;
            };
        }
        namespace Responses {
            export interface $204 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateForAuthenticatedUser {
        export interface RequestBody {
            /**
             * The name of the repository.
             * example:
             * Team Environment
             */
            name: string;
            /**
             * A short description of the repository.
             */
            description?: string;
            /**
             * A URL with more information about the repository.
             */
            homepage?: string;
            /**
             * Whether the repository is private.
             */
            private?: boolean;
            /**
             * Whether issues are enabled.
             * example:
             * true
             */
            has_issues?: boolean;
            /**
             * Whether projects are enabled.
             * example:
             * true
             */
            has_projects?: boolean;
            /**
             * Whether the wiki is enabled.
             * example:
             * true
             */
            has_wiki?: boolean;
            /**
             * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
             */
            team_id?: number;
            /**
             * Whether the repository is initialized with a minimal README.
             */
            auto_init?: boolean;
            /**
             * The desired language or platform to apply to the .gitignore.
             * example:
             * Haskell
             */
            gitignore_template?: string;
            /**
             * The license keyword of the open source license for this repository.
             * example:
             * mit
             */
            license_template?: string;
            /**
             * Whether to allow squash merges for pull requests.
             * example:
             * true
             */
            allow_squash_merge?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * example:
             * true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * example:
             * true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow Auto-merge to be used on pull requests.
             * example:
             * false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to delete head branches when pull requests are merged
             * example:
             * false
             */
            delete_branch_on_merge?: boolean;
            /**
             * Whether downloads are enabled.
             * example:
             * true
             */
            has_downloads?: boolean;
            /**
             * Whether this repository acts as a template that can be used to generate new repositories.
             * example:
             * true
             */
            is_template?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Repository
             * A git repository
             */
            slime.external.github.rest.components.Schemas.Repository;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateFork {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = {
            /**
             * Optional parameter to specify the organization name if forking into an organization.
             */
            organization?: string;
        } | null;
        namespace Responses {
            export type $202 = /**
             * Full Repository
             * Full Repository
             */
            slime.external.github.rest.components.Schemas.FullRepository;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * The name of the repository.
             */
            name: string;
            /**
             * A short description of the repository.
             */
            description?: string;
            /**
             * A URL with more information about the repository.
             */
            homepage?: string;
            /**
             * Whether the repository is private.
             */
            private?: boolean;
            /**
             * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
             */
            visibility?: "public" | "private" | "internal";
            /**
             * Either `true` to enable issues for this repository or `false` to disable them.
             */
            has_issues?: boolean;
            /**
             * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
             */
            has_projects?: boolean;
            /**
             * Either `true` to enable the wiki for this repository or `false` to disable it.
             */
            has_wiki?: boolean;
            /**
             * Either `true` to make this repo available as a template repository or `false` to prevent it.
             */
            is_template?: boolean;
            /**
             * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
             */
            team_id?: number;
            /**
             * Pass `true` to create an initial commit with empty README.
             */
            auto_init?: boolean;
            /**
             * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
             */
            gitignore_template?: string;
            /**
             * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
             */
            license_template?: string;
            /**
             * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
             */
            allow_squash_merge?: boolean;
            /**
             * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
             */
            allow_merge_commit?: boolean;
            /**
             * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
             */
            allow_rebase_merge?: boolean;
            /**
             * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
             */
            allow_auto_merge?: boolean;
            /**
             * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
             */
            delete_branch_on_merge?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Repository
             * A git repository
             */
            slime.external.github.rest.components.Schemas.Repository;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateOrUpdateEnvironment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.EnvironmentName;
        }
        export type RequestBody = {
            wait_timer?: /**
             * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
             * example:
             * 30
             */
            slime.external.github.rest.components.Schemas.WaitTimer;
            /**
             * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
             */
            reviewers?: {
                type?: /**
                 * The type of reviewer. Must be one of: `User` or `Team`
                 * example:
                 * User
                 */
                slime.external.github.rest.components.Schemas.DeploymentReviewerType;
                /**
                 * The id of the user or team who can review the deployment
                 * example:
                 * 4532992
                 */
                id?: number;
            }[] | null;
            deployment_branch_policy?: /* The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */ slime.external.github.rest.components.Schemas.DeploymentBranchPolicy;
        } | null;
        namespace Responses {
            export type $200 = /**
             * Environment
             * Details of a deployment environment
             */
            slime.external.github.rest.components.Schemas.Environment;
            export type $422 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace ReposCreateOrUpdateFileContents {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Path = string;
        }
        export interface PathParameters {
            path: Parameters.Path;
        }
        export interface RequestBody {
            /**
             * The commit message.
             */
            message: string;
            /**
             * The new file content, using Base64 encoding.
             */
            content: string;
            /**
             * **Required if you are updating a file**. The blob SHA of the file being replaced.
             */
            sha?: string;
            /**
             * The branch name. Default: the repository’s default branch (usually `master`)
             */
            branch?: string;
            /**
             * The person that committed the file. Default: the authenticated user.
             */
            committer?: {
                /**
                 * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                 */
                name: string;
                /**
                 * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                 */
                email: string;
                /**
                 * example:
                 * "2013-01-05T13:13:22+05:00"
                 */
                date?: string;
            };
            /**
             * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
             */
            author?: {
                /**
                 * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                 */
                name: string;
                /**
                 * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                 */
                email: string;
                /**
                 * example:
                 * "2013-01-15T17:13:22+05:00"
                 */
                date?: string;
            };
        }
        namespace Responses {
            export type $200 = /**
             * File Commit
             * File Commit
             */
            slime.external.github.rest.components.Schemas.FileCommit;
            export type $201 = /**
             * File Commit
             * File Commit
             */
            slime.external.github.rest.components.Schemas.FileCommit;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreatePagesSite {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        /**
         * The source branch and directory used to publish your Pages site.
         */
        export type RequestBody = {
            /**
             * The source branch and directory used to publish your Pages site.
             */
            source: {
                /**
                 * The repository branch used to publish your site's source files.
                 */
                branch: string;
                /**
                 * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
                 */
                path?: "/" | "/docs";
            };
        } | null;
        namespace Responses {
            export type $201 = /**
             * GitHub Pages
             * The configuration for GitHub Pages for a repository.
             */
            slime.external.github.rest.components.Schemas.Page;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The name of the tag.
             */
            tag_name: string;
            /**
             * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
             */
            target_commitish?: string;
            /**
             * The name of the release.
             */
            name?: string;
            /**
             * Text describing the contents of the tag.
             */
            body?: string;
            /**
             * `true` to create a draft (unpublished) release, `false` to create a published one.
             */
            draft?: boolean;
            /**
             * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
             */
            prerelease?: boolean;
            /**
             * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
             */
            discussion_category_name?: string;
            /**
             * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
             */
            generate_release_notes?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Release
             * A release.
             */
            slime.external.github.rest.components.Schemas.Release;
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposCreateTagProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * An optional glob pattern to match against when enforcing tag protection.
             */
            pattern: string;
        }
        namespace Responses {
            export type $201 = /**
             * Tag protection
             * Tag protection
             */
            slime.external.github.rest.components.Schemas.TagProtection;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposCreateUsingTemplate {
        namespace Parameters {
            export type TemplateOwner = string;
            export type TemplateRepo = string;
        }
        export interface PathParameters {
            template_owner: Parameters.TemplateOwner;
            template_repo: Parameters.TemplateRepo;
        }
        export interface RequestBody {
            /**
             * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
             */
            owner?: string;
            /**
             * The name of the new repository.
             */
            name: string;
            /**
             * A short description of the new repository.
             */
            description?: string;
            /**
             * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
             */
            include_all_branches?: boolean;
            /**
             * Either `true` to create a new private repository or `false` to create a new public one.
             */
            private?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Repository
             * A git repository
             */
            slime.external.github.rest.components.Schemas.Repository;
        }
    }
    namespace ReposCreateWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = {
            /**
             * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
             */
            name?: string;
            /**
             * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
             */
            config?: {
                url?: /**
                 * The URL to which the payloads will be delivered.
                 * example:
                 * https://example.com/webhook
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigUrl /* uri */;
                content_type?: /**
                 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                 * example:
                 * "json"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigContentType;
                secret?: /**
                 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                 * example:
                 * "********"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigSecret;
                insecure_ssl?: slime.external.github.rest.components.Schemas.WebhookConfigInsecureSsl;
                /**
                 * example:
                 * "abc"
                 */
                token?: string;
                /**
                 * example:
                 * "sha256"
                 */
                digest?: string;
            };
            /**
             * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
             */
            events?: string[];
            /**
             * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
             */
            active?: boolean;
        } | null;
        namespace Responses {
            export type $201 = /**
             * Webhook
             * Webhooks for repositories.
             */
            slime.external.github.rest.components.Schemas.Hook;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposDeclineInvitationForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.InvitationId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
        }
    }
    namespace ReposDelete {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $307 = slime.external.github.rest.components.Responses.TemporaryRedirect;
            export interface $403 {
                message?: string;
                documentation_url?: string;
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDeleteAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDeleteAdminBranchProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDeleteAnEnvironment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.EnvironmentName;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDeleteAutolink {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AutolinkId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDeleteBranchProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ReposDeleteCommitComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDeleteCommitSignatureProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDeleteDeployKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.KeyId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDeleteDeployment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.DeploymentId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ReposDeleteFile {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Path = string;
        }
        export interface PathParameters {
            path: Parameters.Path;
        }
        export interface RequestBody {
            /**
             * The commit message.
             */
            message: string;
            /**
             * The blob SHA of the file being replaced.
             */
            sha: string;
            /**
             * The branch name. Default: the repository’s default branch (usually `master`)
             */
            branch?: string;
            /**
             * object containing information about the committer.
             */
            committer?: {
                /**
                 * The name of the author (or committer) of the commit
                 */
                name?: string;
                /**
                 * The email of the author (or committer) of the commit
                 */
                email?: string;
            };
            /**
             * object containing information about the author.
             */
            author?: {
                /**
                 * The name of the author (or committer) of the commit
                 */
                name?: string;
                /**
                 * The email of the author (or committer) of the commit
                 */
                email?: string;
            };
        }
        namespace Responses {
            export type $200 = /**
             * File Commit
             * File Commit
             */
            slime.external.github.rest.components.Schemas.FileCommit;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace ReposDeleteInvitation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.InvitationId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDeletePagesSite {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposDeletePullRequestReviewProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDeleteRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDeleteReleaseAsset {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AssetId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDeleteTagProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.TagProtectionId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDeleteWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposDisableAutomatedSecurityFixes {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDisableLfsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDisableVulnerabilityAlerts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposDownloadTarballArchive {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export interface $302 {
            }
        }
    }
    namespace ReposDownloadZipballArchive {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export interface $302 {
            }
        }
    }
    namespace ReposEnableAutomatedSecurityFixes {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposEnableLfsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export interface $403 {
            }
        }
    }
    namespace ReposEnableVulnerabilityAlerts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposGenerateReleaseNotes {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The tag name for the release. This can be an existing tag or a new one.
             */
            tag_name: string;
            /**
             * Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
             */
            target_commitish?: string;
            /**
             * The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
             */
            previous_tag_name?: string;
            /**
             * Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
             */
            configuration_file_path?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Generated Release Notes Content
             * Generated name and body describing a release
             */
            slime.external.github.rest.components.Schemas.ReleaseNotesContent;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGet {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Full Repository
             * Full Repository
             */
            slime.external.github.rest.components.Schemas.FullRepository;
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Branch Restriction Policy
             * Branch Restriction Policy
             */
            slime.external.github.rest.components.Schemas.BranchRestrictionPolicy;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetAdminBranchProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Protected Branch Admin Enforced
             * Protected Branch Admin Enforced
             */
            slime.external.github.rest.components.Schemas.ProtectedBranchAdminEnforced;
        }
    }
    namespace ReposGetAllEnvironments {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export interface $200 {
                /**
                 * The number of environments in this repository
                 * example:
                 * 5
                 */
                total_count?: number;
                environments?: /**
                 * Environment
                 * Details of a deployment environment
                 */
                slime.external.github.rest.components.Schemas.Environment[];
            }
        }
    }
    namespace ReposGetAllStatusCheckContexts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = string[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetAllTopics {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export type $200 = /**
             * Topic
             * A topic aggregates entities that are related to a subject.
             */
            slime.external.github.rest.components.Schemas.Topic;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetAppsWithAccessToProtectedBranch {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            slime.external.github.rest.components.Schemas.Integration[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetAutolink {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AutolinkId;
        }
        namespace Responses {
            export type $200 = /**
             * Autolink reference
             * An autolink reference.
             */
            slime.external.github.rest.components.Schemas.Autolink;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetBranch {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Branch With Protection
             * Branch With Protection
             */
            slime.external.github.rest.components.Schemas.BranchWithProtection;
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetBranchProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Branch Protection
             * Branch Protection
             */
            slime.external.github.rest.components.Schemas.BranchProtection;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetClones {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Per;
        }
        namespace Responses {
            export type $200 = /**
             * Clone Traffic
             * Clone Traffic
             */
            slime.external.github.rest.components.Schemas.CloneTraffic;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ReposGetCodeFrequencyStats {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Code Frequency Stat
             * Code Frequency Stat
             */
            slime.external.github.rest.components.Schemas.CodeFrequencyStat[];
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export type $204 = slime.external.github.rest.components.Responses.NoContent;
        }
    }
    namespace ReposGetCollaboratorPermissionLevel {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Repository Collaborator Permission
             * Repository Collaborator Permission
             */
            slime.external.github.rest.components.Schemas.RepositoryCollaboratorPermission;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetCombinedStatusForRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Combined Commit Status
             * Combined Commit Status
             */
            slime.external.github.rest.components.Schemas.CombinedCommitStatus;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetCommit {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Commit
             * Commit
             */
            slime.external.github.rest.components.Schemas.Commit;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace ReposGetCommitActivityStats {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Commit Activity
             * Commit Activity
             */
            slime.external.github.rest.components.Schemas.CommitActivity[];
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export type $204 = slime.external.github.rest.components.Responses.NoContent;
        }
    }
    namespace ReposGetCommitComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        namespace Responses {
            export type $200 = /**
             * Commit Comment
             * Commit Comment
             */
            slime.external.github.rest.components.Schemas.CommitComment;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetCommitSignatureProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Protected Branch Admin Enforced
             * Protected Branch Admin Enforced
             */
            slime.external.github.rest.components.Schemas.ProtectedBranchAdminEnforced;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetCommunityProfileMetrics {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Community Profile
             * Community Profile
             */
            slime.external.github.rest.components.Schemas.CommunityProfile;
        }
    }
    namespace ReposGetContent {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Path = string;
            export type Ref = string;
        }
        export interface PathParameters {
            path: Parameters.Path;
        }
        export interface QueryParameters {
            ref?: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Content Directory
             * A list of directory items
             */
            slime.external.github.rest.components.Schemas.ContentDirectory | /**
             * Content File
             * Content File
             */
            slime.external.github.rest.components.Schemas.ContentFile | /**
             * Symlink Content
             * An object describing a symlink
             */
            slime.external.github.rest.components.Schemas.ContentSymlink | /**
             * Symlink Content
             * An object describing a symlink
             */
            slime.external.github.rest.components.Schemas.ContentSubmodule;
            export type $302 = slime.external.github.rest.components.Responses.Found;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetContributorsStats {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Contributor Activity
             * Contributor Activity
             */
            slime.external.github.rest.components.Schemas.ContributorActivity[];
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export type $204 = slime.external.github.rest.components.Responses.NoContent;
        }
    }
    namespace ReposGetDeployKey {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.KeyId;
        }
        namespace Responses {
            export type $200 = /**
             * Deploy Key
             * An SSH key granting access to a single repository.
             */
            slime.external.github.rest.components.Schemas.DeployKey;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetDeployment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.DeploymentId;
        }
        namespace Responses {
            export type $200 = /**
             * Deployment
             * A request for a specific ref(branch,sha,tag) to be deployed
             */
            slime.external.github.rest.components.Schemas.Deployment;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetDeploymentStatus {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.DeploymentId;
            export type StatusId = number;
        }
        export interface PathParameters {
            status_id: Parameters.StatusId;
        }
        namespace Responses {
            export type $200 = /**
             * Deployment Status
             * The status of a deployment.
             */
            slime.external.github.rest.components.Schemas.DeploymentStatus;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetEnvironment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.EnvironmentName;
        }
        namespace Responses {
            export type $200 = /**
             * Environment
             * Details of a deployment environment
             */
            slime.external.github.rest.components.Schemas.Environment;
        }
    }
    namespace ReposGetLatestPagesBuild {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Page Build
             * Page Build
             */
            slime.external.github.rest.components.Schemas.PageBuild;
        }
    }
    namespace ReposGetLatestRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Release
             * A release.
             */
            slime.external.github.rest.components.Schemas.Release;
        }
    }
    namespace ReposGetPages {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * GitHub Pages
             * The configuration for GitHub Pages for a repository.
             */
            slime.external.github.rest.components.Schemas.Page;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetPagesBuild {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type BuildId = number;
        }
        export interface PathParameters {
            build_id: Parameters.BuildId;
        }
        namespace Responses {
            export type $200 = /**
             * Page Build
             * Page Build
             */
            slime.external.github.rest.components.Schemas.PageBuild;
        }
    }
    namespace ReposGetPagesHealthCheck {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Pages Health Check Status
             * Pages Health Check Status
             */
            slime.external.github.rest.components.Schemas.PagesHealthCheck;
            export type $202 = /**
             * Empty Object
             * An object without any properties.
             */
            slime.external.github.rest.components.Schemas.EmptyObject;
            export interface $400 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export interface $422 {
            }
        }
    }
    namespace ReposGetParticipationStats {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /* Participation Stats */ slime.external.github.rest.components.Schemas.ParticipationStats;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetPullRequestReviewProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Protected Branch Pull Request Review
             * Protected Branch Pull Request Review
             */
            slime.external.github.rest.components.Schemas.ProtectedBranchPullRequestReview;
        }
    }
    namespace ReposGetPunchCardStats {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Code Frequency Stat
             * Code Frequency Stat
             */
            slime.external.github.rest.components.Schemas.CodeFrequencyStat[];
            export type $204 = slime.external.github.rest.components.Responses.NoContent;
        }
    }
    namespace ReposGetReadme {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Ref = string;
        }
        export interface QueryParameters {
            ref?: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Content File
             * Content File
             */
            slime.external.github.rest.components.Schemas.ContentFile;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposGetReadmeInDirectory {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Dir = string;
            export type Ref = string;
        }
        export interface PathParameters {
            dir: Parameters.Dir;
        }
        export interface QueryParameters {
            ref?: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Content File
             * Content File
             */
            slime.external.github.rest.components.Schemas.ContentFile;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposGetRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
        }
        namespace Responses {
            export type $200 = /**
             * Release
             * A release.
             */
            slime.external.github.rest.components.Schemas.Release;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetReleaseAsset {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AssetId;
        }
        namespace Responses {
            export type $200 = /**
             * Release Asset
             * Data related to a release.
             */
            slime.external.github.rest.components.Schemas.ReleaseAsset;
            export type $302 = slime.external.github.rest.components.Responses.Found;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetReleaseByTag {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type Tag = string;
        }
        export interface PathParameters {
            tag: Parameters.Tag;
        }
        namespace Responses {
            export type $200 = /**
             * Release
             * A release.
             */
            slime.external.github.rest.components.Schemas.Release;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetStatusChecksProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Status Check Policy
             * Status Check Policy
             */
            slime.external.github.rest.components.Schemas.StatusCheckPolicy;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetTeamsWithAccessToProtectedBranch {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetTopPaths {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Content Traffic
             * Content Traffic
             */
            slime.external.github.rest.components.Schemas.ContentTraffic[];
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ReposGetTopReferrers {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Referrer Traffic
             * Referrer Traffic
             */
            slime.external.github.rest.components.Schemas.ReferrerTraffic[];
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ReposGetUsersWithAccessToProtectedBranch {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetViews {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Per;
        }
        namespace Responses {
            export type $200 = /**
             * View Traffic
             * View Traffic
             */
            slime.external.github.rest.components.Schemas.ViewTraffic;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace ReposGetWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook
             * Webhooks for repositories.
             */
            slime.external.github.rest.components.Schemas.Hook;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposGetWebhookConfigForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook Configuration
             * Configuration object of the webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfig;
        }
    }
    namespace ReposGetWebhookDelivery {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
            export type $3 = slime.external.github.rest.components.Parameters.DeliveryId;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook delivery
             * Delivery made by a webhook.
             */
            slime.external.github.rest.components.Schemas.HookDelivery;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposListAutolinks {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Autolink reference
             * An autolink reference.
             */
            slime.external.github.rest.components.Schemas.Autolink[];
        }
    }
    namespace ReposListBranches {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Protected = boolean;
        }
        export interface QueryParameters {
            protected?: Parameters.Protected;
        }
        namespace Responses {
            export type $200 = /**
             * Short Branch
             * Short Branch
             */
            slime.external.github.rest.components.Schemas.ShortBranch[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposListBranchesForHeadCommit {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommitSha;
        }
        namespace Responses {
            export type $200 = /**
             * Branch Short
             * Branch Short
             */
            slime.external.github.rest.components.Schemas.BranchShort[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposListCollaborators {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Affiliation = "outside" | "direct" | "all";
        }
        export interface QueryParameters {
            affiliation?: Parameters.Affiliation;
        }
        namespace Responses {
            export type $200 = /**
             * Collaborator
             * Collaborator
             */
            slime.external.github.rest.components.Schemas.Collaborator[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposListCommentsForCommit {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommitSha;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Commit Comment
             * Commit Comment
             */
            slime.external.github.rest.components.Schemas.CommitComment[];
        }
    }
    namespace ReposListCommitCommentsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Commit Comment
             * Commit Comment
             */
            slime.external.github.rest.components.Schemas.CommitComment[];
        }
    }
    namespace ReposListCommitStatusesForRef {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Ref = string;
        }
        export interface PathParameters {
            ref: Parameters.Ref;
        }
        namespace Responses {
            export type $200 = /**
             * Status
             * The status of a commit.
             */
            slime.external.github.rest.components.Schemas.Status[];
            export type $301 = slime.external.github.rest.components.Responses.MovedPermanently;
        }
    }
    namespace ReposListCommits {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $5 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $7 = slime.external.github.rest.components.Parameters.PerPage;
            export type $8 = slime.external.github.rest.components.Parameters.Page;
            export type Author = string;
            export type Path = string;
            export type Sha = string;
            export type Until = string; // date-time
        }
        export interface QueryParameters {
            sha?: Parameters.Sha;
            path?: Parameters.Path;
            author?: Parameters.Author;
            until?: Parameters.Until /* date-time */;
        }
        namespace Responses {
            export type $200 = /**
             * Commit
             * Commit
             */
            slime.external.github.rest.components.Schemas.Commit[];
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $409 = slime.external.github.rest.components.Responses.Conflict;
            export type $500 = slime.external.github.rest.components.Responses.InternalError;
        }
    }
    namespace ReposListContributors {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Anon = string;
        }
        export interface QueryParameters {
            anon?: Parameters.Anon;
        }
        namespace Responses {
            export type $200 = /**
             * Contributor
             * Contributor
             */
            slime.external.github.rest.components.Schemas.Contributor[];
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposListDeployKeys {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Deploy Key
             * An SSH key granting access to a single repository.
             */
            slime.external.github.rest.components.Schemas.DeployKey[];
        }
    }
    namespace ReposListDeploymentStatuses {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.DeploymentId;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Deployment Status
             * The status of a deployment.
             */
            slime.external.github.rest.components.Schemas.DeploymentStatus[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposListDeployments {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
            export type $7 = slime.external.github.rest.components.Parameters.Page;
            export type Environment = string | null;
            export type Ref = string;
            export type Sha = string;
            export type Task = string;
        }
        export interface QueryParameters {
            sha?: Parameters.Sha;
            ref?: Parameters.Ref;
            task?: Parameters.Task;
            environment?: Parameters.Environment;
        }
        namespace Responses {
            export type $200 = /**
             * Deployment
             * A request for a specific ref(branch,sha,tag) to be deployed
             */
            slime.external.github.rest.components.Schemas.Deployment[];
        }
    }
    namespace ReposListForAuthenticatedUser {
        namespace Parameters {
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
            export type $6 = slime.external.github.rest.components.Parameters.Page;
            export type $7 = slime.external.github.rest.components.Parameters.Since /* date-time */;
            export type $8 = slime.external.github.rest.components.Parameters.Before /* date-time */;
            export type Affiliation = string;
            export type Direction = "asc" | "desc";
            export type Sort = "created" | "updated" | "pushed" | "full_name";
            export type Type = "all" | "owner" | "public" | "private" | "member";
            export type Visibility = "all" | "public" | "private";
        }
        export interface QueryParameters {
            visibility?: Parameters.Visibility;
            affiliation?: Parameters.Affiliation;
            type?: Parameters.Type;
            sort?: Parameters.Sort;
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Repository
             * A git repository
             */
            slime.external.github.rest.components.Schemas.Repository[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposListForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
            export type Sort = "created" | "updated" | "pushed" | "full_name";
            export type Type = "all" | "public" | "private" | "forks" | "sources" | "member" | "internal";
        }
        export interface QueryParameters {
            type?: Parameters.Type;
            sort?: Parameters.Sort;
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
        }
    }
    namespace ReposListForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Direction = "asc" | "desc";
            export type Sort = "created" | "updated" | "pushed" | "full_name";
            export type Type = "all" | "owner" | "member";
        }
        export interface QueryParameters {
            type?: Parameters.Type;
            sort?: Parameters.Sort;
            direction?: Parameters.Direction;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
        }
    }
    namespace ReposListForks {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Sort = "newest" | "oldest" | "stargazers" | "watchers";
        }
        export interface QueryParameters {
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
        }
    }
    namespace ReposListInvitations {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Repository Invitation
             * Repository invitations let you manage who you collaborate with.
             */
            slime.external.github.rest.components.Schemas.RepositoryInvitation[];
        }
    }
    namespace ReposListInvitationsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Repository Invitation
             * Repository invitations let you manage who you collaborate with.
             */
            slime.external.github.rest.components.Schemas.RepositoryInvitation[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposListLanguages {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Language
             * Language
             */
            slime.external.github.rest.components.Schemas.Language;
        }
    }
    namespace ReposListPagesBuilds {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Page Build
             * Page Build
             */
            slime.external.github.rest.components.Schemas.PageBuild[];
        }
    }
    namespace ReposListPublic {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SinceRepo;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposListPullRequestsAssociatedWithCommit {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommitSha;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Pull Request Simple
             * Pull Request Simple
             */
            slime.external.github.rest.components.Schemas.PullRequestSimple[];
        }
    }
    namespace ReposListReleaseAssets {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Release Asset
             * Data related to a release.
             */
            slime.external.github.rest.components.Schemas.ReleaseAsset[];
        }
    }
    namespace ReposListReleases {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Release
             * A release.
             */
            slime.external.github.rest.components.Schemas.Release[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposListTagProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Tag protection
             * Tag protection
             */
            slime.external.github.rest.components.Schemas.TagProtection[];
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposListTags {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Tag
             * Tag
             */
            slime.external.github.rest.components.Schemas.Tag[];
        }
    }
    namespace ReposListTeams {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
        }
    }
    namespace ReposListWebhookDeliveries {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Cursor;
        }
        namespace Responses {
            export type $200 = /**
             * Simple webhook delivery
             * Delivery made by a webhook, without request and response information.
             */
            slime.external.github.rest.components.Schemas.HookDeliveryItem[];
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposListWebhooks {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook
             * Webhooks for repositories.
             */
            slime.external.github.rest.components.Schemas.Hook[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposMerge {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The name of the base branch that the head will be merged into.
             */
            base: string;
            /**
             * The head to merge. This can be a branch name or a commit SHA1.
             */
            head: string;
            /**
             * Commit message to use for the merge commit. If omitted, a default message will be used.
             */
            commit_message?: string;
        }
        namespace Responses {
            export type $201 = /**
             * Commit
             * Commit
             */
            slime.external.github.rest.components.Schemas.Commit;
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export interface $404 {
            }
            export interface $409 {
            }
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposMergeUpstream {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The name of the branch which should be updated to match upstream.
             */
            branch: string;
        }
        namespace Responses {
            export type $200 = /**
             * Merged upstream
             * Results of a successful merge upstream request
             */
            slime.external.github.rest.components.Schemas.MergedUpstream;
            export interface $409 {
            }
            export interface $422 {
            }
        }
    }
    namespace ReposPingWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposRedeliverWebhookDelivery {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
            export type $3 = slime.external.github.rest.components.Parameters.DeliveryId;
        }
        namespace Responses {
            export type $202 = slime.external.github.rest.components.Responses.Accepted;
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposRemoveAppAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * apps parameter
             */
            apps: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            slime.external.github.rest.components.Schemas.Integration[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposRemoveCollaborator {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposRemoveStatusCheckContexts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * contexts parameter
             */
            contexts: string[];
        } | string[];
        namespace Responses {
            export type $200 = string[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposRemoveStatusCheckProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace ReposRemoveTeamAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * teams parameter
             */
            teams: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposRemoveUserAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * users parameter
             */
            users: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposRenameBranch {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export interface RequestBody {
            /**
             * The new name of the branch.
             */
            new_name: string;
        }
        namespace Responses {
            export type $201 = /**
             * Branch With Protection
             * Branch With Protection
             */
            slime.external.github.rest.components.Schemas.BranchWithProtection;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposReplaceAllTopics {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
             */
            names: string[];
        }
        namespace Responses {
            export type $200 = /**
             * Topic
             * A topic aggregates entities that are related to a subject.
             */
            slime.external.github.rest.components.Schemas.Topic;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ReposRequestPagesBuild {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $201 = /**
             * Page Build Status
             * Page Build Status
             */
            slime.external.github.rest.components.Schemas.PageBuildStatus;
        }
    }
    namespace ReposSetAdminBranchProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        namespace Responses {
            export type $200 = /**
             * Protected Branch Admin Enforced
             * Protected Branch Admin Enforced
             */
            slime.external.github.rest.components.Schemas.ProtectedBranchAdminEnforced;
        }
    }
    namespace ReposSetAppAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * apps parameter
             */
            apps: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * GitHub app
             * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
             */
            slime.external.github.rest.components.Schemas.Integration[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposSetStatusCheckContexts {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * contexts parameter
             */
            contexts: string[];
        } | string[];
        namespace Responses {
            export type $200 = string[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposSetTeamAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * teams parameter
             */
            teams: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposSetUserAccessRestrictions {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export type RequestBody = {
            /**
             * users parameter
             */
            users: string[];
        } | string[];
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposTestPushWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposTransfer {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The username or organization name the repository will be transferred to.
             */
            new_owner: string;
            /**
             * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
             */
            team_ids?: number[];
        }
        namespace Responses {
            export type $202 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository;
        }
    }
    namespace ReposUpdate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The name of the repository.
             */
            name?: string;
            /**
             * A short description of the repository.
             */
            description?: string;
            /**
             * A URL with more information about the repository.
             */
            homepage?: string;
            /**
             * Either `true` to make the repository private or `false` to make it public. Default: `false`.
             * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
             */
            private?: boolean;
            /**
             * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
             */
            visibility?: "public" | "private" | "internal";
            /**
             * Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis": {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
             */
            security_and_analysis?: {
                /**
                 * Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
                 */
                advanced_security?: {
                    /**
                     * Can be `enabled` or `disabled`.
                     */
                    status?: string;
                };
                /**
                 * Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
                 */
                secret_scanning?: {
                    /**
                     * Can be `enabled` or `disabled`.
                     */
                    status?: string;
                };
                /**
                 * Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
                 */
                secret_scanning_push_protection?: {
                    /**
                     * Can be `enabled` or `disabled`.
                     */
                    status?: string;
                };
            } | null;
            /**
             * Either `true` to enable issues for this repository or `false` to disable them.
             */
            has_issues?: boolean;
            /**
             * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
             */
            has_projects?: boolean;
            /**
             * Either `true` to enable the wiki for this repository or `false` to disable it.
             */
            has_wiki?: boolean;
            /**
             * Either `true` to make this repo available as a template repository or `false` to prevent it.
             */
            is_template?: boolean;
            /**
             * Updates the default branch for this repository.
             */
            default_branch?: string;
            /**
             * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
             */
            allow_squash_merge?: boolean;
            /**
             * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
             */
            allow_merge_commit?: boolean;
            /**
             * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
             */
            allow_rebase_merge?: boolean;
            /**
             * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
             */
            allow_auto_merge?: boolean;
            /**
             * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
             */
            delete_branch_on_merge?: boolean;
            /**
             * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
             */
            archived?: boolean;
            /**
             * Either `true` to allow private forks, or `false` to prevent private forks.
             */
            allow_forking?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Full Repository
             * Full Repository
             */
            slime.external.github.rest.components.Schemas.FullRepository;
            export type $307 = slime.external.github.rest.components.Responses.TemporaryRedirect;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposUpdateBranchProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export interface RequestBody {
            /**
             * Require status checks to pass before merging. Set to `null` to disable.
             */
            required_status_checks: {
                /**
                 * Require branches to be up to date before merging.
                 */
                strict: boolean;
                /**
                 * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
                 *
                 */
                contexts: string[];
                /**
                 * The list of status checks to require in order to merge into this branch.
                 */
                checks?: {
                    /**
                     * The name of the required check
                     */
                    context: string;
                    /**
                     * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                     */
                    app_id?: number;
                }[];
            } | null;
            /**
             * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
             */
            enforce_admins: boolean | null;
            /**
             * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
             */
            required_pull_request_reviews: {
                /**
                 * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                 */
                dismissal_restrictions?: {
                    /**
                     * The list of user `login`s with dismissal access
                     */
                    users?: string[];
                    /**
                     * The list of team `slug`s with dismissal access
                     */
                    teams?: string[];
                };
                /**
                 * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
                 */
                dismiss_stale_reviews?: boolean;
                /**
                 * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
                 */
                require_code_owner_reviews?: boolean;
                /**
                 * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
                 */
                required_approving_review_count?: number;
                /**
                 * Allow specific users or teams to bypass pull request requirements.
                 */
                bypass_pull_request_allowances?: {
                    /**
                     * The list of user `login`s allowed to bypass pull request requirements.
                     */
                    users?: string[];
                    /**
                     * The list of team `slug`s allowed to bypass pull request requirements.
                     */
                    teams?: string[];
                };
            } | null;
            /**
             * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
             */
            restrictions: {
                /**
                 * The list of user `login`s with push access
                 */
                users: string[];
                /**
                 * The list of team `slug`s with push access
                 */
                teams: string[];
                /**
                 * The list of app `slug`s with push access
                 */
                apps?: string[];
            } | null;
            /**
             * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
             */
            required_linear_history?: boolean;
            /**
             * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
             */
            allow_force_pushes?: boolean | null;
            /**
             * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
             */
            allow_deletions?: boolean;
            /**
             * Blocks creation of new branches which match the branch protection pattern. Set to `true` to prohibit new branch creation. Default: `false`.
             */
            block_creations?: boolean;
            /**
             * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
             */
            required_conversation_resolution?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Protected Branch
             * Branch protections protect branches
             */
            slime.external.github.rest.components.Schemas.ProtectedBranch;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailedSimple;
        }
    }
    namespace ReposUpdateCommitComment {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.CommentId;
        }
        export interface RequestBody {
            /**
             * The contents of the comment
             */
            body: string;
        }
        namespace Responses {
            export type $200 = /**
             * Commit Comment
             * Commit Comment
             */
            slime.external.github.rest.components.Schemas.CommitComment;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace ReposUpdateInformationAboutPagesSite {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
        }
        export type RequestBody = {
            /**
             * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
             */
            cname?: string | null;
            /**
             * Specify whether HTTPS should be enforced for the repository.
             */
            https_enforced?: boolean;
            /**
             * Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
             */
            public?: boolean;
            source: ("gh-pages" | "master" | "master /docs") | {
                /**
                 * The repository branch used to publish your site's source files.
                 */
                branch: string;
                /**
                 * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                 */
                path: "/" | "/docs";
            };
        } | {
            /**
             * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
             */
            cname: string | null;
            /**
             * Specify whether HTTPS should be enforced for the repository.
             */
            https_enforced?: boolean;
            /**
             * Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
             */
            public?: boolean;
            source?: ("gh-pages" | "master" | "master /docs") | {
                /**
                 * The repository branch used to publish your site's source files.
                 */
                branch: string;
                /**
                 * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                 */
                path: "/" | "/docs";
            };
        } | {
            /**
             * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
             */
            cname?: string | null;
            /**
             * Specify whether HTTPS should be enforced for the repository.
             */
            https_enforced?: boolean;
            /**
             * Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
             */
            public: boolean;
            source?: ("gh-pages" | "master" | "master /docs") | {
                /**
                 * The repository branch used to publish your site's source files.
                 */
                branch: string;
                /**
                 * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                 */
                path: "/" | "/docs";
            };
        } | {
            /**
             * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
             */
            cname?: string | null;
            /**
             * Specify whether HTTPS should be enforced for the repository.
             */
            https_enforced: boolean;
            /**
             * Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
             */
            public?: boolean;
            source?: ("gh-pages" | "master" | "master /docs") | {
                /**
                 * The repository branch used to publish your site's source files.
                 */
                branch: string;
                /**
                 * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                 */
                path: "/" | "/docs";
            };
        };
        namespace Responses {
            export interface $204 {
            }
            export type $400 = slime.external.github.rest.components.Responses.BadRequest;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposUpdateInvitation {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.InvitationId;
        }
        export interface RequestBody {
            /**
             * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
             */
            permissions?: "read" | "write" | "maintain" | "triage" | "admin";
        }
        namespace Responses {
            export type $200 = /**
             * Repository Invitation
             * Repository invitations let you manage who you collaborate with.
             */
            slime.external.github.rest.components.Schemas.RepositoryInvitation;
        }
    }
    namespace ReposUpdatePullRequestReviewProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export interface RequestBody {
            /**
             * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
             */
            dismissal_restrictions?: {
                /**
                 * The list of user `login`s with dismissal access
                 */
                users?: string[];
                /**
                 * The list of team `slug`s with dismissal access
                 */
                teams?: string[];
            };
            /**
             * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
             */
            dismiss_stale_reviews?: boolean;
            /**
             * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
             */
            require_code_owner_reviews?: boolean;
            /**
             * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
             */
            required_approving_review_count?: number;
            /**
             * Allow specific users or teams to bypass pull request requirements.
             */
            bypass_pull_request_allowances?: {
                /**
                 * The list of user `login`s allowed to bypass pull request requirements.
                 */
                users?: string[];
                /**
                 * The list of team `slug`s allowed to bypass pull request requirements.
                 */
                teams?: string[];
            };
        }
        namespace Responses {
            export type $200 = /**
             * Protected Branch Pull Request Review
             * Protected Branch Pull Request Review
             */
            slime.external.github.rest.components.Schemas.ProtectedBranchPullRequestReview;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposUpdateRelease {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
        }
        export interface RequestBody {
            /**
             * The name of the tag.
             */
            tag_name?: string;
            /**
             * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
             */
            target_commitish?: string;
            /**
             * The name of the release.
             */
            name?: string;
            /**
             * Text describing the contents of the tag.
             */
            body?: string;
            /**
             * `true` makes the release a draft, and `false` publishes the release.
             */
            draft?: boolean;
            /**
             * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
             */
            prerelease?: boolean;
            /**
             * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
             */
            discussion_category_name?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Release
             * A release.
             */
            slime.external.github.rest.components.Schemas.Release;
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace ReposUpdateReleaseAsset {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AssetId;
        }
        export interface RequestBody {
            /**
             * The file name of the asset.
             */
            name?: string;
            /**
             * An alternate short description of the asset. Used in place of the filename.
             */
            label?: string;
            /**
             * example:
             * "uploaded"
             */
            state?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Release Asset
             * Data related to a release.
             */
            slime.external.github.rest.components.Schemas.ReleaseAsset;
        }
    }
    namespace ReposUpdateStatusCheckProtection {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.Branch;
        }
        export interface RequestBody {
            /**
             * Require branches to be up to date before merging.
             */
            strict?: boolean;
            /**
             * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
             *
             */
            contexts?: string[];
            /**
             * The list of status checks to require in order to merge into this branch.
             */
            checks?: {
                /**
                 * The name of the required check
                 */
                context: string;
                /**
                 * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                 */
                app_id?: number;
            }[];
        }
        namespace Responses {
            export type $200 = /**
             * Status Check Policy
             * Status Check Policy
             */
            slime.external.github.rest.components.Schemas.StatusCheckPolicy;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposUpdateWebhook {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
        }
        export interface RequestBody {
            /**
             * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
             */
            config?: {
                url: /**
                 * The URL to which the payloads will be delivered.
                 * example:
                 * https://example.com/webhook
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigUrl /* uri */;
                content_type?: /**
                 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                 * example:
                 * "json"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigContentType;
                secret?: /**
                 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                 * example:
                 * "********"
                 */
                slime.external.github.rest.components.Schemas.WebhookConfigSecret;
                insecure_ssl?: slime.external.github.rest.components.Schemas.WebhookConfigInsecureSsl;
                /**
                 * example:
                 * "bar@example.com"
                 */
                address?: string;
                /**
                 * example:
                 * "The Serious Room"
                 */
                room?: string;
            };
            /**
             * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
             */
            events?: string[];
            /**
             * Determines a list of events to be added to the list of events that the Hook triggers for.
             */
            add_events?: string[];
            /**
             * Determines a list of events to be removed from the list of events that the Hook triggers for.
             */
            remove_events?: string[];
            /**
             * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
             */
            active?: boolean;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook
             * Webhooks for repositories.
             */
            slime.external.github.rest.components.Schemas.Hook;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace ReposUpdateWebhookConfigForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.HookId;
        }
        /**
         * example:
         * {
         *   "content_type": "json",
         *   "insecure_ssl": "0",
         *   "secret": "********",
         *   "url": "https://example.com/webhook"
         * }
         */
        export interface RequestBody {
            url?: /**
             * The URL to which the payloads will be delivered.
             * example:
             * https://example.com/webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfigUrl /* uri */;
            content_type?: /**
             * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
             * example:
             * "json"
             */
            slime.external.github.rest.components.Schemas.WebhookConfigContentType;
            secret?: /**
             * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
             * example:
             * "********"
             */
            slime.external.github.rest.components.Schemas.WebhookConfigSecret;
            insecure_ssl?: slime.external.github.rest.components.Schemas.WebhookConfigInsecureSsl;
        }
        namespace Responses {
            export type $200 = /**
             * Webhook Configuration
             * Configuration object of the webhook
             */
            slime.external.github.rest.components.Schemas.WebhookConfig;
        }
    }
    namespace ReposUploadReleaseAsset {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.ReleaseId;
            export type Label = string;
            export type Name = string;
        }
        export interface QueryParameters {
            name: Parameters.Name;
            label?: Parameters.Label;
        }
        namespace Responses {
            export type $201 = /**
             * Release Asset
             * Data related to a release.
             */
            slime.external.github.rest.components.Schemas.ReleaseAsset;
            export interface $422 {
            }
        }
    }
    namespace ScimDeleteUserFromOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.ScimForbidden;
            export type $404 = slime.external.github.rest.components.Responses.ScimNotFound;
        }
    }
    namespace ScimGetProvisioningInformationForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        namespace Responses {
            export type $200 = /**
             * SCIM /Users
             * SCIM /Users provisioning endpoints
             */
            slime.external.github.rest.components.Schemas.ScimUser;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.ScimForbidden;
            export type $404 = slime.external.github.rest.components.Responses.ScimNotFound;
        }
    }
    namespace ScimListProvisionedIdentities {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type Count = number;
            export type Filter = string;
            export type StartIndex = number;
        }
        export interface QueryParameters {
            startIndex?: Parameters.StartIndex;
            count?: Parameters.Count;
            filter?: Parameters.Filter;
        }
        namespace Responses {
            export type $200 = /**
             * SCIM User List
             * SCIM User List
             */
            slime.external.github.rest.components.Schemas.ScimUserList;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $400 = slime.external.github.rest.components.Responses.ScimBadRequest;
            export type $403 = slime.external.github.rest.components.Responses.ScimForbidden;
            export type $404 = slime.external.github.rest.components.Responses.ScimNotFound;
            export type $429 = slime.external.github.rest.components.Responses.ScimTooManyRequests;
        }
    }
    namespace ScimProvisionAndInviteUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * Configured by the admin. Could be an email, login, or username
             * example:
             * someone@example.com
             */
            userName: string;
            /**
             * The name of the user, suitable for display to end-users
             * example:
             * Jon Doe
             */
            displayName?: string;
            /**
             * example:
             * {
             *   "givenName": "Jane",
             *   "familyName": "User"
             * }
             */
            name: {
                givenName: string;
                familyName: string;
                formatted?: string;
            };
            /**
             * user emails
             * example:
             * [
             *   {
             *     "value": "someone@example.com",
             *     "primary": true
             *   },
             *   {
             *     "value": "another@example.com",
             *     "primary": false
             *   }
             * ]
             */
            emails: [
                {
                    value: string;
                    primary?: boolean;
                    type?: string;
                },
                ...{
                    value: string;
                    primary?: boolean;
                    type?: string;
                }[]
            ];
            schemas?: string[];
            externalId?: string;
            groups?: string[];
            active?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * SCIM /Users
             * SCIM /Users provisioning endpoints
             */
            slime.external.github.rest.components.Schemas.ScimUser;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $400 = slime.external.github.rest.components.Responses.ScimBadRequest;
            export type $403 = slime.external.github.rest.components.Responses.ScimForbidden;
            export type $404 = slime.external.github.rest.components.Responses.ScimNotFound;
            export type $409 = slime.external.github.rest.components.Responses.ScimConflict;
            export type $500 = slime.external.github.rest.components.Responses.ScimInternalError;
        }
    }
    namespace ScimSetInformationForProvisionedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        export interface RequestBody {
            schemas?: string[];
            /**
             * The name of the user, suitable for display to end-users
             * example:
             * Jon Doe
             */
            displayName?: string;
            externalId?: string;
            groups?: string[];
            active?: boolean;
            /**
             * Configured by the admin. Could be an email, login, or username
             * example:
             * someone@example.com
             */
            userName: string;
            /**
             * example:
             * {
             *   "givenName": "Jane",
             *   "familyName": "User"
             * }
             */
            name: {
                givenName: string;
                familyName: string;
                formatted?: string;
            };
            /**
             * user emails
             * example:
             * [
             *   {
             *     "value": "someone@example.com",
             *     "primary": true
             *   },
             *   {
             *     "value": "another@example.com",
             *     "primary": false
             *   }
             * ]
             */
            emails: [
                {
                    type?: string;
                    value: string;
                    primary?: boolean;
                },
                ...{
                    type?: string;
                    value: string;
                    primary?: boolean;
                }[]
            ];
        }
        namespace Responses {
            export type $200 = /**
             * SCIM /Users
             * SCIM /Users provisioning endpoints
             */
            slime.external.github.rest.components.Schemas.ScimUser;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.ScimForbidden;
            export type $404 = slime.external.github.rest.components.Responses.ScimNotFound;
        }
    }
    namespace ScimUpdateAttributeForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.ScimUserId;
        }
        export interface RequestBody {
            schemas?: string[];
            /**
             * Set of operations to be performed
             * example:
             * [
             *   {
             *     "op": "replace",
             *     "value": {
             *       "active": false
             *     }
             *   }
             * ]
             */
            Operations: [
                {
                    op: "add" | "remove" | "replace";
                    path?: string;
                    value?: {
                        active?: boolean | null;
                        userName?: string | null;
                        externalId?: string | null;
                        givenName?: string | null;
                        familyName?: string | null;
                    } | {
                        value?: string;
                        primary?: boolean;
                    }[] | string;
                },
                ...{
                    op: "add" | "remove" | "replace";
                    path?: string;
                    value?: {
                        active?: boolean | null;
                        userName?: string | null;
                        externalId?: string | null;
                        givenName?: string | null;
                        familyName?: string | null;
                    } | {
                        value?: string;
                        primary?: boolean;
                    }[] | string;
                }[]
            ];
        }
        namespace Responses {
            export type $200 = /**
             * SCIM /Users
             * SCIM /Users provisioning endpoints
             */
            slime.external.github.rest.components.Schemas.ScimUser;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $400 = slime.external.github.rest.components.Responses.ScimBadRequest;
            export type $403 = slime.external.github.rest.components.Responses.ScimForbidden;
            export type $404 = slime.external.github.rest.components.Responses.ScimNotFound;
            export type $429 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace SearchCode {
        namespace Parameters {
            export type $2 = slime.external.github.rest.components.Parameters.Order;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Q = string;
            export type Sort = "indexed";
        }
        export interface QueryParameters {
            q: Parameters.Q;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                incomplete_results: boolean;
                items: /**
                 * Code Search Result Item
                 * Code Search Result Item
                 */
                slime.external.github.rest.components.Schemas.CodeSearchResultItem[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SearchCommits {
        namespace Parameters {
            export type $2 = slime.external.github.rest.components.Parameters.Order;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Q = string;
            export type Sort = "author-date" | "committer-date";
        }
        export interface QueryParameters {
            q: Parameters.Q;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                incomplete_results: boolean;
                items: /**
                 * Commit Search Result Item
                 * Commit Search Result Item
                 */
                slime.external.github.rest.components.Schemas.CommitSearchResultItem[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace SearchIssuesAndPullRequests {
        namespace Parameters {
            export type $2 = slime.external.github.rest.components.Parameters.Order;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Q = string;
            export type Sort = "comments" | "reactions" | "reactions-+1" | "reactions--1" | "reactions-smile" | "reactions-thinking_face" | "reactions-heart" | "reactions-tada" | "interactions" | "created" | "updated";
        }
        export interface QueryParameters {
            q: Parameters.Q;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                incomplete_results: boolean;
                items: /**
                 * Issue Search Result Item
                 * Issue Search Result Item
                 */
                slime.external.github.rest.components.Schemas.IssueSearchResultItem[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SearchLabels {
        namespace Parameters {
            export type $3 = slime.external.github.rest.components.Parameters.Order;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type Q = string;
            export type RepositoryId = number;
            export type Sort = "created" | "updated";
        }
        export interface QueryParameters {
            repository_id: Parameters.RepositoryId;
            q: Parameters.Q;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                incomplete_results: boolean;
                items: /**
                 * Label Search Result Item
                 * Label Search Result Item
                 */
                slime.external.github.rest.components.Schemas.LabelSearchResultItem[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace SearchRepos {
        namespace Parameters {
            export type $2 = slime.external.github.rest.components.Parameters.Order;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Q = string;
            export type Sort = "stars" | "forks" | "help-wanted-issues" | "updated";
        }
        export interface QueryParameters {
            q: Parameters.Q;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                incomplete_results: boolean;
                items: /**
                 * Repo Search Result Item
                 * Repo Search Result Item
                 */
                slime.external.github.rest.components.Schemas.RepoSearchResultItem[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SearchTopics {
        namespace Parameters {
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
            export type Q = string;
        }
        export interface QueryParameters {
            q: Parameters.Q;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                incomplete_results: boolean;
                items: /**
                 * Topic Search Result Item
                 * Topic Search Result Item
                 */
                slime.external.github.rest.components.Schemas.TopicSearchResultItem[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace SearchUsers {
        namespace Parameters {
            export type $2 = slime.external.github.rest.components.Parameters.Order;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Q = string;
            export type Sort = "followers" | "repositories" | "joined";
        }
        export interface QueryParameters {
            q: Parameters.Q;
            sort?: Parameters.Sort;
        }
        namespace Responses {
            export interface $200 {
                total_count: number;
                incomplete_results: boolean;
                items: /**
                 * User Search Result Item
                 * User Search Result Item
                 */
                slime.external.github.rest.components.Schemas.UserSearchResultItem[];
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SecretScanningGetAlert {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AlertNumber;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.SecretScanningAlert;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export interface $404 {
            }
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SecretScanningListAlertsForEnterprise {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Enterprise;
            export type $1 = slime.external.github.rest.components.Parameters.SecretScanningAlertState;
            export type $2 = slime.external.github.rest.components.Parameters.SecretScanningAlertSecretType;
            export type $3 = slime.external.github.rest.components.Parameters.SecretScanningAlertResolution;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.PaginationBefore;
            export type $6 = slime.external.github.rest.components.Parameters.PaginationAfter;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.OrganizationSecretScanningAlert[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SecretScanningListAlertsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.SecretScanningAlertState;
            export type $2 = slime.external.github.rest.components.Parameters.SecretScanningAlertSecretType;
            export type $3 = slime.external.github.rest.components.Parameters.SecretScanningAlertResolution;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type $5 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.OrganizationSecretScanningAlert[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SecretScanningListAlertsForRepo {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.SecretScanningAlertState;
            export type $3 = slime.external.github.rest.components.Parameters.SecretScanningAlertSecretType;
            export type $4 = slime.external.github.rest.components.Parameters.SecretScanningAlertResolution;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
            export type $6 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.SecretScanningAlert[];
            export interface $404 {
            }
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SecretScanningListLocationsForAlert {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AlertNumber;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            /**
             * List of locations where the secret was detected
             */
            export type $200 = slime.external.github.rest.components.Schemas.SecretScanningLocation[];
            export interface $404 {
            }
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace SecretScanningUpdateAlert {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Owner;
            export type $1 = slime.external.github.rest.components.Parameters.Repo;
            export type $2 = slime.external.github.rest.components.Parameters.AlertNumber;
        }
        export interface RequestBody {
            state: /* Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */ slime.external.github.rest.components.Schemas.SecretScanningAlertState;
            resolution?: /* **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`. */ slime.external.github.rest.components.Schemas.SecretScanningAlertResolution;
        }
        namespace Responses {
            export type $200 = slime.external.github.rest.components.Schemas.SecretScanningAlert;
            export interface $404 {
            }
            export interface $422 {
            }
            export type $503 = slime.external.github.rest.components.Responses.ServiceUnavailable;
        }
    }
    namespace TeamsAddMemberLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export interface $404 {
            }
            export interface $422 {
            }
        }
    }
    namespace TeamsAddOrUpdateMembershipForUserInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        export interface RequestBody {
            /**
             * The role that this user should have in the team. Can be one of:
             * \* `member` - a normal member of the team.
             * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
             */
            role?: "member" | "maintainer";
        }
        namespace Responses {
            export type $200 = /**
             * Team Membership
             * Team Membership
             */
            slime.external.github.rest.components.Schemas.TeamMembership;
            export interface $403 {
            }
            export interface $422 {
            }
        }
    }
    namespace TeamsAddOrUpdateMembershipForUserLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        export interface RequestBody {
            /**
             * The role that this user should have in the team. Can be one of:
             * \* `member` - a normal member of the team.
             * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
             */
            role?: "member" | "maintainer";
        }
        namespace Responses {
            export type $200 = /**
             * Team Membership
             * Team Membership
             */
            slime.external.github.rest.components.Schemas.TeamMembership;
            export interface $403 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export interface $422 {
            }
        }
    }
    namespace TeamsAddOrUpdateProjectPermissionsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        export type RequestBody = {
            /**
             * The permission to grant to the team for this project. Can be one of:
             * \* `read` - team members can read, but not write to or administer this project.
             * \* `write` - team members can read and write, but not administer this project.
             * \* `admin` - team members can read, write and administer this project.
             * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
             */
            permission?: "read" | "write" | "admin";
        } | null;
        namespace Responses {
            export interface $204 {
            }
            export interface $403 {
                message?: string;
                documentation_url?: string;
            }
        }
    }
    namespace TeamsAddOrUpdateProjectPermissionsLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        export interface RequestBody {
            /**
             * The permission to grant to the team for this project. Can be one of:
             * \* `read` - team members can read, but not write to or administer this project.
             * \* `write` - team members can read and write, but not administer this project.
             * \* `admin` - team members can read, write and administer this project.
             * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
             */
            permission?: "read" | "write" | "admin";
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $403 {
                message?: string;
                documentation_url?: string;
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace TeamsAddOrUpdateRepoPermissionsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.Owner;
            export type $3 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The permission to grant the team on this repository. Can be one of:
             * \* `pull` - team members can pull, but not push to or administer this repository.
             * \* `push` - team members can pull and push, but not administer this repository.
             * \* `admin` - team members can pull, push and administer this repository.
             * \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
             * \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
             * \* custom repository role name - A custom repository role if the owning organization has defined any.
             *
             * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
             */
            permission?: "pull" | "push" | "admin" | "maintain" | "triage";
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsAddOrUpdateRepoPermissionsLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Owner;
            export type $2 = slime.external.github.rest.components.Parameters.Repo;
        }
        export interface RequestBody {
            /**
             * The permission to grant the team on this repository. Can be one of:
             * \* `pull` - team members can pull, but not push to or administer this repository.
             * \* `push` - team members can pull and push, but not administer this repository.
             * \* `admin` - team members can pull, push and administer this repository.
             *
             * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
             */
            permission?: "pull" | "push" | "admin";
        }
        namespace Responses {
            export interface $204 {
            }
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace TeamsCheckPermissionsForProjectInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        namespace Responses {
            export type $200 = /**
             * Team Project
             * A team's access to a project.
             */
            slime.external.github.rest.components.Schemas.TeamProject;
            export interface $404 {
            }
        }
    }
    namespace TeamsCheckPermissionsForProjectLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        namespace Responses {
            export type $200 = /**
             * Team Project
             * A team's access to a project.
             */
            slime.external.github.rest.components.Schemas.TeamProject;
            export interface $404 {
            }
        }
    }
    namespace TeamsCheckPermissionsForRepoInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.Owner;
            export type $3 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Team Repository
             * A team's access to a repository.
             */
            slime.external.github.rest.components.Schemas.TeamRepository;
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace TeamsCheckPermissionsForRepoLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Owner;
            export type $2 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export type $200 = /**
             * Team Repository
             * A team's access to a repository.
             */
            slime.external.github.rest.components.Schemas.TeamRepository;
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace TeamsCreate {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
        }
        export interface RequestBody {
            /**
             * The name of the team.
             */
            name: string;
            /**
             * The description of the team.
             */
            description?: string;
            /**
             * List GitHub IDs for organization members who will become team maintainers.
             */
            maintainers?: string[];
            /**
             * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
             */
            repo_names?: string[];
            /**
             * The level of privacy this team should have. The options are:
             * **For a non-nested team:**
             * \* `secret` - only visible to organization owners and members of this team.
             * \* `closed` - visible to all members of this organization.
             * Default: `secret`
             * **For a parent or child team:**
             * \* `closed` - visible to all members of this organization.
             * Default for child team: `closed`
             */
            privacy?: "secret" | "closed";
            /**
             * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
             * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
             * \* `push` - team members can pull and push, but not administer newly-added repositories.
             */
            permission?: "pull" | "push";
            /**
             * The ID of a team to set as the parent team.
             */
            parent_team_id?: number;
        }
        namespace Responses {
            export type $201 = /**
             * Full Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.TeamFull;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace TeamsCreateDiscussionCommentInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        export interface RequestBody {
            /**
             * The discussion comment's body text.
             */
            body: string;
        }
        namespace Responses {
            export type $201 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment;
        }
    }
    namespace TeamsCreateDiscussionCommentLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        export interface RequestBody {
            /**
             * The discussion comment's body text.
             */
            body: string;
        }
        namespace Responses {
            export type $201 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment;
        }
    }
    namespace TeamsCreateDiscussionInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        export interface RequestBody {
            /**
             * The discussion post's title.
             */
            title: string;
            /**
             * The discussion post's body text.
             */
            body: string;
            /**
             * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
             */
            private?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion;
        }
    }
    namespace TeamsCreateDiscussionLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
        }
        export interface RequestBody {
            /**
             * The discussion post's title.
             */
            title: string;
            /**
             * The discussion post's body text.
             */
            body: string;
            /**
             * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
             */
            private?: boolean;
        }
        namespace Responses {
            export type $201 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion;
        }
    }
    namespace TeamsCreateOrUpdateIdpGroupConnectionsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        export interface RequestBody {
            /**
             * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
             */
            groups?: {
                /**
                 * ID of the IdP group.
                 */
                group_id: string;
                /**
                 * Name of the IdP group.
                 */
                group_name: string;
                /**
                 * Description of the IdP group.
                 */
                group_description: string;
            }[];
        }
        namespace Responses {
            export type $200 = /**
             * GroupMapping
             * External Groups to be mapped to a team for membership
             */
            slime.external.github.rest.components.Schemas.GroupMapping;
        }
    }
    namespace TeamsCreateOrUpdateIdpGroupConnectionsLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
        }
        export interface RequestBody {
            /**
             * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
             */
            groups: {
                /**
                 * ID of the IdP group.
                 */
                group_id: string;
                /**
                 * Name of the IdP group.
                 */
                group_name: string;
                /**
                 * Description of the IdP group.
                 */
                group_description: string;
                /**
                 * example:
                 * "caceab43fc9ffa20081c"
                 */
                id?: string;
                /**
                 * example:
                 * "external-team-6c13e7288ef7"
                 */
                name?: string;
                /**
                 * example:
                 * "moar cheese pleese"
                 */
                description?: string;
            }[];
            /**
             * example:
             * "I am not a timestamp"
             */
            synced_at?: string;
        }
        namespace Responses {
            export type $200 = /**
             * GroupMapping
             * External Groups to be mapped to a team for membership
             */
            slime.external.github.rest.components.Schemas.GroupMapping;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace TeamsDeleteDiscussionCommentInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsDeleteDiscussionCommentLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $2 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsDeleteDiscussionInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsDeleteDiscussionLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsDeleteInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsDeleteLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace TeamsExternalIdpGroupInfoForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.GroupId;
        }
        namespace Responses {
            export type $200 = /**
             * ExternalGroup
             * Information about an external group's usage and its members
             */
            slime.external.github.rest.components.Schemas.ExternalGroup;
        }
    }
    namespace TeamsGetByName {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        namespace Responses {
            export type $200 = /**
             * Full Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.TeamFull;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsGetDiscussionCommentInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment;
        }
    }
    namespace TeamsGetDiscussionCommentLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $2 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment;
        }
    }
    namespace TeamsGetDiscussionInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion;
        }
    }
    namespace TeamsGetDiscussionLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion;
        }
    }
    namespace TeamsGetLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
        }
        namespace Responses {
            export type $200 = /**
             * Full Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.TeamFull;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsGetMemberLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace TeamsGetMembershipForUserInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Team Membership
             * Team Membership
             */
            slime.external.github.rest.components.Schemas.TeamMembership;
            export interface $404 {
            }
        }
    }
    namespace TeamsGetMembershipForUserLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Team Membership
             * Team Membership
             */
            slime.external.github.rest.components.Schemas.TeamMembership;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsLinkExternalIdpGroupToTeamForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        export interface RequestBody {
            /**
             * External Group Id
             * example:
             * 1
             */
            group_id: number;
        }
        namespace Responses {
            export type $200 = /**
             * ExternalGroup
             * Information about an external group's usage and its members
             */
            slime.external.github.rest.components.Schemas.ExternalGroup;
        }
    }
    namespace TeamsList {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace TeamsListChildInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
        }
    }
    namespace TeamsListChildLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.Team[];
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace TeamsListDiscussionCommentsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.Direction;
            export type $4 = slime.external.github.rest.components.Parameters.PerPage;
            export type $5 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment[];
        }
    }
    namespace TeamsListDiscussionCommentsLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $2 = slime.external.github.rest.components.Parameters.Direction;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment[];
        }
    }
    namespace TeamsListDiscussionsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.Direction;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Pinned = string;
        }
        export interface QueryParameters {
            pinned?: Parameters.Pinned;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion[];
        }
    }
    namespace TeamsListDiscussionsLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Direction;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion[];
        }
    }
    namespace TeamsListExternalIdpGroupsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type DisplayName = string;
            export type Page = number;
        }
        export interface QueryParameters {
            page?: Parameters.Page;
            display_name?: Parameters.DisplayName;
        }
        namespace Responses {
            export type $200 = /**
             * ExternalGroups
             * A list of external groups available to be connected to a team
             */
            slime.external.github.rest.components.Schemas.ExternalGroups;
        }
    }
    namespace TeamsListForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Full Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.TeamFull[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsListIdpGroupsForLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
        }
        namespace Responses {
            export type $200 = /**
             * GroupMapping
             * External Groups to be mapped to a team for membership
             */
            slime.external.github.rest.components.Schemas.GroupMapping;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsListIdpGroupsForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type Page = string;
        }
        export interface QueryParameters {
            page?: Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * GroupMapping
             * External Groups to be mapped to a team for membership
             */
            slime.external.github.rest.components.Schemas.GroupMapping;
        }
    }
    namespace TeamsListIdpGroupsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        namespace Responses {
            export type $200 = /**
             * GroupMapping
             * External Groups to be mapped to a team for membership
             */
            slime.external.github.rest.components.Schemas.GroupMapping;
        }
    }
    namespace TeamsListLinkedExternalIdpGroupsToTeamForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        namespace Responses {
            export type $200 = /**
             * ExternalGroups
             * A list of external groups available to be connected to a team
             */
            slime.external.github.rest.components.Schemas.ExternalGroups;
        }
    }
    namespace TeamsListMembersInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $3 = slime.external.github.rest.components.Parameters.PerPage;
            export type $4 = slime.external.github.rest.components.Parameters.Page;
            export type Role = "member" | "maintainer" | "all";
        }
        export interface QueryParameters {
            role?: Parameters.Role;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
        }
    }
    namespace TeamsListMembersLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
            export type Role = "member" | "maintainer" | "all";
        }
        export interface QueryParameters {
            role?: Parameters.Role;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsListPendingInvitationsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Invitation
             * Organization Invitation
             */
            slime.external.github.rest.components.Schemas.OrganizationInvitation[];
        }
    }
    namespace TeamsListPendingInvitationsLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Organization Invitation
             * Organization Invitation
             */
            slime.external.github.rest.components.Schemas.OrganizationInvitation[];
        }
    }
    namespace TeamsListProjectsInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team Project
             * A team's access to a project.
             */
            slime.external.github.rest.components.Schemas.TeamProject[];
        }
    }
    namespace TeamsListProjectsLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Team Project
             * A team's access to a project.
             */
            slime.external.github.rest.components.Schemas.TeamProject[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsListReposInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.PerPage;
            export type $3 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
        }
    }
    namespace TeamsListReposLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Minimal Repository
             * Minimal Repository
             */
            slime.external.github.rest.components.Schemas.MinimalRepository[];
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace TeamsRemoveMemberLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace TeamsRemoveMembershipForUserInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $403 {
            }
        }
    }
    namespace TeamsRemoveMembershipForUserLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $403 {
            }
        }
    }
    namespace TeamsRemoveProjectInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsRemoveProjectLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.ProjectId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace TeamsRemoveRepoInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.Owner;
            export type $3 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsRemoveRepoLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.Owner;
            export type $2 = slime.external.github.rest.components.Parameters.Repo;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsUnlinkExternalIdpGroupFromTeamForOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        namespace Responses {
            export interface $204 {
            }
        }
    }
    namespace TeamsUpdateDiscussionCommentInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $3 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        export interface RequestBody {
            /**
             * The discussion comment's body text.
             */
            body: string;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment;
        }
    }
    namespace TeamsUpdateDiscussionCommentLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
            export type $2 = slime.external.github.rest.components.Parameters.CommentNumber;
        }
        export interface RequestBody {
            /**
             * The discussion comment's body text.
             */
            body: string;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion Comment
             * A reply to a discussion within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussionComment;
        }
    }
    namespace TeamsUpdateDiscussionInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
            export type $2 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        export interface RequestBody {
            /**
             * The discussion post's title.
             */
            title?: string;
            /**
             * The discussion post's body text.
             */
            body?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion;
        }
    }
    namespace TeamsUpdateDiscussionLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
            export type $1 = slime.external.github.rest.components.Parameters.DiscussionNumber;
        }
        export interface RequestBody {
            /**
             * The discussion post's title.
             */
            title?: string;
            /**
             * The discussion post's body text.
             */
            body?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Team Discussion
             * A team discussion is a persistent record of a free-form conversation within a team.
             */
            slime.external.github.rest.components.Schemas.TeamDiscussion;
        }
    }
    namespace TeamsUpdateInOrg {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Org;
            export type $1 = slime.external.github.rest.components.Parameters.TeamSlug;
        }
        export interface RequestBody {
            /**
             * The name of the team.
             */
            name?: string;
            /**
             * The description of the team.
             */
            description?: string;
            /**
             * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
             * **For a non-nested team:**
             * \* `secret` - only visible to organization owners and members of this team.
             * \* `closed` - visible to all members of this organization.
             * **For a parent or child team:**
             * \* `closed` - visible to all members of this organization.
             */
            privacy?: "secret" | "closed";
            /**
             * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
             * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
             * \* `push` - team members can pull and push, but not administer newly-added repositories.
             * \* `admin` - team members can pull, push and administer newly-added repositories.
             */
            permission?: "pull" | "push" | "admin";
            /**
             * The ID of a team to set as the parent team.
             */
            parent_team_id?: null | number;
        }
        namespace Responses {
            export type $201 = /**
             * Full Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.TeamFull;
        }
    }
    namespace TeamsUpdateLegacy {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.TeamId;
        }
        export interface RequestBody {
            /**
             * The name of the team.
             */
            name: string;
            /**
             * The description of the team.
             */
            description?: string;
            /**
             * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
             * **For a non-nested team:**
             * \* `secret` - only visible to organization owners and members of this team.
             * \* `closed` - visible to all members of this organization.
             * **For a parent or child team:**
             * \* `closed` - visible to all members of this organization.
             */
            privacy?: "secret" | "closed";
            /**
             * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
             * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
             * \* `push` - team members can pull and push, but not administer newly-added repositories.
             * \* `admin` - team members can pull, push and administer newly-added repositories.
             */
            permission?: "pull" | "push" | "admin";
            /**
             * The ID of a team to set as the parent team.
             */
            parent_team_id?: null | number;
        }
        namespace Responses {
            export type $200 = /**
             * Full Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.TeamFull;
            export type $201 = /**
             * Full Team
             * Groups of organization members that gives permissions on specified repositories.
             */
            slime.external.github.rest.components.Schemas.TeamFull;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersAddEmailForAuthenticatedUser {
        export type RequestBody = {
            /**
             * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
             * example:
             * []
             */
            emails: string[];
        } | string[] | string;
        namespace Responses {
            export type $201 = /**
             * Email
             * Email
             */
            slime.external.github.rest.components.Schemas.Email[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersBlock {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersCheckBlocked {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace UsersCheckFollowingForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type TargetUser = string;
        }
        export interface PathParameters {
            target_user: Parameters.TargetUser;
        }
        namespace Responses {
            export interface $204 {
            }
            export interface $404 {
            }
        }
    }
    namespace UsersCheckPersonIsFollowedByAuthenticated {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = /**
             * Basic Error
             * Basic Error
             */
            slime.external.github.rest.components.Schemas.BasicError;
        }
    }
    namespace UsersCreateGpgKeyForAuthenticatedUser {
        export interface RequestBody {
            /**
             * A GPG key in ASCII-armored format.
             */
            armored_public_key: string;
        }
        namespace Responses {
            export type $201 = /**
             * GPG Key
             * A unique encryption key
             */
            slime.external.github.rest.components.Schemas.GpgKey;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersCreatePublicSshKeyForAuthenticatedUser {
        export interface RequestBody {
            /**
             * A descriptive name for the new key.
             * example:
             * Personal MacBook Air
             */
            title?: string;
            /**
             * The public SSH key to add to your GitHub account.
             */
            key: string; // ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
        }
        namespace Responses {
            export type $201 = /**
             * Key
             * Key
             */
            slime.external.github.rest.components.Schemas.Key;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersDeleteEmailForAuthenticatedUser {
        export type RequestBody = {
            /**
             * Email addresses associated with the GitHub user account.
             */
            emails: string[];
        } | string[] | string;
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersDeleteGpgKeyForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GpgKeyId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersDeletePublicSshKeyForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.KeyId;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersFollow {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersGetAuthenticated {
        namespace Responses {
            export type $200 = /**
             * Private User
             * Private User
             */
            slime.external.github.rest.components.Schemas.PrivateUser | /**
             * Public User
             * Public User
             */
            slime.external.github.rest.components.Schemas.PublicUser;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace UsersGetByUsername {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export type $200 = /**
             * Private User
             * Private User
             */
            slime.external.github.rest.components.Schemas.PrivateUser | /**
             * Public User
             * Public User
             */
            slime.external.github.rest.components.Schemas.PublicUser;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersGetContextForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type SubjectId = string;
            export type SubjectType = "organization" | "repository" | "issue" | "pull_request";
        }
        export interface QueryParameters {
            subject_type?: Parameters.SubjectType;
            subject_id?: Parameters.SubjectId;
        }
        namespace Responses {
            export type $200 = /**
             * Hovercard
             * Hovercard
             */
            slime.external.github.rest.components.Schemas.Hovercard;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersGetGpgKeyForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.GpgKeyId;
        }
        namespace Responses {
            export type $200 = /**
             * GPG Key
             * A unique encryption key
             */
            slime.external.github.rest.components.Schemas.GpgKey;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersGetPublicSshKeyForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.KeyId;
        }
        namespace Responses {
            export type $200 = /**
             * Key
             * Key
             */
            slime.external.github.rest.components.Schemas.Key;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersList {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.SinceUser;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
        }
    }
    namespace UsersListBlockedByAuthenticatedUser {
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersListEmailsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Email
             * Email
             */
            slime.external.github.rest.components.Schemas.Email[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersListFollowedByAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace UsersListFollowersForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
        }
    }
    namespace UsersListFollowersForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
        }
    }
    namespace UsersListFollowingForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Simple User
             * Simple User
             */
            slime.external.github.rest.components.Schemas.SimpleUser[];
        }
    }
    namespace UsersListGpgKeysForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * GPG Key
             * A unique encryption key
             */
            slime.external.github.rest.components.Schemas.GpgKey[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersListGpgKeysForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * GPG Key
             * A unique encryption key
             */
            slime.external.github.rest.components.Schemas.GpgKey[];
        }
    }
    namespace UsersListPublicEmailsForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Email
             * Email
             */
            slime.external.github.rest.components.Schemas.Email[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersListPublicKeysForUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
            export type $1 = slime.external.github.rest.components.Parameters.PerPage;
            export type $2 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Key Simple
             * Key Simple
             */
            slime.external.github.rest.components.Schemas.KeySimple[];
        }
    }
    namespace UsersListPublicSshKeysForAuthenticatedUser {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.PerPage;
            export type $1 = slime.external.github.rest.components.Parameters.Page;
        }
        namespace Responses {
            export type $200 = /**
             * Key
             * Key
             */
            slime.external.github.rest.components.Schemas.Key[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersSetPrimaryEmailVisibilityForAuthenticatedUser {
        export interface RequestBody {
            /**
             * Denotes whether an email is publicly visible.
             */
            visibility: "public" | "private";
        }
        namespace Responses {
            export type $200 = /**
             * Email
             * Email
             */
            slime.external.github.rest.components.Schemas.Email[];
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
    namespace UsersUnblock {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersUnfollow {
        namespace Parameters {
            export type $0 = slime.external.github.rest.components.Parameters.Username;
        }
        namespace Responses {
            export interface $204 {
            }
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
        }
    }
    namespace UsersUpdateAuthenticated {
        export interface RequestBody {
            /**
             * The new name of the user.
             * example:
             * Omar Jahandar
             */
            name?: string;
            /**
             * The publicly visible email address of the user.
             * example:
             * omar@example.com
             */
            email?: string;
            /**
             * The new blog URL of the user.
             * example:
             * blog.example.com
             */
            blog?: string;
            /**
             * The new Twitter username of the user.
             * example:
             * therealomarj
             */
            twitter_username?: string | null;
            /**
             * The new company of the user.
             * example:
             * Acme corporation
             */
            company?: string;
            /**
             * The new location of the user.
             * example:
             * Berlin, Germany
             */
            location?: string;
            /**
             * The new hiring availability of the user.
             */
            hireable?: boolean;
            /**
             * The new short biography of the user.
             */
            bio?: string;
        }
        namespace Responses {
            export type $200 = /**
             * Private User
             * Private User
             */
            slime.external.github.rest.components.Schemas.PrivateUser;
            export type $304 = slime.external.github.rest.components.Responses.NotModified;
            export type $401 = slime.external.github.rest.components.Responses.RequiresAuthentication;
            export type $403 = slime.external.github.rest.components.Responses.Forbidden;
            export type $404 = slime.external.github.rest.components.Responses.NotFound;
            export type $422 = slime.external.github.rest.components.Responses.ValidationFailed;
        }
    }
}
